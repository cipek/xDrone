/**
 * generated by Xtext 2.17.0
 */
package ic.ac.uk.xdrone.tests;

import com.google.inject.Inject;
import ic.ac.uk.xdrone.tests.XDroneInjectorProvider;
import ic.ac.uk.xdrone.xDrone.Program;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.testing.CompilationTestHelper;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(XDroneInjectorProvider.class)
@SuppressWarnings("all")
public class XDroneParsingTest {
  @Inject
  private ParseHelper<Program> parseHelper;
  
  @Inject
  @Extension
  private CompilationTestHelper _compilationTestHelper;
  
  @Test
  public void GOTO() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.newLine();
      _builder.append("fly(){");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("TAKEOFF()");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("GOTO(\"table\")");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("LAND()");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("environment(){");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("DRONE={");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("position=(1,0,1)");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("rotation=45");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("WALLS = {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("front=2");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("back=2");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("left=3");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("right=3");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("up=3");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("cupboard = {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("origin=(2.5,0.5,1.5)");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("size=(1,1,1)");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("color=\"brown\"");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("plant = {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("origin=(2.5,1,-1.5)");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("size=(1,2,1)");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("color=\"green\"");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("table = {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("origin=(-2,0.5,0)");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("size=(1,1,2)");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("color=\"blue\"");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Program result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void moveCommands() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.newLine();
      _builder.append("fly(){");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("TAKEOFF()");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("UP(1)");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("DOWN(1)");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("LEFT(1)");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("RIGHT(1)");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("FORWARD(1)");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("BACKWARD(1)");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("ROTATELEFT(90)");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("ROTATERIGHT(90)");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("WAIT(1)");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("LAND()");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      final Program result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void noFly() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("\t\t\t");
      _builder.newLine();
      final Program result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      boolean _not = (!_isEmpty);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_not, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void noTakeoff() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("fly(){");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Program result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      boolean _not = (!_isEmpty);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_not, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void noLand() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("fly(){");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("TAKEOFF()");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      final Program result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      boolean _not = (!_isEmpty);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_not, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void diffrentObjects() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("fly(){");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("TAKEOFF()");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("LAND()");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("environment(){");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("DRONE={");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("WALLS = {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("cupboard = {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("origin=(2.5,0.5,1.5)");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("size=(1,1,1)");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("plant = {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}\t    ");
      _builder.newLine();
      _builder.append("    ");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      final Program result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testGeneratedCode() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("fly(){");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("TAKEOFF()");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("GOTO(\"table\")");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("UP(1)");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("DOWN(1)");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("LEFT(1)");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("RIGHT(1)");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("FORWARD(1)");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("BACKWARD(1)");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("ROTATELEFT(90)");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("ROTATERIGHT(90)");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("WAIT(1)");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("LAND()");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("environment(){");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("DRONE={");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("position=(1,0,1)");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("rotation=45");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("WALLS = {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("front=2");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("back=2");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("left=3");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("right=3");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("up=3");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("cupboard = {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("origin=(2.5,0.5,1.5)");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("size=(1,1,1)");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("color=\"brown\"");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("plant = {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("origin=(2.5,1,-1.5)");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("size=(1,2,1)");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("color=\"green\"");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("table = {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("origin=(-2,0.5,0)");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("size=(1,1,2)");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("color=\"blue\"");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("    ");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("MULTIPLE FILES WERE GENERATED");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("File 1 : /myProject/./src-gen//xdrone/result.py");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("#! /usr/bin/env python");
      _builder_1.newLine();
      _builder_1.append("import sys");
      _builder_1.newLine();
      _builder_1.append("sys.path.append(\'/opt/ros/indigo/lib/python2.7/dist-packages\')");
      _builder_1.newLine();
      _builder_1.append("import rospy");
      _builder_1.newLine();
      _builder_1.append("import math  ");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("from std_msgs.msg import Empty");
      _builder_1.newLine();
      _builder_1.append("from ardrone_autonomy.msg import Navdata\t");
      _builder_1.newLine();
      _builder_1.append("from geometry_msgs.msg import Twist\t");
      _builder_1.newLine();
      _builder_1.append("PI = 3.1415926535897");
      _builder_1.newLine();
      _builder_1.append("#Constants");
      _builder_1.newLine();
      _builder_1.append("ACCEPTED_DISTANCE_ERROR = 20 # 20 cm");
      _builder_1.newLine();
      _builder_1.append("ACCEPTED_ALTITUDE_ERROR = 50 # 5 cm");
      _builder_1.newLine();
      _builder_1.append("ACCEPTED_ROTATION_ERROR = 10 # 10 degrees");
      _builder_1.newLine();
      _builder_1.append("DISTANCE_ONE_AND_HALF_SECOND = 1.25");
      _builder_1.newLine();
      _builder_1.append("DISTANCE_TWO_SECONDS = 2.20");
      _builder_1.newLine();
      _builder_1.append("#DISTANCE_TWO_AND_HALF_SECONDS = 1.65");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("state = -1");
      _builder_1.newLine();
      _builder_1.append("dronePosition = {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("\'x\': 0,");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("\'y\': 0,");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("\'z\': 0");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("currentAngle = 0.0 #Navdata");
      _builder_1.newLine();
      _builder_1.append("currentDroneAngle = 270.0 #Real Life");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("dronePosition.x = 1");
      _builder_1.newLine();
      _builder_1.append("dronePosition.z = 0");
      _builder_1.newLine();
      _builder_1.append("dronePosition.y = 1");
      _builder_1.newLine();
      _builder_1.append("currentDroneAngle += 45");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("objects = {}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("objects[\'cupboard\'] = {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("\'x\': 1.5,");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("\'y\': 2.5,");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("\'z\': 0.5 + 1/2");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("objects[\'plant\'] = {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("\'x\': -1.5,");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("\'y\': 2.5,");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("\'z\': 1 + 2/2");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("objects[\'table\'] = {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("\'x\': 0,");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("\'y\': -2,");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("\'z\': 0.5 + 1/2");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("#RotY:\t\tRotX:");
      _builder_1.newLine();
      _builder_1.append("#+ forward \t+ right");
      _builder_1.newLine();
      _builder_1.append("#- backwards\t- left");
      _builder_1.newLine();
      _builder_1.append("def ReceiveNavdata(data):");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("global state");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("global currentAngle");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("global currentAltitude");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("currentAngle = data.rotZ");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("state = data.state");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("currentAltitude = data.altd");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("def getTimeFromDistance(distance):");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("global DISTANCE_ONE_AND_HALF_SECOND");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("global DISTANCE_TWO_SECONDS");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("global DISTANCE_TWO_AND_HALF_SECONDS");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if distance <= DISTANCE_ONE_AND_HALF_SECOND:");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("return 1.5 * distance /DISTANCE_ONE_AND_HALF_SECOND");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("elif distance <= DISTANCE_TWO_SECONDS:");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("return 1.5 + ((distance- DISTANCE_ONE_AND_HALF_SECOND) * 0.5 / (DISTANCE_TWO_SECONDS-DISTANCE_ONE_AND_HALF_SECOND))");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("#else:");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("#\treturn 2 + ((distance- DISTANCE_TWO_SECONDS) * 0.5 / (DISTANCE_TWO_AND_HALF_SECONDS-DISTANCE_TWO_SECONDS))");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("def getDistanceToObject(objectName):");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("global objects");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("obPosition = {}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if objects[objectName]:");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("obPosition = objects[objectName]");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if \'x\' in obPosition and \'z\' in obPosition:");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("x = abs(dronePosition[\'x\'] - obPosition[\'x\'])");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("y = abs(dronePosition[\'y\'] - obPosition[\'y\'])");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("return {");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("\'x\': math.sqrt( x*x + y*y ),");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("\'z\': getDistance(dronePosition[\'z\'], obPosition[\'z\'])");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("else:");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("return {\'x\': 0, \'z\': 0}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("def getDistance(dronePos, obPos):");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("if dronePos > obPos:");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("return - abs(dronePos - obPos);");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("else:");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("return abs(dronePos - obPos);");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("def getRotationToObject(objectName):");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("global objects");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("obPosition = {}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if objects[objectName]:");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("obPosition = objects[objectName]");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if \'x\' in obPosition and \'z\' in obPosition:");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("angleToObject = math.atan2(dronePosition[\'x\'] - obPosition[\'x\'], dronePosition[\'y\'] - obPosition[\'y\']) * 180 / math.pi");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("angleToObject = angleTo360(angleToObject)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("isPositive = True;");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("if currentDroneAngle > angleToObject:");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("isPositive = False");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("angleToObject = abs(currentDroneAngle - angleToObject)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("if angleToObject > 180:");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("angleToObject = 360 - angleToObject;");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("isPositive = not isPositive;");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("return angleToObject if isPositive else -angleToObject");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("else:");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("return 0");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("def angleTo360(angle):");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("while angle < 0:");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("angle = 360 + angle");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("return angle");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("def checkAngle(angle):");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("angle = angle%360");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("while angle < 0:");
      _builder_1.newLine();
      _builder_1.append("    ");
      _builder_1.append("angle = 360 + angle;");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.append("return angle");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("def oppositeSigns(x, y): ");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("return (x < 0) if (y >= 0) else (y < 0)");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("def rotate(speed, angle):");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("global currentAngle");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("global ACCEPTED_ROTATION_ERROR");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("lastAngle = currentAngle");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("angleDone = 0.0");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("vel_msg = Twist()");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("angular_speed = speed*PI/360");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("clockwise = False");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if angle < 0:");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("clockwise = True");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("vel_msg.linear.x=0");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("vel_msg.linear.y=0");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("vel_msg.linear.z=0");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("vel_msg.angular.x = 0");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("vel_msg.angular.y = 0");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if clockwise:");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("vel_msg.angular.z = -angular_speed");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("else:");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("vel_msg.angular.z = angular_speed*2 #For some reason rotates slower to left");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("while velocity_publisher.get_num_connections() < 1:");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("rospy.sleep(0.1)");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("while(angleDone < abs(angle)-ACCEPTED_ROTATION_ERROR):");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("if oppositeSigns(lastAngle, currentAngle) and abs(currentAngle > 90):");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("angleDone += abs(abs(currentAngle)-180 + (abs(lastAngle)-180))");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("else:");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("angleDone += abs(currentAngle - lastAngle)");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("lastAngle = currentAngle\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("velocity_publisher.publish(vel_msg)");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("vel_msg.angular.z = 0");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("velocity_publisher.publish(vel_msg)");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("def moveBaseOnTime(distance, x ,y):");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("global velocity_publisher");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("while velocity_publisher.get_num_connections() < 1:");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("rospy.sleep(0.1)");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("vel_msg = Twist()");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("vel_msg.linear.x= x if distance > 0 else -x");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("vel_msg.linear.y= y if distance > 0 else -y  #y+ is left");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("vel_msg.linear.z=0");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("vel_msg.angular.x = 0");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("vel_msg.angular.y = 0");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("vel_msg.angular.z = 0");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("tStart = rospy.Time.now().to_sec()");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("tEnd = tStart;");
      _builder_1.newLine();
      _builder_1.append("  \t");
      _builder_1.append("timeRequired = getTimeFromDistance(abs(distance))");
      _builder_1.newLine();
      _builder_1.append("  ");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("while(tEnd-tStart) < timeRequired:");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("velocity_publisher.publish(vel_msg)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("tEnd = rospy.Time.now().to_sec()\t");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("vel_msg.linear.x=0");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("vel_msg.linear.y=0");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("velocity_publisher.publish(vel_msg)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("def moveUpAndDown(distance):");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("global zLocation");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("global velocity_publisher");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("vel_msg = Twist()");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("vel_msg.linear.x=0");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("vel_msg.linear.y=0");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("vel_msg.angular.x = 0");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("vel_msg.angular.y = 0");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("vel_msg.angular.z = 0");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("goalDistance = currentAltitude + (distance*1000)");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("while abs(abs(currentAltitude) - abs(goalDistance)) > ACCEPTED_ALTITUDE_ERROR:");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("if(goalDistance > currentAltitude):");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("vel_msg.linear.z=0.15");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("else:");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("vel_msg.linear.z=-0.15");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("print(currentAltitude, goalDistance)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("velocity_publisher.publish(vel_msg)");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("vel_msg.linear.z=0");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("velocity_publisher.publish(vel_msg)");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("def noMove(timeRequired):");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("global velocity_publisher");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("while velocity_publisher.get_num_connections() < 1:");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("rospy.sleep(0.1)");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("vel_msg = Twist()");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("vel_msg.linear.x=0");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("vel_msg.linear.y=0");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("vel_msg.linear.z=0");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("vel_msg.angular.x = 0");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("vel_msg.angular.y = 0");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("vel_msg.angular.z = 0");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("tStart = rospy.Time.now().to_sec()");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("tEnd = tStart;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("while(tEnd-tStart) < timeRequired:");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("velocity_publisher.publish(vel_msg)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("tEnd = rospy.Time.now().to_sec()");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("#Main");
      _builder_1.newLine();
      _builder_1.append("rospy.init_node(\'test_node\')");
      _builder_1.newLine();
      _builder_1.append("empty = Empty()");
      _builder_1.newLine();
      _builder_1.append("rospy.Subscriber(\'/ardrone/navdata\', Navdata, ReceiveNavdata)");
      _builder_1.newLine();
      _builder_1.append("velocity_publisher = rospy.Publisher(\'/cmd_vel\', Twist, queue_size=1)");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("while state == -1:");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("rospy.sleep(0.1)");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("if state == 0:");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("reset = rospy.Publisher(\'/ardrone/reset\', Empty, queue_size=1)");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("while reset.get_num_connections() < 1:");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("rospy.sleep(0.1)");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("reset.publish(empty)");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("while state == 0:");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("rospy.sleep(0.1)");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("takeoff = rospy.Publisher(\'/ardrone/takeoff\', Empty, queue_size=1)");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("while takeoff.get_num_connections() < 1:");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("rospy.sleep(0.1)");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("dronePosition[\'z\'] += 0.7");
      _builder_1.newLine();
      _builder_1.append("takeoff.publish(empty)");
      _builder_1.newLine();
      _builder_1.append("noMove(5)");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("vector = getDistanceToObject(\"table\");");
      _builder_1.newLine();
      _builder_1.append("angle = getRotationToObject(\"table\");");
      _builder_1.newLine();
      _builder_1.append("currentDroneAngle += angle");
      _builder_1.newLine();
      _builder_1.append("rotate(30, angle);");
      _builder_1.newLine();
      _builder_1.append("dronePosition[\'z\'] += vector[\'z\']");
      _builder_1.newLine();
      _builder_1.append("moveUpAndDown(vector[\'z\'])");
      _builder_1.newLine();
      _builder_1.append("dronePosition[\'x\'] += vector[\'x\']");
      _builder_1.newLine();
      _builder_1.append("moveBaseOnTime(vector[\'x\'], 0.15, 0)");
      _builder_1.newLine();
      _builder_1.append("noMove(1.5)");
      _builder_1.newLine();
      _builder_1.append("dronePosition[\'z\'] += 1");
      _builder_1.newLine();
      _builder_1.append("moveUpAndDown(1)");
      _builder_1.newLine();
      _builder_1.append("dronePosition[\'z\'] += -1");
      _builder_1.newLine();
      _builder_1.append("moveUpAndDown(-1)");
      _builder_1.newLine();
      _builder_1.append("dronePosition[\'y\']  += 1");
      _builder_1.newLine();
      _builder_1.append("moveBaseOnTime(1, 0, 0.15)");
      _builder_1.newLine();
      _builder_1.append("noMove(1.5)");
      _builder_1.newLine();
      _builder_1.append("dronePosition[\'y\']  += -1");
      _builder_1.newLine();
      _builder_1.append("moveBaseOnTime(-1, 0, 0.15)");
      _builder_1.newLine();
      _builder_1.append("noMove(1.5)");
      _builder_1.newLine();
      _builder_1.append("dronePosition[\'x\'] += 1");
      _builder_1.newLine();
      _builder_1.append("moveBaseOnTime(1, 0.15, 0)");
      _builder_1.newLine();
      _builder_1.append("noMove(1.5)");
      _builder_1.newLine();
      _builder_1.append("dronePosition[\'x\'] += -1");
      _builder_1.newLine();
      _builder_1.append("moveBaseOnTime(-1, 0.15, 0)");
      _builder_1.newLine();
      _builder_1.append("noMove(1.5)");
      _builder_1.newLine();
      _builder_1.append("currentDroneAngle += -90");
      _builder_1.newLine();
      _builder_1.append("rotate(90, -90);");
      _builder_1.newLine();
      _builder_1.append("currentDroneAngle += 90");
      _builder_1.newLine();
      _builder_1.append("rotate(90, 90);");
      _builder_1.newLine();
      _builder_1.append("moveBaseOnTime(1, 0, 0)");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("land = rospy.Publisher(\'/ardrone/land\', Empty, queue_size=1)");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.newLine();
      _builder_1.append("while land.get_num_connections() < 1:");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("rospy.sleep(0.1)");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("land.publish(empty)");
      _builder_1.newLine();
      _builder_1.append("rospy.sleep(3)");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("File 2 : /myProject/./src-gen/Webroot/environment.js");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("function environment()");
      _builder_1.newLine();
      _builder_1.append("{");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("//resets drone location");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("drone.position.x = 0;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("drone.position.z = 0;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("drone.position.y = 0 + modelHeight;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("drone.position.x = 1");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("drone.position.z = 1");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("drone.position.y = 0 + modelHeight");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("currentDroneAngle += 45;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("drone.rotateY(45  * (Math.PI/180));");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("drawWalls(2, 3, 2, 3,  3)");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("addCube(\"cupboard\",1, 1, 1, ");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("2.5, 0.5, 1.5,");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("\"brown\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append(")");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("addCube(\"plant\",1, 2, 1, ");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("2.5, 1, -1.5,");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("\"green\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append(")");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("addCube(\"table\",1, 1, 2, ");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("-2, 0.5, 0,");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("\"blue\"");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append(")");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("File 3 : /myProject/./src-gen/Webroot/simulator.js");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("var ANGLE_MARIGIN = 0.4;");
      _builder_1.newLine();
      _builder_1.append("var MOVE_MARIGIN = 1.25;");
      _builder_1.newLine();
      _builder_1.append("var MOVE_MARIGIN_ADD = 0.6;");
      _builder_1.newLine();
      _builder_1.append("var MOVE_MARIGIN_NEXT = 0.95;");
      _builder_1.newLine();
      _builder_1.append("var MOVE_MARIGIN_NEXT_ADD = 0.1;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("var commands = [];");
      _builder_1.newLine();
      _builder_1.append("var currentDroneLocation = {x: drone.position.x, y: drone.position.y, z: drone.position.z};");
      _builder_1.newLine();
      _builder_1.append("//var goalDroneLocation = currentDroneLocation;");
      _builder_1.newLine();
      _builder_1.append("var goalDroneRotation = drone.rotation.y;");
      _builder_1.newLine();
      _builder_1.append("var currentFunction = \"\";");
      _builder_1.newLine();
      _builder_1.append("var finishSimulation = false;");
      _builder_1.newLine();
      _builder_1.append("var destination = 0;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("//Drone\'s path");
      _builder_1.newLine();
      _builder_1.append("var lineMaterial = new THREE.LineBasicMaterial({color: 0x1ACF10});");
      _builder_1.newLine();
      _builder_1.append("var lineGeometry = new THREE.Geometry();");
      _builder_1.newLine();
      _builder_1.append("lineGeometry.vertices.push(");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("new THREE.Vector3( drone.position.x, drone.position.y, drone.position.z)");
      _builder_1.newLine();
      _builder_1.append(");");
      _builder_1.newLine();
      _builder_1.append("commands.push(\"TAKEOFF\");");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("commands.push({flyTo: \"table\"});");
      _builder_1.newLine();
      _builder_1.append("commands.push({y: 1}); ");
      _builder_1.newLine();
      _builder_1.append("commands.push({y: -1}); ");
      _builder_1.newLine();
      _builder_1.append("commands.push({x: 1});");
      _builder_1.newLine();
      _builder_1.append("commands.push({x: -1});");
      _builder_1.newLine();
      _builder_1.append("commands.push({z: 1});");
      _builder_1.newLine();
      _builder_1.append("commands.push({z: -1});");
      _builder_1.newLine();
      _builder_1.append("commands.push({r: 90}); ");
      _builder_1.newLine();
      _builder_1.append("commands.push({r: -90}); ");
      _builder_1.newLine();
      _builder_1.append("commands.push({w: 1});");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("commands.push(\"LAND\");");
      _builder_1.newLine();
      _builder_1.append("nextCommand();");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("if(line)");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("scene.remove( line );");
      _builder_1.newLine();
      _builder_1.append("line = new THREE.Line( lineGeometry, lineMaterial );");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("scene.add( line );");
      _builder_1.newLine();
      _builder_1.append("function flySimulation(){");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if(!finishSimulation){");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("if((currentFunction == \"MOVE_Y\" && fly(destination, \'y\'))");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("|| (currentFunction == \"MOVE_X\" && fly(destination, \'x\'))");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("|| (currentFunction == \"MOVE_Z\" && fly(destination, \'z\'))");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("|| (currentFunction == \"LAND\" && land())");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("|| (currentFunction == \"ROTATION\" && rotation(goalDroneRotation))){");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("nextCommand();");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("function nextCommand(){");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if(commands && commands[0]){");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("if(commands[0].r !== undefined){");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("changeDroneCollisionBox(getDistanceErrorFromAngle(commands[0].r),0,getDistanceErrorFromAngle(commands[0].r))");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("goalDroneRotation = commands[0].r * (Math.PI/180);");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("currentFunction = \"ROTATION\";");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("else if(commands[0].w !== undefined){");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("execute = false;");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("setTimeout(function () {");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("execute = true;");
      _builder_1.newLine();
      _builder_1.append("\t\t\t    ");
      _builder_1.append("}, (commands[0].w * 1000));");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("else if(commands[0].y !== undefined){");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("destination = commands[0].y;");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("currentFunction = \"MOVE_Y\";");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("lineGeometry.vertices.push(new THREE.Vector3( drone.position.x, drone.position.y, drone.position.z))");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("else if(commands[0].x !== undefined){");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("changeDroneCollisionBox(getDistanceErrorFromDistance(Math.abs(commands[0].x)),0,0)");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("destination = commands[0].x;");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("currentFunction = \"MOVE_X\";");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("lineGeometry.vertices.push(new THREE.Vector3( drone.position.x, drone.position.y, drone.position.z))");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("else if(commands[0].z !== undefined){");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("changeDroneCollisionBox(0, 0, getDistanceErrorFromDistance(Math.abs(commands[0].z)))");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("destination = commands[0].z;");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("currentFunction = \"MOVE_Z\";");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("lineGeometry.vertices.push(new THREE.Vector3( drone.position.x, drone.position.y, drone.position.z))");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("else if(commands[0] == \"TAKEOFF\"){");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("//changeDroneCollisionBox(0.25,0,0.25)");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("destination = 0.7;");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("currentFunction = \"MOVE_Y\";");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("lineGeometry.vertices.push(new THREE.Vector3( drone.position.x, drone.position.y, drone.position.z))");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("else if(commands[0] == \"LAND\"){");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("//changeDroneCollisionBox(0.25,0,0.25)");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("currentFunction = \"LAND\";");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("lineGeometry.vertices.push(new THREE.Vector3( drone.position.x, drone.position.y, drone.position.z))");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("else if(commands[0].flyTo !== undefined){");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("var vector = getDistanceToObject(commands[0].flyTo);");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("var angle = getRotationToObject(commands[0].flyTo);");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t\t\t\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("var commandSet = \"\";");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("if(angle > 0)");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("commandSet += \"ROTATELEFT(\" + Math.round( Math.abs(angle) * 10) / 10 + \")\\n\";");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("else if(angle < 0)");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("commandSet += \"ROTATERIGHT(\" + Math.round( Math.abs(angle) * 10) / 10 + \")\\n\";");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("if(vector.y > 0)");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("commandSet += \"UP(\" + Math.round( Math.abs(vector.y) * 10) / 10 + \")\\n\";");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("else if(vector.y < 0)");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("commandSet += \"DOWN(\" + Math.round( Math.abs(vector.y) * 10) / 10 + \")\\n\";");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("if(vector.z > 0)");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("commandSet += \"FORWARD(\" + Math.round( vector.z * 10) / 10 + \")\\n\";");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t\t\t\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("listGoTo.push({object_name: commands[0].flyTo, ");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("commands: commandSet});");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("console.log(listGoTo)");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("lastFirstNumber = \"-1\"; //Force refresh");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("commands.shift();");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("changeDroneCollisionBox(getDistanceErrorFromAngle(angle),0,getDistanceErrorFromAngle(angle))");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("goalDroneRotation = angle * (Math.PI/180);");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("currentFunction = \"ROTATION\";");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("commands.unshift({z: vector.z}); ");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("commands.unshift({y: vector.y}); ");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("commands.unshift({r: angle});");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("commands.shift();");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("else{");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("finishSimulation = true;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("function getDistanceErrorFromAngle(angle){");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("return 1.2 * Math.abs(angle) /90");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("var MOVE_MARIGIN = 1.25;");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("var MOVE_MARIGIN_ADD = 0.6;");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("var MOVE_MARIGIN_NEXT = 0.95;");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("var MOVE_MARIGIN_NEXT_ADD = 0.1;");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("function getDistanceErrorFromDistance(distance){");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if(distance < MOVE_MARIGIN)");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("return MOVE_MARIGIN_ADD;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("else");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("return MOVE_MARIGIN_ADD + (((distance-MOVE_MARIGIN) * MOVE_MARIGIN_NEXT_ADD) / MOVE_MARIGIN_NEXT)");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      this._compilationTestHelper.assertCompilesTo(_builder, _builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
