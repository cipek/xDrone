/*
 * generated by Xtext 2.17.0
 */
grammar InternalXDrone;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package ic.ac.uk.xdrone.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package ic.ac.uk.xdrone.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import ic.ac.uk.xdrone.services.XDroneGrammarAccess;

}
@parser::members {
	private XDroneGrammarAccess grammarAccess;

	public void setGrammarAccess(XDroneGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getMainAssignment()); }
		(rule__Program__MainAssignment)
		{ after(grammarAccess.getProgramAccess().getMainAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMain
entryRuleMain
:
{ before(grammarAccess.getMainRule()); }
	 ruleMain
{ after(grammarAccess.getMainRule()); } 
	 EOF 
;

// Rule Main
ruleMain 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMainAccess().getGroup()); }
		(rule__Main__Group__0)
		{ after(grammarAccess.getMainAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFly
entryRuleFly
:
{ before(grammarAccess.getFlyRule()); }
	 ruleFly
{ after(grammarAccess.getFlyRule()); } 
	 EOF 
;

// Rule Fly
ruleFly 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFlyAccess().getGroup()); }
		(rule__Fly__Group__0)
		{ after(grammarAccess.getFlyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnvironment
entryRuleEnvironment
:
{ before(grammarAccess.getEnvironmentRule()); }
	 ruleEnvironment
{ after(grammarAccess.getEnvironmentRule()); } 
	 EOF 
;

// Rule Environment
ruleEnvironment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnvironmentAccess().getGroup()); }
		(rule__Environment__Group__0)
		{ after(grammarAccess.getEnvironmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTakeoff
entryRuleTakeoff
:
{ before(grammarAccess.getTakeoffRule()); }
	 ruleTakeoff
{ after(grammarAccess.getTakeoffRule()); } 
	 EOF 
;

// Rule Takeoff
ruleTakeoff 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTakeoffAccess().getGroup()); }
		(rule__Takeoff__Group__0)
		{ after(grammarAccess.getTakeoffAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLand
entryRuleLand
:
{ before(grammarAccess.getLandRule()); }
	 ruleLand
{ after(grammarAccess.getLandRule()); } 
	 EOF 
;

// Rule Land
ruleLand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLandAccess().getGroup()); }
		(rule__Land__Group__0)
		{ after(grammarAccess.getLandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSuperCommand
entryRuleSuperCommand
:
{ before(grammarAccess.getSuperCommandRule()); }
	 ruleSuperCommand
{ after(grammarAccess.getSuperCommandRule()); } 
	 EOF 
;

// Rule SuperCommand
ruleSuperCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSuperCommandAccess().getCommandParserRuleCall()); }
		ruleCommand
		{ after(grammarAccess.getSuperCommandAccess().getCommandParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommand
entryRuleCommand
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandAccess().getAlternatives()); }
		(rule__Command__Alternatives)
		{ after(grammarAccess.getCommandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDOUBLE
entryRuleDOUBLE
:
{ before(grammarAccess.getDOUBLERule()); }
	 ruleDOUBLE
{ after(grammarAccess.getDOUBLERule()); } 
	 EOF 
;

// Rule DOUBLE
ruleDOUBLE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDOUBLEAccess().getAlternatives()); }
		(rule__DOUBLE__Alternatives)
		{ after(grammarAccess.getDOUBLEAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePOSITIVE_DOUBLE
entryRulePOSITIVE_DOUBLE
:
{ before(grammarAccess.getPOSITIVE_DOUBLERule()); }
	 rulePOSITIVE_DOUBLE
{ after(grammarAccess.getPOSITIVE_DOUBLERule()); } 
	 EOF 
;

// Rule POSITIVE_DOUBLE
rulePOSITIVE_DOUBLE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPOSITIVE_DOUBLEAccess().getAlternatives()); }
		(rule__POSITIVE_DOUBLE__Alternatives)
		{ after(grammarAccess.getPOSITIVE_DOUBLEAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGoTo
entryRuleGoTo
:
{ before(grammarAccess.getGoToRule()); }
	 ruleGoTo
{ after(grammarAccess.getGoToRule()); } 
	 EOF 
;

// Rule GoTo
ruleGoTo 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGoToAccess().getGroup()); }
		(rule__GoTo__Group__0)
		{ after(grammarAccess.getGoToAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUp
entryRuleUp
:
{ before(grammarAccess.getUpRule()); }
	 ruleUp
{ after(grammarAccess.getUpRule()); } 
	 EOF 
;

// Rule Up
ruleUp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUpAccess().getGroup()); }
		(rule__Up__Group__0)
		{ after(grammarAccess.getUpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDown
entryRuleDown
:
{ before(grammarAccess.getDownRule()); }
	 ruleDown
{ after(grammarAccess.getDownRule()); } 
	 EOF 
;

// Rule Down
ruleDown 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDownAccess().getGroup()); }
		(rule__Down__Group__0)
		{ after(grammarAccess.getDownAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLeft
entryRuleLeft
:
{ before(grammarAccess.getLeftRule()); }
	 ruleLeft
{ after(grammarAccess.getLeftRule()); } 
	 EOF 
;

// Rule Left
ruleLeft 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeftAccess().getGroup()); }
		(rule__Left__Group__0)
		{ after(grammarAccess.getLeftAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRight
entryRuleRight
:
{ before(grammarAccess.getRightRule()); }
	 ruleRight
{ after(grammarAccess.getRightRule()); } 
	 EOF 
;

// Rule Right
ruleRight 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRightAccess().getGroup()); }
		(rule__Right__Group__0)
		{ after(grammarAccess.getRightAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForward
entryRuleForward
:
{ before(grammarAccess.getForwardRule()); }
	 ruleForward
{ after(grammarAccess.getForwardRule()); } 
	 EOF 
;

// Rule Forward
ruleForward 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForwardAccess().getGroup()); }
		(rule__Forward__Group__0)
		{ after(grammarAccess.getForwardAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBackward
entryRuleBackward
:
{ before(grammarAccess.getBackwardRule()); }
	 ruleBackward
{ after(grammarAccess.getBackwardRule()); } 
	 EOF 
;

// Rule Backward
ruleBackward 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBackwardAccess().getGroup()); }
		(rule__Backward__Group__0)
		{ after(grammarAccess.getBackwardAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRotateL
entryRuleRotateL
:
{ before(grammarAccess.getRotateLRule()); }
	 ruleRotateL
{ after(grammarAccess.getRotateLRule()); } 
	 EOF 
;

// Rule RotateL
ruleRotateL 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRotateLAccess().getGroup()); }
		(rule__RotateL__Group__0)
		{ after(grammarAccess.getRotateLAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRotateR
entryRuleRotateR
:
{ before(grammarAccess.getRotateRRule()); }
	 ruleRotateR
{ after(grammarAccess.getRotateRRule()); } 
	 EOF 
;

// Rule RotateR
ruleRotateR 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRotateRAccess().getGroup()); }
		(rule__RotateR__Group__0)
		{ after(grammarAccess.getRotateRAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWait
entryRuleWait
:
{ before(grammarAccess.getWaitRule()); }
	 ruleWait
{ after(grammarAccess.getWaitRule()); } 
	 EOF 
;

// Rule Wait
ruleWait 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWaitAccess().getGroup()); }
		(rule__Wait__Group__0)
		{ after(grammarAccess.getWaitAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDrone
entryRuleDrone
:
{ before(grammarAccess.getDroneRule()); }
	 ruleDrone
{ after(grammarAccess.getDroneRule()); } 
	 EOF 
;

// Rule Drone
ruleDrone 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDroneAccess().getGroup()); }
		(rule__Drone__Group__0)
		{ after(grammarAccess.getDroneAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObject
entryRuleObject
:
{ before(grammarAccess.getObjectRule()); }
	 ruleObject
{ after(grammarAccess.getObjectRule()); } 
	 EOF 
;

// Rule Object
ruleObject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObjectAccess().getGroup()); }
		(rule__Object__Group__0)
		{ after(grammarAccess.getObjectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrigin
entryRuleOrigin
:
{ before(grammarAccess.getOriginRule()); }
	 ruleOrigin
{ after(grammarAccess.getOriginRule()); } 
	 EOF 
;

// Rule Origin
ruleOrigin 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOriginAccess().getGroup()); }
		(rule__Origin__Group__0)
		{ after(grammarAccess.getOriginAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSize
entryRuleSize
:
{ before(grammarAccess.getSizeRule()); }
	 ruleSize
{ after(grammarAccess.getSizeRule()); } 
	 EOF 
;

// Rule Size
ruleSize 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSizeAccess().getGroup()); }
		(rule__Size__Group__0)
		{ after(grammarAccess.getSizeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePosition
entryRulePosition
:
{ before(grammarAccess.getPositionRule()); }
	 rulePosition
{ after(grammarAccess.getPositionRule()); } 
	 EOF 
;

// Rule Position
rulePosition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPositionAccess().getGroup()); }
		(rule__Position__Group__0)
		{ after(grammarAccess.getPositionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVector
entryRuleVector
:
{ before(grammarAccess.getVectorRule()); }
	 ruleVector
{ after(grammarAccess.getVectorRule()); } 
	 EOF 
;

// Rule Vector
ruleVector 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVectorAccess().getGroup()); }
		(rule__Vector__Group__0)
		{ after(grammarAccess.getVectorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColor
entryRuleColor
:
{ before(grammarAccess.getColorRule()); }
	 ruleColor
{ after(grammarAccess.getColorRule()); } 
	 EOF 
;

// Rule Color
ruleColor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColorAccess().getGroup()); }
		(rule__Color__Group__0)
		{ after(grammarAccess.getColorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWalls
entryRuleWalls
:
{ before(grammarAccess.getWallsRule()); }
	 ruleWalls
{ after(grammarAccess.getWallsRule()); } 
	 EOF 
;

// Rule Walls
ruleWalls 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWallsAccess().getGroup()); }
		(rule__Walls__Group__0)
		{ after(grammarAccess.getWallsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFrontWall
entryRuleFrontWall
:
{ before(grammarAccess.getFrontWallRule()); }
	 ruleFrontWall
{ after(grammarAccess.getFrontWallRule()); } 
	 EOF 
;

// Rule FrontWall
ruleFrontWall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFrontWallAccess().getGroup()); }
		(rule__FrontWall__Group__0)
		{ after(grammarAccess.getFrontWallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRightWall
entryRuleRightWall
:
{ before(grammarAccess.getRightWallRule()); }
	 ruleRightWall
{ after(grammarAccess.getRightWallRule()); } 
	 EOF 
;

// Rule RightWall
ruleRightWall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRightWallAccess().getGroup()); }
		(rule__RightWall__Group__0)
		{ after(grammarAccess.getRightWallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLeftWall
entryRuleLeftWall
:
{ before(grammarAccess.getLeftWallRule()); }
	 ruleLeftWall
{ after(grammarAccess.getLeftWallRule()); } 
	 EOF 
;

// Rule LeftWall
ruleLeftWall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeftWallAccess().getGroup()); }
		(rule__LeftWall__Group__0)
		{ after(grammarAccess.getLeftWallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBackWall
entryRuleBackWall
:
{ before(grammarAccess.getBackWallRule()); }
	 ruleBackWall
{ after(grammarAccess.getBackWallRule()); } 
	 EOF 
;

// Rule BackWall
ruleBackWall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBackWallAccess().getGroup()); }
		(rule__BackWall__Group__0)
		{ after(grammarAccess.getBackWallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUpWall
entryRuleUpWall
:
{ before(grammarAccess.getUpWallRule()); }
	 ruleUpWall
{ after(grammarAccess.getUpWallRule()); } 
	 EOF 
;

// Rule UpWall
ruleUpWall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUpWallAccess().getGroup()); }
		(rule__UpWall__Group__0)
		{ after(grammarAccess.getUpWallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Alternatives_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnvironmentAccess().getDroneAssignment_5_0()); }
		(rule__Environment__DroneAssignment_5_0)
		{ after(grammarAccess.getEnvironmentAccess().getDroneAssignment_5_0()); }
	)
	|
	(
		{ before(grammarAccess.getEnvironmentAccess().getWallsAssignment_5_1()); }
		(rule__Environment__WallsAssignment_5_1)
		{ after(grammarAccess.getEnvironmentAccess().getWallsAssignment_5_1()); }
	)
	|
	(
		{ before(grammarAccess.getEnvironmentAccess().getObjectsAssignment_5_2()); }
		(rule__Environment__ObjectsAssignment_5_2)
		{ after(grammarAccess.getEnvironmentAccess().getObjectsAssignment_5_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getUpParserRuleCall_0()); }
		ruleUp
		{ after(grammarAccess.getCommandAccess().getUpParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getDownParserRuleCall_1()); }
		ruleDown
		{ after(grammarAccess.getCommandAccess().getDownParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getLeftParserRuleCall_2()); }
		ruleLeft
		{ after(grammarAccess.getCommandAccess().getLeftParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getRightParserRuleCall_3()); }
		ruleRight
		{ after(grammarAccess.getCommandAccess().getRightParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getForwardParserRuleCall_4()); }
		ruleForward
		{ after(grammarAccess.getCommandAccess().getForwardParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getBackwardParserRuleCall_5()); }
		ruleBackward
		{ after(grammarAccess.getCommandAccess().getBackwardParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getRotateLParserRuleCall_6()); }
		ruleRotateL
		{ after(grammarAccess.getCommandAccess().getRotateLParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getRotateRParserRuleCall_7()); }
		ruleRotateR
		{ after(grammarAccess.getCommandAccess().getRotateRParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getWaitParserRuleCall_8()); }
		ruleWait
		{ after(grammarAccess.getCommandAccess().getWaitParserRuleCall_8()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getGoToParserRuleCall_9()); }
		ruleGoTo
		{ after(grammarAccess.getCommandAccess().getGoToParserRuleCall_9()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DOUBLE__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDOUBLEAccess().getGroup_0()); }
		(rule__DOUBLE__Group_0__0)
		{ after(grammarAccess.getDOUBLEAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getDOUBLEAccess().getPOSITIVE_DOUBLEParserRuleCall_1()); }
		rulePOSITIVE_DOUBLE
		{ after(grammarAccess.getDOUBLEAccess().getPOSITIVE_DOUBLEParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__POSITIVE_DOUBLE__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPOSITIVE_DOUBLEAccess().getGroup_0()); }
		(rule__POSITIVE_DOUBLE__Group_0__0)
		{ after(grammarAccess.getPOSITIVE_DOUBLEAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPOSITIVE_DOUBLEAccess().getINTTerminalRuleCall_1()); }
		RULE_INT
		{ after(grammarAccess.getPOSITIVE_DOUBLEAccess().getINTTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Drone__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDroneAccess().getPositionAssignment_2_0()); }
		(rule__Drone__PositionAssignment_2_0)
		{ after(grammarAccess.getDroneAccess().getPositionAssignment_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getDroneAccess().getGroup_2_1()); }
		(rule__Drone__Group_2_1__0)
		{ after(grammarAccess.getDroneAccess().getGroup_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getOriginAssignment_3_0()); }
		(rule__Object__OriginAssignment_3_0)
		{ after(grammarAccess.getObjectAccess().getOriginAssignment_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getObjectAccess().getSizeAssignment_3_1()); }
		(rule__Object__SizeAssignment_3_1)
		{ after(grammarAccess.getObjectAccess().getSizeAssignment_3_1()); }
	)
	|
	(
		{ before(grammarAccess.getObjectAccess().getColorAssignment_3_2()); }
		(rule__Object__ColorAssignment_3_2)
		{ after(grammarAccess.getObjectAccess().getColorAssignment_3_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Walls__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWallsAccess().getFrontAssignment_2_0()); }
		(rule__Walls__FrontAssignment_2_0)
		{ after(grammarAccess.getWallsAccess().getFrontAssignment_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getWallsAccess().getRightAssignment_2_1()); }
		(rule__Walls__RightAssignment_2_1)
		{ after(grammarAccess.getWallsAccess().getRightAssignment_2_1()); }
	)
	|
	(
		{ before(grammarAccess.getWallsAccess().getBackAssignment_2_2()); }
		(rule__Walls__BackAssignment_2_2)
		{ after(grammarAccess.getWallsAccess().getBackAssignment_2_2()); }
	)
	|
	(
		{ before(grammarAccess.getWallsAccess().getLeftAssignment_2_3()); }
		(rule__Walls__LeftAssignment_2_3)
		{ after(grammarAccess.getWallsAccess().getLeftAssignment_2_3()); }
	)
	|
	(
		{ before(grammarAccess.getWallsAccess().getUpAssignment_2_4()); }
		(rule__Walls__UpAssignment_2_4)
		{ after(grammarAccess.getWallsAccess().getUpAssignment_2_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Main__Group__0__Impl
	rule__Main__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainAccess().getFlyAssignment_0()); }
	(rule__Main__FlyAssignment_0)
	{ after(grammarAccess.getMainAccess().getFlyAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Main__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainAccess().getEnvironmentAssignment_1()); }
	(rule__Main__EnvironmentAssignment_1)?
	{ after(grammarAccess.getMainAccess().getEnvironmentAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Fly__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fly__Group__0__Impl
	rule__Fly__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlyAccess().getFlyKeyword_0()); }
	'fly'
	{ after(grammarAccess.getFlyAccess().getFlyKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fly__Group__1__Impl
	rule__Fly__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlyAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getFlyAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fly__Group__2__Impl
	rule__Fly__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlyAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getFlyAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fly__Group__3__Impl
	rule__Fly__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlyAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getFlyAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fly__Group__4__Impl
	rule__Fly__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlyAccess().getGroup_4()); }
	(rule__Fly__Group_4__0)
	{ after(grammarAccess.getFlyAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fly__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlyAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getFlyAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Fly__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fly__Group_4__0__Impl
	rule__Fly__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlyAccess().getTakeoffAssignment_4_0()); }
	(rule__Fly__TakeoffAssignment_4_0)
	{ after(grammarAccess.getFlyAccess().getTakeoffAssignment_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fly__Group_4__1__Impl
	rule__Fly__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlyAccess().getCommandsAssignment_4_1()); }
	(rule__Fly__CommandsAssignment_4_1)*
	{ after(grammarAccess.getFlyAccess().getCommandsAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fly__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlyAccess().getLandAssignment_4_2()); }
	(rule__Fly__LandAssignment_4_2)
	{ after(grammarAccess.getFlyAccess().getLandAssignment_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Environment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group__0__Impl
	rule__Environment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getEnvironmentAction_0()); }
	()
	{ after(grammarAccess.getEnvironmentAccess().getEnvironmentAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group__1__Impl
	rule__Environment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getEnvironmentKeyword_1()); }
	'environment'
	{ after(grammarAccess.getEnvironmentAccess().getEnvironmentKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group__2__Impl
	rule__Environment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getEnvironmentAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group__3__Impl
	rule__Environment__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getEnvironmentAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group__4__Impl
	rule__Environment__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getEnvironmentAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group__5__Impl
	rule__Environment__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getAlternatives_5()); }
	(rule__Environment__Alternatives_5)*
	{ after(grammarAccess.getEnvironmentAccess().getAlternatives_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getEnvironmentAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Takeoff__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Takeoff__Group__0__Impl
	rule__Takeoff__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Takeoff__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTakeoffAccess().getTAKEOFFKeyword_0()); }
	'TAKEOFF'
	{ after(grammarAccess.getTakeoffAccess().getTAKEOFFKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Takeoff__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Takeoff__Group__1__Impl
	rule__Takeoff__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Takeoff__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTakeoffAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getTakeoffAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Takeoff__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Takeoff__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Takeoff__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTakeoffAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getTakeoffAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Land__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Land__Group__0__Impl
	rule__Land__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Land__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLandAccess().getLANDKeyword_0()); }
	'LAND'
	{ after(grammarAccess.getLandAccess().getLANDKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Land__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Land__Group__1__Impl
	rule__Land__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Land__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLandAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getLandAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Land__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Land__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Land__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLandAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getLandAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DOUBLE__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DOUBLE__Group_0__0__Impl
	rule__DOUBLE__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DOUBLE__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDOUBLEAccess().getHyphenMinusKeyword_0_0()); }
	'-'
	{ after(grammarAccess.getDOUBLEAccess().getHyphenMinusKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DOUBLE__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DOUBLE__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DOUBLE__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDOUBLEAccess().getPOSITIVE_DOUBLEParserRuleCall_0_1()); }
	rulePOSITIVE_DOUBLE
	{ after(grammarAccess.getDOUBLEAccess().getPOSITIVE_DOUBLEParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__POSITIVE_DOUBLE__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__POSITIVE_DOUBLE__Group_0__0__Impl
	rule__POSITIVE_DOUBLE__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__POSITIVE_DOUBLE__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPOSITIVE_DOUBLEAccess().getINTTerminalRuleCall_0_0()); }
	RULE_INT
	{ after(grammarAccess.getPOSITIVE_DOUBLEAccess().getINTTerminalRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__POSITIVE_DOUBLE__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__POSITIVE_DOUBLE__Group_0__1__Impl
	rule__POSITIVE_DOUBLE__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__POSITIVE_DOUBLE__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPOSITIVE_DOUBLEAccess().getFullStopKeyword_0_1()); }
	'.'
	{ after(grammarAccess.getPOSITIVE_DOUBLEAccess().getFullStopKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__POSITIVE_DOUBLE__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__POSITIVE_DOUBLE__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__POSITIVE_DOUBLE__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPOSITIVE_DOUBLEAccess().getINTTerminalRuleCall_0_2()); }
	RULE_INT
	{ after(grammarAccess.getPOSITIVE_DOUBLEAccess().getINTTerminalRuleCall_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GoTo__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GoTo__Group__0__Impl
	rule__GoTo__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GoTo__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoToAccess().getGOTOKeyword_0()); }
	'GOTO'
	{ after(grammarAccess.getGoToAccess().getGOTOKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GoTo__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GoTo__Group__1__Impl
	rule__GoTo__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GoTo__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoToAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getGoToAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GoTo__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GoTo__Group__2__Impl
	rule__GoTo__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GoTo__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoToAccess().getObject_nameAssignment_2()); }
	(rule__GoTo__Object_nameAssignment_2)
	{ after(grammarAccess.getGoToAccess().getObject_nameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GoTo__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GoTo__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GoTo__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoToAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getGoToAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Up__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Up__Group__0__Impl
	rule__Up__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Up__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpAccess().getUPKeyword_0()); }
	'UP'
	{ after(grammarAccess.getUpAccess().getUPKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Up__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Up__Group__1__Impl
	rule__Up__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Up__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getUpAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Up__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Up__Group__2__Impl
	rule__Up__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Up__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpAccess().getDistanceAssignment_2()); }
	(rule__Up__DistanceAssignment_2)
	{ after(grammarAccess.getUpAccess().getDistanceAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Up__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Up__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Up__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getUpAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Down__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Down__Group__0__Impl
	rule__Down__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Down__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDownAccess().getDOWNKeyword_0()); }
	'DOWN'
	{ after(grammarAccess.getDownAccess().getDOWNKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Down__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Down__Group__1__Impl
	rule__Down__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Down__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDownAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getDownAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Down__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Down__Group__2__Impl
	rule__Down__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Down__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDownAccess().getDistanceAssignment_2()); }
	(rule__Down__DistanceAssignment_2)
	{ after(grammarAccess.getDownAccess().getDistanceAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Down__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Down__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Down__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDownAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getDownAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Left__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Left__Group__0__Impl
	rule__Left__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftAccess().getLEFTKeyword_0()); }
	'LEFT'
	{ after(grammarAccess.getLeftAccess().getLEFTKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Left__Group__1__Impl
	rule__Left__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getLeftAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Left__Group__2__Impl
	rule__Left__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftAccess().getDistanceAssignment_2()); }
	(rule__Left__DistanceAssignment_2)
	{ after(grammarAccess.getLeftAccess().getDistanceAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Left__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getLeftAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Right__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Right__Group__0__Impl
	rule__Right__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightAccess().getRIGHTKeyword_0()); }
	'RIGHT'
	{ after(grammarAccess.getRightAccess().getRIGHTKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Right__Group__1__Impl
	rule__Right__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getRightAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Right__Group__2__Impl
	rule__Right__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightAccess().getDistanceAssignment_2()); }
	(rule__Right__DistanceAssignment_2)
	{ after(grammarAccess.getRightAccess().getDistanceAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Right__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getRightAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Forward__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Forward__Group__0__Impl
	rule__Forward__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForwardAccess().getFORWARDKeyword_0()); }
	'FORWARD'
	{ after(grammarAccess.getForwardAccess().getFORWARDKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Forward__Group__1__Impl
	rule__Forward__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForwardAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getForwardAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Forward__Group__2__Impl
	rule__Forward__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForwardAccess().getDistanceAssignment_2()); }
	(rule__Forward__DistanceAssignment_2)
	{ after(grammarAccess.getForwardAccess().getDistanceAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Forward__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForwardAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getForwardAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Backward__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Backward__Group__0__Impl
	rule__Backward__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Backward__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBackwardAccess().getBACKWARDKeyword_0()); }
	'BACKWARD'
	{ after(grammarAccess.getBackwardAccess().getBACKWARDKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Backward__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Backward__Group__1__Impl
	rule__Backward__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Backward__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBackwardAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getBackwardAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Backward__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Backward__Group__2__Impl
	rule__Backward__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Backward__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBackwardAccess().getDistanceAssignment_2()); }
	(rule__Backward__DistanceAssignment_2)
	{ after(grammarAccess.getBackwardAccess().getDistanceAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Backward__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Backward__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Backward__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBackwardAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getBackwardAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RotateL__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RotateL__Group__0__Impl
	rule__RotateL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RotateL__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRotateLAccess().getROTATELEFTKeyword_0()); }
	'ROTATELEFT'
	{ after(grammarAccess.getRotateLAccess().getROTATELEFTKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RotateL__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RotateL__Group__1__Impl
	rule__RotateL__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RotateL__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRotateLAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getRotateLAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RotateL__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RotateL__Group__2__Impl
	rule__RotateL__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RotateL__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRotateLAccess().getAngleAssignment_2()); }
	(rule__RotateL__AngleAssignment_2)
	{ after(grammarAccess.getRotateLAccess().getAngleAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RotateL__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RotateL__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RotateL__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRotateLAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getRotateLAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RotateR__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RotateR__Group__0__Impl
	rule__RotateR__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RotateR__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRotateRAccess().getROTATERIGHTKeyword_0()); }
	'ROTATERIGHT'
	{ after(grammarAccess.getRotateRAccess().getROTATERIGHTKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RotateR__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RotateR__Group__1__Impl
	rule__RotateR__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RotateR__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRotateRAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getRotateRAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RotateR__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RotateR__Group__2__Impl
	rule__RotateR__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RotateR__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRotateRAccess().getAngleAssignment_2()); }
	(rule__RotateR__AngleAssignment_2)
	{ after(grammarAccess.getRotateRAccess().getAngleAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RotateR__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RotateR__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RotateR__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRotateRAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getRotateRAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Wait__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Wait__Group__0__Impl
	rule__Wait__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWaitAccess().getWAITKeyword_0()); }
	'WAIT'
	{ after(grammarAccess.getWaitAccess().getWAITKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Wait__Group__1__Impl
	rule__Wait__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWaitAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getWaitAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Wait__Group__2__Impl
	rule__Wait__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWaitAccess().getSecondsAssignment_2()); }
	(rule__Wait__SecondsAssignment_2)
	{ after(grammarAccess.getWaitAccess().getSecondsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Wait__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWaitAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getWaitAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Drone__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Drone__Group__0__Impl
	rule__Drone__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Drone__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDroneAccess().getDRONEKeyword_0()); }
	'DRONE'
	{ after(grammarAccess.getDroneAccess().getDRONEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Drone__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Drone__Group__1__Impl
	rule__Drone__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Drone__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDroneAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getDroneAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Drone__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Drone__Group__2__Impl
	rule__Drone__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Drone__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDroneAccess().getAlternatives_2()); }
	(rule__Drone__Alternatives_2)*
	{ after(grammarAccess.getDroneAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Drone__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Drone__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Drone__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDroneAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getDroneAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Drone__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Drone__Group_2_1__0__Impl
	rule__Drone__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Drone__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDroneAccess().getRotationKeyword_2_1_0()); }
	'rotation'
	{ after(grammarAccess.getDroneAccess().getRotationKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Drone__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Drone__Group_2_1__1__Impl
	rule__Drone__Group_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Drone__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDroneAccess().getEqualsSignKeyword_2_1_1()); }
	'='
	{ after(grammarAccess.getDroneAccess().getEqualsSignKeyword_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Drone__Group_2_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Drone__Group_2_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Drone__Group_2_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDroneAccess().getRotationAssignment_2_1_2()); }
	(rule__Drone__RotationAssignment_2_1_2)
	{ after(grammarAccess.getDroneAccess().getRotationAssignment_2_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Object__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group__0__Impl
	rule__Object__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getObject_nameAssignment_0()); }
	(rule__Object__Object_nameAssignment_0)
	{ after(grammarAccess.getObjectAccess().getObject_nameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group__1__Impl
	rule__Object__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getObjectAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group__2__Impl
	rule__Object__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getObjectAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group__3__Impl
	rule__Object__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getAlternatives_3()); }
	(rule__Object__Alternatives_3)*
	{ after(grammarAccess.getObjectAccess().getAlternatives_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getObjectAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Origin__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Origin__Group__0__Impl
	rule__Origin__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOriginAccess().getOriginKeyword_0()); }
	'origin'
	{ after(grammarAccess.getOriginAccess().getOriginKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Origin__Group__1__Impl
	rule__Origin__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOriginAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getOriginAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Origin__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOriginAccess().getVectorAssignment_2()); }
	(rule__Origin__VectorAssignment_2)
	{ after(grammarAccess.getOriginAccess().getVectorAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Size__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Size__Group__0__Impl
	rule__Size__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSizeAccess().getSizeKeyword_0()); }
	'size'
	{ after(grammarAccess.getSizeAccess().getSizeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Size__Group__1__Impl
	rule__Size__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSizeAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getSizeAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Size__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSizeAccess().getVectorAssignment_2()); }
	(rule__Size__VectorAssignment_2)
	{ after(grammarAccess.getSizeAccess().getVectorAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Position__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Position__Group__0__Impl
	rule__Position__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Position__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositionAccess().getPositionKeyword_0()); }
	'position'
	{ after(grammarAccess.getPositionAccess().getPositionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Position__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Position__Group__1__Impl
	rule__Position__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Position__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositionAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getPositionAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Position__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Position__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Position__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositionAccess().getVectorAssignment_2()); }
	(rule__Position__VectorAssignment_2)
	{ after(grammarAccess.getPositionAccess().getVectorAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Vector__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vector__Group__0__Impl
	rule__Vector__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVectorAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getVectorAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vector__Group__1__Impl
	rule__Vector__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVectorAccess().getXAssignment_1()); }
	(rule__Vector__XAssignment_1)
	{ after(grammarAccess.getVectorAccess().getXAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vector__Group__2__Impl
	rule__Vector__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVectorAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getVectorAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vector__Group__3__Impl
	rule__Vector__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVectorAccess().getYAssignment_3()); }
	(rule__Vector__YAssignment_3)
	{ after(grammarAccess.getVectorAccess().getYAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vector__Group__4__Impl
	rule__Vector__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVectorAccess().getCommaKeyword_4()); }
	','
	{ after(grammarAccess.getVectorAccess().getCommaKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vector__Group__5__Impl
	rule__Vector__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVectorAccess().getZAssignment_5()); }
	(rule__Vector__ZAssignment_5)
	{ after(grammarAccess.getVectorAccess().getZAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vector__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVectorAccess().getRightParenthesisKeyword_6()); }
	')'
	{ after(grammarAccess.getVectorAccess().getRightParenthesisKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Color__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Color__Group__0__Impl
	rule__Color__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Color__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorAccess().getColorKeyword_0()); }
	'color'
	{ after(grammarAccess.getColorAccess().getColorKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Color__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Color__Group__1__Impl
	rule__Color__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Color__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getColorAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Color__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Color__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Color__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorAccess().getColor_valueAssignment_2()); }
	(rule__Color__Color_valueAssignment_2)
	{ after(grammarAccess.getColorAccess().getColor_valueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Walls__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Walls__Group__0__Impl
	rule__Walls__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Walls__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWallsAccess().getWALLSKeyword_0()); }
	'WALLS'
	{ after(grammarAccess.getWallsAccess().getWALLSKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Walls__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Walls__Group__1__Impl
	rule__Walls__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Walls__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWallsAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getWallsAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Walls__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Walls__Group__2__Impl
	rule__Walls__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Walls__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWallsAccess().getAlternatives_2()); }
	(rule__Walls__Alternatives_2)*
	{ after(grammarAccess.getWallsAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Walls__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Walls__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Walls__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWallsAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getWallsAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FrontWall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FrontWall__Group__0__Impl
	rule__FrontWall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FrontWall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFrontWallAccess().getFrontKeyword_0()); }
	'front'
	{ after(grammarAccess.getFrontWallAccess().getFrontKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FrontWall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FrontWall__Group__1__Impl
	rule__FrontWall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FrontWall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFrontWallAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getFrontWallAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FrontWall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FrontWall__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FrontWall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFrontWallAccess().getValueAssignment_2()); }
	(rule__FrontWall__ValueAssignment_2)
	{ after(grammarAccess.getFrontWallAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RightWall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RightWall__Group__0__Impl
	rule__RightWall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RightWall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightWallAccess().getRightKeyword_0()); }
	'right'
	{ after(grammarAccess.getRightWallAccess().getRightKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RightWall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RightWall__Group__1__Impl
	rule__RightWall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RightWall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightWallAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getRightWallAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RightWall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RightWall__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RightWall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightWallAccess().getValueAssignment_2()); }
	(rule__RightWall__ValueAssignment_2)
	{ after(grammarAccess.getRightWallAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LeftWall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeftWall__Group__0__Impl
	rule__LeftWall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftWall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftWallAccess().getLeftKeyword_0()); }
	'left'
	{ after(grammarAccess.getLeftWallAccess().getLeftKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftWall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeftWall__Group__1__Impl
	rule__LeftWall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftWall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftWallAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getLeftWallAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftWall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeftWall__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftWall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftWallAccess().getValueAssignment_2()); }
	(rule__LeftWall__ValueAssignment_2)
	{ after(grammarAccess.getLeftWallAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BackWall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BackWall__Group__0__Impl
	rule__BackWall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BackWall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBackWallAccess().getBackKeyword_0()); }
	'back'
	{ after(grammarAccess.getBackWallAccess().getBackKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BackWall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BackWall__Group__1__Impl
	rule__BackWall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BackWall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBackWallAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getBackWallAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BackWall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BackWall__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BackWall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBackWallAccess().getValueAssignment_2()); }
	(rule__BackWall__ValueAssignment_2)
	{ after(grammarAccess.getBackWallAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UpWall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpWall__Group__0__Impl
	rule__UpWall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UpWall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpWallAccess().getUpKeyword_0()); }
	'up'
	{ after(grammarAccess.getUpWallAccess().getUpKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpWall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpWall__Group__1__Impl
	rule__UpWall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UpWall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpWallAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getUpWallAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpWall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpWall__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UpWall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpWallAccess().getValueAssignment_2()); }
	(rule__UpWall__ValueAssignment_2)
	{ after(grammarAccess.getUpWallAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__MainAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getMainMainParserRuleCall_0()); }
		ruleMain
		{ after(grammarAccess.getProgramAccess().getMainMainParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__FlyAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMainAccess().getFlyFlyParserRuleCall_0_0()); }
		ruleFly
		{ after(grammarAccess.getMainAccess().getFlyFlyParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__EnvironmentAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMainAccess().getEnvironmentEnvironmentParserRuleCall_1_0()); }
		ruleEnvironment
		{ after(grammarAccess.getMainAccess().getEnvironmentEnvironmentParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__TakeoffAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFlyAccess().getTakeoffTakeoffParserRuleCall_4_0_0()); }
		ruleTakeoff
		{ after(grammarAccess.getFlyAccess().getTakeoffTakeoffParserRuleCall_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__CommandsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFlyAccess().getCommandsSuperCommandParserRuleCall_4_1_0()); }
		ruleSuperCommand
		{ after(grammarAccess.getFlyAccess().getCommandsSuperCommandParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__LandAssignment_4_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFlyAccess().getLandLandParserRuleCall_4_2_0()); }
		ruleLand
		{ after(grammarAccess.getFlyAccess().getLandLandParserRuleCall_4_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__DroneAssignment_5_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnvironmentAccess().getDroneDroneParserRuleCall_5_0_0()); }
		ruleDrone
		{ after(grammarAccess.getEnvironmentAccess().getDroneDroneParserRuleCall_5_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__WallsAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnvironmentAccess().getWallsWallsParserRuleCall_5_1_0()); }
		ruleWalls
		{ after(grammarAccess.getEnvironmentAccess().getWallsWallsParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__ObjectsAssignment_5_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnvironmentAccess().getObjectsObjectParserRuleCall_5_2_0()); }
		ruleObject
		{ after(grammarAccess.getEnvironmentAccess().getObjectsObjectParserRuleCall_5_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GoTo__Object_nameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGoToAccess().getObject_nameSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getGoToAccess().getObject_nameSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Up__DistanceAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpAccess().getDistanceDOUBLEParserRuleCall_2_0()); }
		ruleDOUBLE
		{ after(grammarAccess.getUpAccess().getDistanceDOUBLEParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Down__DistanceAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDownAccess().getDistanceDOUBLEParserRuleCall_2_0()); }
		ruleDOUBLE
		{ after(grammarAccess.getDownAccess().getDistanceDOUBLEParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__DistanceAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeftAccess().getDistanceDOUBLEParserRuleCall_2_0()); }
		ruleDOUBLE
		{ after(grammarAccess.getLeftAccess().getDistanceDOUBLEParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__DistanceAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRightAccess().getDistanceDOUBLEParserRuleCall_2_0()); }
		ruleDOUBLE
		{ after(grammarAccess.getRightAccess().getDistanceDOUBLEParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Forward__DistanceAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForwardAccess().getDistanceDOUBLEParserRuleCall_2_0()); }
		ruleDOUBLE
		{ after(grammarAccess.getForwardAccess().getDistanceDOUBLEParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Backward__DistanceAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBackwardAccess().getDistanceDOUBLEParserRuleCall_2_0()); }
		ruleDOUBLE
		{ after(grammarAccess.getBackwardAccess().getDistanceDOUBLEParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RotateL__AngleAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRotateLAccess().getAngleINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getRotateLAccess().getAngleINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RotateR__AngleAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRotateRAccess().getAngleINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getRotateRAccess().getAngleINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__SecondsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWaitAccess().getSecondsPOSITIVE_DOUBLEParserRuleCall_2_0()); }
		rulePOSITIVE_DOUBLE
		{ after(grammarAccess.getWaitAccess().getSecondsPOSITIVE_DOUBLEParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Drone__PositionAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDroneAccess().getPositionPositionParserRuleCall_2_0_0()); }
		rulePosition
		{ after(grammarAccess.getDroneAccess().getPositionPositionParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Drone__RotationAssignment_2_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDroneAccess().getRotationDOUBLEParserRuleCall_2_1_2_0()); }
		ruleDOUBLE
		{ after(grammarAccess.getDroneAccess().getRotationDOUBLEParserRuleCall_2_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Object_nameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getObject_nameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getObjectAccess().getObject_nameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__OriginAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getOriginOriginParserRuleCall_3_0_0()); }
		ruleOrigin
		{ after(grammarAccess.getObjectAccess().getOriginOriginParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__SizeAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getSizeSizeParserRuleCall_3_1_0()); }
		ruleSize
		{ after(grammarAccess.getObjectAccess().getSizeSizeParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__ColorAssignment_3_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getColorColorParserRuleCall_3_2_0()); }
		ruleColor
		{ after(grammarAccess.getObjectAccess().getColorColorParserRuleCall_3_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__VectorAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOriginAccess().getVectorVectorParserRuleCall_2_0()); }
		ruleVector
		{ after(grammarAccess.getOriginAccess().getVectorVectorParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__VectorAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSizeAccess().getVectorVectorParserRuleCall_2_0()); }
		ruleVector
		{ after(grammarAccess.getSizeAccess().getVectorVectorParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Position__VectorAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositionAccess().getVectorVectorParserRuleCall_2_0()); }
		ruleVector
		{ after(grammarAccess.getPositionAccess().getVectorVectorParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__XAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVectorAccess().getXDOUBLEParserRuleCall_1_0()); }
		ruleDOUBLE
		{ after(grammarAccess.getVectorAccess().getXDOUBLEParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__YAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVectorAccess().getYDOUBLEParserRuleCall_3_0()); }
		ruleDOUBLE
		{ after(grammarAccess.getVectorAccess().getYDOUBLEParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__ZAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVectorAccess().getZDOUBLEParserRuleCall_5_0()); }
		ruleDOUBLE
		{ after(grammarAccess.getVectorAccess().getZDOUBLEParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Color__Color_valueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColorAccess().getColor_valueSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getColorAccess().getColor_valueSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Walls__FrontAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWallsAccess().getFrontFrontWallParserRuleCall_2_0_0()); }
		ruleFrontWall
		{ after(grammarAccess.getWallsAccess().getFrontFrontWallParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Walls__RightAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWallsAccess().getRightRightWallParserRuleCall_2_1_0()); }
		ruleRightWall
		{ after(grammarAccess.getWallsAccess().getRightRightWallParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Walls__BackAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWallsAccess().getBackBackWallParserRuleCall_2_2_0()); }
		ruleBackWall
		{ after(grammarAccess.getWallsAccess().getBackBackWallParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Walls__LeftAssignment_2_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWallsAccess().getLeftLeftWallParserRuleCall_2_3_0()); }
		ruleLeftWall
		{ after(grammarAccess.getWallsAccess().getLeftLeftWallParserRuleCall_2_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Walls__UpAssignment_2_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWallsAccess().getUpUpWallParserRuleCall_2_4_0()); }
		ruleUpWall
		{ after(grammarAccess.getWallsAccess().getUpUpWallParserRuleCall_2_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FrontWall__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFrontWallAccess().getValuePOSITIVE_DOUBLEParserRuleCall_2_0()); }
		rulePOSITIVE_DOUBLE
		{ after(grammarAccess.getFrontWallAccess().getValuePOSITIVE_DOUBLEParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RightWall__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRightWallAccess().getValuePOSITIVE_DOUBLEParserRuleCall_2_0()); }
		rulePOSITIVE_DOUBLE
		{ after(grammarAccess.getRightWallAccess().getValuePOSITIVE_DOUBLEParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftWall__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeftWallAccess().getValuePOSITIVE_DOUBLEParserRuleCall_2_0()); }
		rulePOSITIVE_DOUBLE
		{ after(grammarAccess.getLeftWallAccess().getValuePOSITIVE_DOUBLEParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BackWall__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBackWallAccess().getValuePOSITIVE_DOUBLEParserRuleCall_2_0()); }
		rulePOSITIVE_DOUBLE
		{ after(grammarAccess.getBackWallAccess().getValuePOSITIVE_DOUBLEParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpWall__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpWallAccess().getValuePOSITIVE_DOUBLEParserRuleCall_2_0()); }
		rulePOSITIVE_DOUBLE
		{ after(grammarAccess.getUpWallAccess().getValuePOSITIVE_DOUBLEParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
