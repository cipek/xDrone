/*
 * generated by Xtext 2.17.0
 */
grammar InternalXDrone;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package ic.ac.uk.xdrone.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package ic.ac.uk.xdrone.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import ic.ac.uk.xdrone.services.XDroneGrammarAccess;

}
@parser::members {
	private XDroneGrammarAccess grammarAccess;

	public void setGrammarAccess(XDroneGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getMainAssignment()); }
		(rule__Program__MainAssignment)
		{ after(grammarAccess.getProgramAccess().getMainAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMain
entryRuleMain
:
{ before(grammarAccess.getMainRule()); }
	 ruleMain
{ after(grammarAccess.getMainRule()); } 
	 EOF 
;

// Rule Main
ruleMain 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMainAccess().getGroup()); }
		(rule__Main__Group__0)
		{ after(grammarAccess.getMainAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFly
entryRuleFly
:
{ before(grammarAccess.getFlyRule()); }
	 ruleFly
{ after(grammarAccess.getFlyRule()); } 
	 EOF 
;

// Rule Fly
ruleFly 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFlyAccess().getGroup()); }
		(rule__Fly__Group__0)
		{ after(grammarAccess.getFlyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnvironment
entryRuleEnvironment
:
{ before(grammarAccess.getEnvironmentRule()); }
	 ruleEnvironment
{ after(grammarAccess.getEnvironmentRule()); } 
	 EOF 
;

// Rule Environment
ruleEnvironment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnvironmentAccess().getGroup()); }
		(rule__Environment__Group__0)
		{ after(grammarAccess.getEnvironmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTakeoff
entryRuleTakeoff
:
{ before(grammarAccess.getTakeoffRule()); }
	 ruleTakeoff
{ after(grammarAccess.getTakeoffRule()); } 
	 EOF 
;

// Rule Takeoff
ruleTakeoff 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTakeoffAccess().getTAKEOFFKeyword()); }
		'TAKEOFF()'
		{ after(grammarAccess.getTakeoffAccess().getTAKEOFFKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLand
entryRuleLand
:
{ before(grammarAccess.getLandRule()); }
	 ruleLand
{ after(grammarAccess.getLandRule()); } 
	 EOF 
;

// Rule Land
ruleLand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLandAccess().getLANDKeyword()); }
		'LAND()'
		{ after(grammarAccess.getLandAccess().getLANDKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSuperCommand
entryRuleSuperCommand
:
{ before(grammarAccess.getSuperCommandRule()); }
	 ruleSuperCommand
{ after(grammarAccess.getSuperCommandRule()); } 
	 EOF 
;

// Rule SuperCommand
ruleSuperCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSuperCommandAccess().getAlternatives()); }
		(rule__SuperCommand__Alternatives)
		{ after(grammarAccess.getSuperCommandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommand
entryRuleCommand
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandAccess().getAlternatives()); }
		(rule__Command__Alternatives)
		{ after(grammarAccess.getCommandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDOUBLE
entryRuleDOUBLE
:
{ before(grammarAccess.getDOUBLERule()); }
	 ruleDOUBLE
{ after(grammarAccess.getDOUBLERule()); } 
	 EOF 
;

// Rule DOUBLE
ruleDOUBLE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDOUBLEAccess().getAlternatives()); }
		(rule__DOUBLE__Alternatives)
		{ after(grammarAccess.getDOUBLEAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePOSITIVE_DOUBLE
entryRulePOSITIVE_DOUBLE
:
{ before(grammarAccess.getPOSITIVE_DOUBLERule()); }
	 rulePOSITIVE_DOUBLE
{ after(grammarAccess.getPOSITIVE_DOUBLERule()); } 
	 EOF 
;

// Rule POSITIVE_DOUBLE
rulePOSITIVE_DOUBLE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPOSITIVE_DOUBLEAccess().getAlternatives()); }
		(rule__POSITIVE_DOUBLE__Alternatives)
		{ after(grammarAccess.getPOSITIVE_DOUBLEAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFlyTo
entryRuleFlyTo
:
{ before(grammarAccess.getFlyToRule()); }
	 ruleFlyTo
{ after(grammarAccess.getFlyToRule()); } 
	 EOF 
;

// Rule FlyTo
ruleFlyTo 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFlyToAccess().getGroup()); }
		(rule__FlyTo__Group__0)
		{ after(grammarAccess.getFlyToAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMove
entryRuleMove
:
{ before(grammarAccess.getMoveRule()); }
	 ruleMove
{ after(grammarAccess.getMoveRule()); } 
	 EOF 
;

// Rule Move
ruleMove 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMoveAccess().getGroup()); }
		(rule__Move__Group__0)
		{ after(grammarAccess.getMoveAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRotate
entryRuleRotate
:
{ before(grammarAccess.getRotateRule()); }
	 ruleRotate
{ after(grammarAccess.getRotateRule()); } 
	 EOF 
;

// Rule Rotate
ruleRotate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRotateAccess().getGroup()); }
		(rule__Rotate__Group__0)
		{ after(grammarAccess.getRotateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWait
entryRuleWait
:
{ before(grammarAccess.getWaitRule()); }
	 ruleWait
{ after(grammarAccess.getWaitRule()); } 
	 EOF 
;

// Rule Wait
ruleWait 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWaitAccess().getGroup()); }
		(rule__Wait__Group__0)
		{ after(grammarAccess.getWaitAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionName
entryRuleFunctionName
:
{ before(grammarAccess.getFunctionNameRule()); }
	 ruleFunctionName
{ after(grammarAccess.getFunctionNameRule()); } 
	 EOF 
;

// Rule FunctionName
ruleFunctionName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionNameAccess().getGroup()); }
		(rule__FunctionName__Group__0)
		{ after(grammarAccess.getFunctionNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDrone
entryRuleDrone
:
{ before(grammarAccess.getDroneRule()); }
	 ruleDrone
{ after(grammarAccess.getDroneRule()); } 
	 EOF 
;

// Rule Drone
ruleDrone 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDroneAccess().getGroup()); }
		(rule__Drone__Group__0)
		{ after(grammarAccess.getDroneAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObject
entryRuleObject
:
{ before(grammarAccess.getObjectRule()); }
	 ruleObject
{ after(grammarAccess.getObjectRule()); } 
	 EOF 
;

// Rule Object
ruleObject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObjectAccess().getUnorderedGroup()); }
		(rule__Object__UnorderedGroup)
		{ after(grammarAccess.getObjectAccess().getUnorderedGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrigin
entryRuleOrigin
:
{ before(grammarAccess.getOriginRule()); }
	 ruleOrigin
{ after(grammarAccess.getOriginRule()); } 
	 EOF 
;

// Rule Origin
ruleOrigin 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOriginAccess().getGroup()); }
		(rule__Origin__Group__0)
		{ after(grammarAccess.getOriginAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSize
entryRuleSize
:
{ before(grammarAccess.getSizeRule()); }
	 ruleSize
{ after(grammarAccess.getSizeRule()); } 
	 EOF 
;

// Rule Size
ruleSize 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSizeAccess().getGroup()); }
		(rule__Size__Group__0)
		{ after(grammarAccess.getSizeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVector
entryRuleVector
:
{ before(grammarAccess.getVectorRule()); }
	 ruleVector
{ after(grammarAccess.getVectorRule()); } 
	 EOF 
;

// Rule Vector
ruleVector 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVectorAccess().getGroup()); }
		(rule__Vector__Group__0)
		{ after(grammarAccess.getVectorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColor
entryRuleColor
:
{ before(grammarAccess.getColorRule()); }
	 ruleColor
{ after(grammarAccess.getColorRule()); } 
	 EOF 
;

// Rule Color
ruleColor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColorAccess().getGroup()); }
		(rule__Color__Group__0)
		{ after(grammarAccess.getColorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWalls
entryRuleWalls
:
{ before(grammarAccess.getWallsRule()); }
	 ruleWalls
{ after(grammarAccess.getWallsRule()); } 
	 EOF 
;

// Rule Walls
ruleWalls 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWallsAccess().getUnorderedGroup()); }
		(rule__Walls__UnorderedGroup)
		{ after(grammarAccess.getWallsAccess().getUnorderedGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFront
entryRuleFront
:
{ before(grammarAccess.getFrontRule()); }
	 ruleFront
{ after(grammarAccess.getFrontRule()); } 
	 EOF 
;

// Rule Front
ruleFront 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFrontAccess().getGroup()); }
		(rule__Front__Group__0)
		{ after(grammarAccess.getFrontAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRight
entryRuleRight
:
{ before(grammarAccess.getRightRule()); }
	 ruleRight
{ after(grammarAccess.getRightRule()); } 
	 EOF 
;

// Rule Right
ruleRight 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRightAccess().getGroup()); }
		(rule__Right__Group__0)
		{ after(grammarAccess.getRightAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLeft
entryRuleLeft
:
{ before(grammarAccess.getLeftRule()); }
	 ruleLeft
{ after(grammarAccess.getLeftRule()); } 
	 EOF 
;

// Rule Left
ruleLeft 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeftAccess().getGroup()); }
		(rule__Left__Group__0)
		{ after(grammarAccess.getLeftAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBack
entryRuleBack
:
{ before(grammarAccess.getBackRule()); }
	 ruleBack
{ after(grammarAccess.getBackRule()); } 
	 EOF 
;

// Rule Back
ruleBack 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBackAccess().getGroup()); }
		(rule__Back__Group__0)
		{ after(grammarAccess.getBackAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUp
entryRuleUp
:
{ before(grammarAccess.getUpRule()); }
	 ruleUp
{ after(grammarAccess.getUpRule()); } 
	 EOF 
;

// Rule Up
ruleUp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUpAccess().getGroup()); }
		(rule__Up__Group__0)
		{ after(grammarAccess.getUpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnvironmentAccess().getDroneAssignment_2_0()); }
		(rule__Environment__DroneAssignment_2_0)
		{ after(grammarAccess.getEnvironmentAccess().getDroneAssignment_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getEnvironmentAccess().getWallsAssignment_2_1()); }
		(rule__Environment__WallsAssignment_2_1)
		{ after(grammarAccess.getEnvironmentAccess().getWallsAssignment_2_1()); }
	)
	|
	(
		{ before(grammarAccess.getEnvironmentAccess().getObjectsAssignment_2_2()); }
		(rule__Environment__ObjectsAssignment_2_2)
		{ after(grammarAccess.getEnvironmentAccess().getObjectsAssignment_2_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperCommand__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSuperCommandAccess().getCommandParserRuleCall_0()); }
		ruleCommand
		{ after(grammarAccess.getSuperCommandAccess().getCommandParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSuperCommandAccess().getFunctionNameParserRuleCall_1()); }
		ruleFunctionName
		{ after(grammarAccess.getSuperCommandAccess().getFunctionNameParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getWaitParserRuleCall_0()); }
		ruleWait
		{ after(grammarAccess.getCommandAccess().getWaitParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getMoveParserRuleCall_1()); }
		ruleMove
		{ after(grammarAccess.getCommandAccess().getMoveParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getRotateParserRuleCall_2()); }
		ruleRotate
		{ after(grammarAccess.getCommandAccess().getRotateParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getFlyToParserRuleCall_3()); }
		ruleFlyTo
		{ after(grammarAccess.getCommandAccess().getFlyToParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DOUBLE__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDOUBLEAccess().getGroup_0()); }
		(rule__DOUBLE__Group_0__0)
		{ after(grammarAccess.getDOUBLEAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getDOUBLEAccess().getPOSITIVE_DOUBLEParserRuleCall_1()); }
		rulePOSITIVE_DOUBLE
		{ after(grammarAccess.getDOUBLEAccess().getPOSITIVE_DOUBLEParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__POSITIVE_DOUBLE__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPOSITIVE_DOUBLEAccess().getGroup_0()); }
		(rule__POSITIVE_DOUBLE__Group_0__0)
		{ after(grammarAccess.getPOSITIVE_DOUBLEAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPOSITIVE_DOUBLEAccess().getINTTerminalRuleCall_1()); }
		RULE_INT
		{ after(grammarAccess.getPOSITIVE_DOUBLEAccess().getINTTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Main__Group__0__Impl
	rule__Main__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainAccess().getFlyAssignment_0()); }
	(rule__Main__FlyAssignment_0)
	{ after(grammarAccess.getMainAccess().getFlyAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Main__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainAccess().getEnvironmentAssignment_1()); }
	(rule__Main__EnvironmentAssignment_1)?
	{ after(grammarAccess.getMainAccess().getEnvironmentAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Fly__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fly__Group__0__Impl
	rule__Fly__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlyAccess().getFlyKeyword_0()); }
	'fly(){'
	{ after(grammarAccess.getFlyAccess().getFlyKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fly__Group__1__Impl
	rule__Fly__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlyAccess().getGroup_1()); }
	(rule__Fly__Group_1__0)
	{ after(grammarAccess.getFlyAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fly__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlyAccess().getRightCurlyBracketKeyword_2()); }
	'}'
	{ after(grammarAccess.getFlyAccess().getRightCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Fly__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fly__Group_1__0__Impl
	rule__Fly__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlyAccess().getTakeoffAssignment_1_0()); }
	(rule__Fly__TakeoffAssignment_1_0)
	{ after(grammarAccess.getFlyAccess().getTakeoffAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fly__Group_1__1__Impl
	rule__Fly__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlyAccess().getCommandsAssignment_1_1()); }
	(rule__Fly__CommandsAssignment_1_1)*
	{ after(grammarAccess.getFlyAccess().getCommandsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fly__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlyAccess().getLandAssignment_1_2()); }
	(rule__Fly__LandAssignment_1_2)
	{ after(grammarAccess.getFlyAccess().getLandAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Environment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group__0__Impl
	rule__Environment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getEnvironmentAction_0()); }
	()
	{ after(grammarAccess.getEnvironmentAccess().getEnvironmentAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group__1__Impl
	rule__Environment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getEnvironmentKeyword_1()); }
	'environment(){'
	{ after(grammarAccess.getEnvironmentAccess().getEnvironmentKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group__2__Impl
	rule__Environment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getAlternatives_2()); }
	(rule__Environment__Alternatives_2)*
	{ after(grammarAccess.getEnvironmentAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Environment__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnvironmentAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getEnvironmentAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DOUBLE__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DOUBLE__Group_0__0__Impl
	rule__DOUBLE__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DOUBLE__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDOUBLEAccess().getHyphenMinusKeyword_0_0()); }
	'-'
	{ after(grammarAccess.getDOUBLEAccess().getHyphenMinusKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DOUBLE__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DOUBLE__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DOUBLE__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDOUBLEAccess().getPOSITIVE_DOUBLEParserRuleCall_0_1()); }
	rulePOSITIVE_DOUBLE
	{ after(grammarAccess.getDOUBLEAccess().getPOSITIVE_DOUBLEParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__POSITIVE_DOUBLE__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__POSITIVE_DOUBLE__Group_0__0__Impl
	rule__POSITIVE_DOUBLE__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__POSITIVE_DOUBLE__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPOSITIVE_DOUBLEAccess().getINTTerminalRuleCall_0_0()); }
	RULE_INT
	{ after(grammarAccess.getPOSITIVE_DOUBLEAccess().getINTTerminalRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__POSITIVE_DOUBLE__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__POSITIVE_DOUBLE__Group_0__1__Impl
	rule__POSITIVE_DOUBLE__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__POSITIVE_DOUBLE__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPOSITIVE_DOUBLEAccess().getFullStopKeyword_0_1()); }
	'.'
	{ after(grammarAccess.getPOSITIVE_DOUBLEAccess().getFullStopKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__POSITIVE_DOUBLE__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__POSITIVE_DOUBLE__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__POSITIVE_DOUBLE__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPOSITIVE_DOUBLEAccess().getINTTerminalRuleCall_0_2()); }
	RULE_INT
	{ after(grammarAccess.getPOSITIVE_DOUBLEAccess().getINTTerminalRuleCall_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FlyTo__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FlyTo__Group__0__Impl
	rule__FlyTo__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FlyTo__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlyToAccess().getFLYTOKeyword_0()); }
	'FLYTO'
	{ after(grammarAccess.getFlyToAccess().getFLYTOKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FlyTo__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FlyTo__Group__1__Impl
	rule__FlyTo__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FlyTo__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlyToAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getFlyToAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FlyTo__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FlyTo__Group__2__Impl
	rule__FlyTo__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FlyTo__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlyToAccess().getObject_nameAssignment_2()); }
	(rule__FlyTo__Object_nameAssignment_2)
	{ after(grammarAccess.getFlyToAccess().getObject_nameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FlyTo__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FlyTo__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FlyTo__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlyToAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getFlyToAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Move__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Move__Group__0__Impl
	rule__Move__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveAccess().getMOVEKeyword_0()); }
	'MOVE'
	{ after(grammarAccess.getMoveAccess().getMOVEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Move__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveAccess().getVectorAssignment_1()); }
	(rule__Move__VectorAssignment_1)
	{ after(grammarAccess.getMoveAccess().getVectorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rotate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rotate__Group__0__Impl
	rule__Rotate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rotate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRotateAccess().getROTATEKeyword_0()); }
	'ROTATE'
	{ after(grammarAccess.getRotateAccess().getROTATEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rotate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rotate__Group__1__Impl
	rule__Rotate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rotate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRotateAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getRotateAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rotate__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rotate__Group__2__Impl
	rule__Rotate__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rotate__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRotateAccess().getAngleAssignment_2()); }
	(rule__Rotate__AngleAssignment_2)
	{ after(grammarAccess.getRotateAccess().getAngleAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rotate__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rotate__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rotate__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRotateAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getRotateAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Wait__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Wait__Group__0__Impl
	rule__Wait__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWaitAccess().getWAITKeyword_0()); }
	'WAIT'
	{ after(grammarAccess.getWaitAccess().getWAITKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Wait__Group__1__Impl
	rule__Wait__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWaitAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getWaitAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Wait__Group__2__Impl
	rule__Wait__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWaitAccess().getSecondsAssignment_2()); }
	(rule__Wait__SecondsAssignment_2)
	{ after(grammarAccess.getWaitAccess().getSecondsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Wait__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWaitAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getWaitAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionName__Group__0__Impl
	rule__FunctionName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionNameAccess().getFunc_nameAssignment_0()); }
	(rule__FunctionName__Func_nameAssignment_0)
	{ after(grammarAccess.getFunctionNameAccess().getFunc_nameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionNameAccess().getLeftParenthesisRightParenthesisKeyword_1()); }
	'()'
	{ after(grammarAccess.getFunctionNameAccess().getLeftParenthesisRightParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Drone__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Drone__Group__0__Impl
	rule__Drone__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Drone__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDroneAccess().getDRONEKeyword_0()); }
	'DRONE'
	{ after(grammarAccess.getDroneAccess().getDRONEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Drone__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Drone__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Drone__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDroneAccess().getVectorAssignment_1()); }
	(rule__Drone__VectorAssignment_1)
	{ after(grammarAccess.getDroneAccess().getVectorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Object__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group_0__0__Impl
	rule__Object__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getObject_nameAssignment_0_0()); }
	(rule__Object__Object_nameAssignment_0_0)
	{ after(grammarAccess.getObjectAccess().getObject_nameAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group_0__1__Impl
	rule__Object__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getLeftCurlyBracketKeyword_0_1()); }
	'{'
	{ after(grammarAccess.getObjectAccess().getLeftCurlyBracketKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getOriginAssignment_0_2()); }
	(rule__Object__OriginAssignment_0_2)
	{ after(grammarAccess.getObjectAccess().getOriginAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Object__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group_2__0__Impl
	rule__Object__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getColorAssignment_2_0()); }
	(rule__Object__ColorAssignment_2_0)?
	{ after(grammarAccess.getObjectAccess().getColorAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getRightCurlyBracketKeyword_2_1()); }
	'}'
	{ after(grammarAccess.getObjectAccess().getRightCurlyBracketKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Origin__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Origin__Group__0__Impl
	rule__Origin__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOriginAccess().getOriginKeyword_0()); }
	'origin'
	{ after(grammarAccess.getOriginAccess().getOriginKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Origin__Group__1__Impl
	rule__Origin__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOriginAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getOriginAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Origin__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOriginAccess().getVectorAssignment_2()); }
	(rule__Origin__VectorAssignment_2)
	{ after(grammarAccess.getOriginAccess().getVectorAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Size__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Size__Group__0__Impl
	rule__Size__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSizeAccess().getSizeKeyword_0()); }
	'size'
	{ after(grammarAccess.getSizeAccess().getSizeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Size__Group__1__Impl
	rule__Size__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSizeAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getSizeAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Size__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSizeAccess().getVectorAssignment_2()); }
	(rule__Size__VectorAssignment_2)
	{ after(grammarAccess.getSizeAccess().getVectorAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Vector__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vector__Group__0__Impl
	rule__Vector__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVectorAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getVectorAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vector__Group__1__Impl
	rule__Vector__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVectorAccess().getXAssignment_1()); }
	(rule__Vector__XAssignment_1)
	{ after(grammarAccess.getVectorAccess().getXAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vector__Group__2__Impl
	rule__Vector__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVectorAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getVectorAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vector__Group__3__Impl
	rule__Vector__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVectorAccess().getYAssignment_3()); }
	(rule__Vector__YAssignment_3)
	{ after(grammarAccess.getVectorAccess().getYAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vector__Group__4__Impl
	rule__Vector__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVectorAccess().getCommaKeyword_4()); }
	','
	{ after(grammarAccess.getVectorAccess().getCommaKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vector__Group__5__Impl
	rule__Vector__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVectorAccess().getZAssignment_5()); }
	(rule__Vector__ZAssignment_5)
	{ after(grammarAccess.getVectorAccess().getZAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vector__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVectorAccess().getRightParenthesisKeyword_6()); }
	')'
	{ after(grammarAccess.getVectorAccess().getRightParenthesisKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Color__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Color__Group__0__Impl
	rule__Color__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Color__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorAccess().getColorKeyword_0()); }
	'color'
	{ after(grammarAccess.getColorAccess().getColorKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Color__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Color__Group__1__Impl
	rule__Color__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Color__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getColorAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Color__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Color__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Color__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorAccess().getColor_valueAssignment_2()); }
	(rule__Color__Color_valueAssignment_2)
	{ after(grammarAccess.getColorAccess().getColor_valueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Walls__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Walls__Group_0__0__Impl
	rule__Walls__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Walls__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWallsAccess().getWALLSKeyword_0_0()); }
	'WALLS'
	{ after(grammarAccess.getWallsAccess().getWALLSKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Walls__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Walls__Group_0__1__Impl
	rule__Walls__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Walls__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWallsAccess().getLeftCurlyBracketKeyword_0_1()); }
	'{'
	{ after(grammarAccess.getWallsAccess().getLeftCurlyBracketKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Walls__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Walls__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Walls__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWallsAccess().getFrontAssignment_0_2()); }
	(rule__Walls__FrontAssignment_0_2)
	{ after(grammarAccess.getWallsAccess().getFrontAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Walls__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Walls__Group_4__0__Impl
	rule__Walls__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Walls__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWallsAccess().getUpAssignment_4_0()); }
	(rule__Walls__UpAssignment_4_0)
	{ after(grammarAccess.getWallsAccess().getUpAssignment_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Walls__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Walls__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Walls__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWallsAccess().getRightCurlyBracketKeyword_4_1()); }
	'}'
	{ after(grammarAccess.getWallsAccess().getRightCurlyBracketKeyword_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Front__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Front__Group__0__Impl
	rule__Front__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Front__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFrontAccess().getFrontKeyword_0()); }
	'front'
	{ after(grammarAccess.getFrontAccess().getFrontKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Front__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Front__Group__1__Impl
	rule__Front__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Front__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFrontAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getFrontAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Front__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Front__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Front__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFrontAccess().getValueAssignment_2()); }
	(rule__Front__ValueAssignment_2)
	{ after(grammarAccess.getFrontAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Right__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Right__Group__0__Impl
	rule__Right__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightAccess().getRightKeyword_0()); }
	'right'
	{ after(grammarAccess.getRightAccess().getRightKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Right__Group__1__Impl
	rule__Right__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getRightAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Right__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightAccess().getValueAssignment_2()); }
	(rule__Right__ValueAssignment_2)
	{ after(grammarAccess.getRightAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Left__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Left__Group__0__Impl
	rule__Left__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftAccess().getLeftKeyword_0()); }
	'left'
	{ after(grammarAccess.getLeftAccess().getLeftKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Left__Group__1__Impl
	rule__Left__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getLeftAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Left__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftAccess().getValueAssignment_2()); }
	(rule__Left__ValueAssignment_2)
	{ after(grammarAccess.getLeftAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Back__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Back__Group__0__Impl
	rule__Back__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Back__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBackAccess().getBackKeyword_0()); }
	'back'
	{ after(grammarAccess.getBackAccess().getBackKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Back__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Back__Group__1__Impl
	rule__Back__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Back__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBackAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getBackAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Back__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Back__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Back__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBackAccess().getValueAssignment_2()); }
	(rule__Back__ValueAssignment_2)
	{ after(grammarAccess.getBackAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Up__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Up__Group__0__Impl
	rule__Up__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Up__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpAccess().getUpKeyword_0()); }
	'up'
	{ after(grammarAccess.getUpAccess().getUpKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Up__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Up__Group__1__Impl
	rule__Up__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Up__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getUpAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Up__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Up__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Up__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpAccess().getValueAssignment_2()); }
	(rule__Up__ValueAssignment_2)
	{ after(grammarAccess.getUpAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Object__UnorderedGroup
	@init {
		int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getObjectAccess().getUnorderedGroup());
	}
:
	rule__Object__UnorderedGroup__0
	{getUnorderedGroupHelper().canLeave(grammarAccess.getObjectAccess().getUnorderedGroup())}?
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getObjectAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}

rule__Object__UnorderedGroup__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
	}
:
		(
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getObjectAccess().getUnorderedGroup(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getObjectAccess().getUnorderedGroup(), 0);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getObjectAccess().getGroup_0()); }
					(rule__Object__Group_0__0)
					{ after(grammarAccess.getObjectAccess().getGroup_0()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getObjectAccess().getUnorderedGroup(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getObjectAccess().getUnorderedGroup(), 1);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getObjectAccess().getSizeAssignment_1()); }
					(rule__Object__SizeAssignment_1)
					{ after(grammarAccess.getObjectAccess().getSizeAssignment_1()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getObjectAccess().getUnorderedGroup(), 2)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getObjectAccess().getUnorderedGroup(), 2);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getObjectAccess().getGroup_2()); }
					(rule__Object__Group_2__0)
					{ after(grammarAccess.getObjectAccess().getGroup_2()); }
				)
			)
		)
		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getObjectAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}

rule__Object__UnorderedGroup__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__UnorderedGroup__Impl
	rule__Object__UnorderedGroup__1?
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__UnorderedGroup__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__UnorderedGroup__Impl
	rule__Object__UnorderedGroup__2?
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__UnorderedGroup__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__UnorderedGroup__Impl
;
finally {
	restoreStackSize(stackSize);
}


rule__Walls__UnorderedGroup
	@init {
		int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getWallsAccess().getUnorderedGroup());
	}
:
	rule__Walls__UnorderedGroup__0
	{getUnorderedGroupHelper().canLeave(grammarAccess.getWallsAccess().getUnorderedGroup())}?
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getWallsAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}

rule__Walls__UnorderedGroup__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
	}
:
		(
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getWallsAccess().getUnorderedGroup(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getWallsAccess().getUnorderedGroup(), 0);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getWallsAccess().getGroup_0()); }
					(rule__Walls__Group_0__0)
					{ after(grammarAccess.getWallsAccess().getGroup_0()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getWallsAccess().getUnorderedGroup(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getWallsAccess().getUnorderedGroup(), 1);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getWallsAccess().getRightAssignment_1()); }
					(rule__Walls__RightAssignment_1)
					{ after(grammarAccess.getWallsAccess().getRightAssignment_1()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getWallsAccess().getUnorderedGroup(), 2)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getWallsAccess().getUnorderedGroup(), 2);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getWallsAccess().getBackAssignment_2()); }
					(rule__Walls__BackAssignment_2)
					{ after(grammarAccess.getWallsAccess().getBackAssignment_2()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getWallsAccess().getUnorderedGroup(), 3)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getWallsAccess().getUnorderedGroup(), 3);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getWallsAccess().getLeftAssignment_3()); }
					(rule__Walls__LeftAssignment_3)
					{ after(grammarAccess.getWallsAccess().getLeftAssignment_3()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getWallsAccess().getUnorderedGroup(), 4)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getWallsAccess().getUnorderedGroup(), 4);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getWallsAccess().getGroup_4()); }
					(rule__Walls__Group_4__0)
					{ after(grammarAccess.getWallsAccess().getGroup_4()); }
				)
			)
		)
		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getWallsAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}

rule__Walls__UnorderedGroup__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Walls__UnorderedGroup__Impl
	rule__Walls__UnorderedGroup__1?
;
finally {
	restoreStackSize(stackSize);
}

rule__Walls__UnorderedGroup__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Walls__UnorderedGroup__Impl
	rule__Walls__UnorderedGroup__2?
;
finally {
	restoreStackSize(stackSize);
}

rule__Walls__UnorderedGroup__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Walls__UnorderedGroup__Impl
	rule__Walls__UnorderedGroup__3?
;
finally {
	restoreStackSize(stackSize);
}

rule__Walls__UnorderedGroup__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Walls__UnorderedGroup__Impl
	rule__Walls__UnorderedGroup__4?
;
finally {
	restoreStackSize(stackSize);
}

rule__Walls__UnorderedGroup__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Walls__UnorderedGroup__Impl
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__MainAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getMainMainParserRuleCall_0()); }
		ruleMain
		{ after(grammarAccess.getProgramAccess().getMainMainParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__FlyAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMainAccess().getFlyFlyParserRuleCall_0_0()); }
		ruleFly
		{ after(grammarAccess.getMainAccess().getFlyFlyParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__EnvironmentAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMainAccess().getEnvironmentEnvironmentParserRuleCall_1_0()); }
		ruleEnvironment
		{ after(grammarAccess.getMainAccess().getEnvironmentEnvironmentParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__TakeoffAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFlyAccess().getTakeoffTakeoffParserRuleCall_1_0_0()); }
		ruleTakeoff
		{ after(grammarAccess.getFlyAccess().getTakeoffTakeoffParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__CommandsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFlyAccess().getCommandsSuperCommandParserRuleCall_1_1_0()); }
		ruleSuperCommand
		{ after(grammarAccess.getFlyAccess().getCommandsSuperCommandParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fly__LandAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFlyAccess().getLandLandParserRuleCall_1_2_0()); }
		ruleLand
		{ after(grammarAccess.getFlyAccess().getLandLandParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__DroneAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnvironmentAccess().getDroneDroneParserRuleCall_2_0_0()); }
		ruleDrone
		{ after(grammarAccess.getEnvironmentAccess().getDroneDroneParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__WallsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnvironmentAccess().getWallsWallsParserRuleCall_2_1_0()); }
		ruleWalls
		{ after(grammarAccess.getEnvironmentAccess().getWallsWallsParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Environment__ObjectsAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnvironmentAccess().getObjectsObjectParserRuleCall_2_2_0()); }
		ruleObject
		{ after(grammarAccess.getEnvironmentAccess().getObjectsObjectParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FlyTo__Object_nameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFlyToAccess().getObject_nameSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getFlyToAccess().getObject_nameSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Move__VectorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveAccess().getVectorVectorParserRuleCall_1_0()); }
		ruleVector
		{ after(grammarAccess.getMoveAccess().getVectorVectorParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rotate__AngleAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRotateAccess().getAngleDOUBLEParserRuleCall_2_0()); }
		ruleDOUBLE
		{ after(grammarAccess.getRotateAccess().getAngleDOUBLEParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wait__SecondsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWaitAccess().getSecondsPOSITIVE_DOUBLEParserRuleCall_2_0()); }
		rulePOSITIVE_DOUBLE
		{ after(grammarAccess.getWaitAccess().getSecondsPOSITIVE_DOUBLEParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionName__Func_nameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionNameAccess().getFunc_nameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionNameAccess().getFunc_nameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Drone__VectorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDroneAccess().getVectorVectorParserRuleCall_1_0()); }
		ruleVector
		{ after(grammarAccess.getDroneAccess().getVectorVectorParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Object_nameAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getObject_nameIDTerminalRuleCall_0_0_0()); }
		RULE_ID
		{ after(grammarAccess.getObjectAccess().getObject_nameIDTerminalRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__OriginAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getOriginOriginParserRuleCall_0_2_0()); }
		ruleOrigin
		{ after(grammarAccess.getObjectAccess().getOriginOriginParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__SizeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getSizeSizeParserRuleCall_1_0()); }
		ruleSize
		{ after(grammarAccess.getObjectAccess().getSizeSizeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__ColorAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getColorColorParserRuleCall_2_0_0()); }
		ruleColor
		{ after(grammarAccess.getObjectAccess().getColorColorParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__VectorAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOriginAccess().getVectorVectorParserRuleCall_2_0()); }
		ruleVector
		{ after(grammarAccess.getOriginAccess().getVectorVectorParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__VectorAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSizeAccess().getVectorVectorParserRuleCall_2_0()); }
		ruleVector
		{ after(grammarAccess.getSizeAccess().getVectorVectorParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__XAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVectorAccess().getXDOUBLEParserRuleCall_1_0()); }
		ruleDOUBLE
		{ after(grammarAccess.getVectorAccess().getXDOUBLEParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__YAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVectorAccess().getYDOUBLEParserRuleCall_3_0()); }
		ruleDOUBLE
		{ after(grammarAccess.getVectorAccess().getYDOUBLEParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__ZAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVectorAccess().getZDOUBLEParserRuleCall_5_0()); }
		ruleDOUBLE
		{ after(grammarAccess.getVectorAccess().getZDOUBLEParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Color__Color_valueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColorAccess().getColor_valueSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getColorAccess().getColor_valueSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Walls__FrontAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWallsAccess().getFrontFrontParserRuleCall_0_2_0()); }
		ruleFront
		{ after(grammarAccess.getWallsAccess().getFrontFrontParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Walls__RightAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWallsAccess().getRightRightParserRuleCall_1_0()); }
		ruleRight
		{ after(grammarAccess.getWallsAccess().getRightRightParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Walls__BackAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWallsAccess().getBackBackParserRuleCall_2_0()); }
		ruleBack
		{ after(grammarAccess.getWallsAccess().getBackBackParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Walls__LeftAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWallsAccess().getLeftLeftParserRuleCall_3_0()); }
		ruleLeft
		{ after(grammarAccess.getWallsAccess().getLeftLeftParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Walls__UpAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWallsAccess().getUpUpParserRuleCall_4_0_0()); }
		ruleUp
		{ after(grammarAccess.getWallsAccess().getUpUpParserRuleCall_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Front__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFrontAccess().getValuePOSITIVE_DOUBLEParserRuleCall_2_0()); }
		rulePOSITIVE_DOUBLE
		{ after(grammarAccess.getFrontAccess().getValuePOSITIVE_DOUBLEParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Right__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRightAccess().getValuePOSITIVE_DOUBLEParserRuleCall_2_0()); }
		rulePOSITIVE_DOUBLE
		{ after(grammarAccess.getRightAccess().getValuePOSITIVE_DOUBLEParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Left__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeftAccess().getValuePOSITIVE_DOUBLEParserRuleCall_2_0()); }
		rulePOSITIVE_DOUBLE
		{ after(grammarAccess.getLeftAccess().getValuePOSITIVE_DOUBLEParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Back__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBackAccess().getValuePOSITIVE_DOUBLEParserRuleCall_2_0()); }
		rulePOSITIVE_DOUBLE
		{ after(grammarAccess.getBackAccess().getValuePOSITIVE_DOUBLEParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Up__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpAccess().getValuePOSITIVE_DOUBLEParserRuleCall_2_0()); }
		rulePOSITIVE_DOUBLE
		{ after(grammarAccess.getUpAccess().getValuePOSITIVE_DOUBLEParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
