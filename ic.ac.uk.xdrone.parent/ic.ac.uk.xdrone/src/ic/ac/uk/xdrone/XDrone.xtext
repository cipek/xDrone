grammar ic.ac.uk.xdrone.XDrone with org.eclipse.xtext.common.Terminals

generate xDrone "http://www.ac.ic/uk/xdrone/XDrone"

Program :
  main = Main
;
  
  
Main:
	fly = Fly
	environment = Environment?
;

Fly :
	
  'fly(){'
	((takeoff+=Takeoff)
 		((commands+=SuperCommand))*
	(land+=Land))
  '}'
;

  
Environment :
 
 {Environment} 'environment(){'
 	 (drone+=Drone | walls+=Walls | objects+=Object)*
// 	(drone+=Drone)?
//  	((objects+=Object))*
  '}'
   
 ;


//UserFunction:
//	(name = ID) '()'
//	'{'
//	(func+=Command)*
//	'}'
//;


Takeoff: 'TAKEOFF()';
Land : 'LAND()';

SuperCommand:
	Command
//	| FunctionName
;

Command:
	Up 
	| Down 
	| Left 
	| Right 
	| Forward 
	| Backward
//	| RotateL
//	| RotateR
	| Wait
//	| Move
	| Rotate
	| GoTo
;

DOUBLE:
	'-' POSITIVE_DOUBLE
	| POSITIVE_DOUBLE
;

POSITIVE_DOUBLE:
	INT '.' INT
	| INT
;

GoTo:
	'GOTO' '(' object_name = STRING ')'
;

//Move:
//	'MOVE' vector=Vector
//;

Rotate: 
	'ROTATE' '('angle = DOUBLE')'
;

Up: 
	'UP' '('distance = DOUBLE')'
;
	
Down: 
	'DOWN' '('distance = DOUBLE')'
;
Left: 
	'LEFT' '('distance = DOUBLE')'
;
Right: 
	'RIGHT' '('distance = DOUBLE')'
;
Forward: 
	'FORWARD' '('distance = DOUBLE')'
;
Backward: 
	'BACKWARD' '('distance = DOUBLE')'
;
//RotateL: 
//	'ROTATELEFT' '('angle = INT')'
//;
//RotateR: 
//	'ROTATERIGHT' '('angle = INT')'
//;
Wait:
	'WAIT' '(' seconds = POSITIVE_DOUBLE ')'
;

//FunctionName:
//	func_name = ID '()'
//;


Drone:
//	'DRONE' vector=Vector
	'DRONE' '{'
		(position=Position | ('rotation' '=' rotation = DOUBLE))*
	'}'
;

Object:
//	object_name = ID '(' sx = DOUBLE ',' sz = DOUBLE ',' sy = DOUBLE ',' lx = DOUBLE ',' lz = DOUBLE ',' ly = DOUBLE')' 
	object_name = ID '{'
		(origin=Origin | size=Size | color=Color)*
	'}'
;

Origin:
	'origin' '=' vector=Vector
;

Size:
	'size' '=' vector=Vector
;

Position:
	'position' '=' vector=Vector
;

Vector:
	'(' x = DOUBLE ',' y = DOUBLE ',' z = DOUBLE ')'
;

Color:
	'color' '=' color_value = STRING
	
;

Walls:
//	'WALLS' '(' front = POSITIVE_DOUBLE ',' right = POSITIVE_DOUBLE ','  back = POSITIVE_DOUBLE ',' left = POSITIVE_DOUBLE ')'
	'WALLS' '{'
		(front = FrontWall | right = RightWall | back = BackWall | left = LeftWall | up = UpWall)*
	'}'
;

FrontWall:
	'front' '=' value = POSITIVE_DOUBLE
;

RightWall:
	'right' '=' value = POSITIVE_DOUBLE
;

LeftWall:
	'left' '=' value = POSITIVE_DOUBLE
;

BackWall:
	'back' '=' value = POSITIVE_DOUBLE
;

UpWall:
	'up' '=' value = POSITIVE_DOUBLE
;