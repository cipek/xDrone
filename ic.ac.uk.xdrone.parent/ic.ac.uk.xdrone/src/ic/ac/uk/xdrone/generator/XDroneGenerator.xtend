/*
 * generated by Xtext 2.17.0
 */
package ic.ac.uk.xdrone.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import ic.ac.uk.xdrone.xDrone.Main
import ic.ac.uk.xdrone.xDrone.Command
import ic.ac.uk.xdrone.xDrone.Up
import ic.ac.uk.xdrone.xDrone.Down
import ic.ac.uk.xdrone.xDrone.Left
import ic.ac.uk.xdrone.xDrone.Right
import ic.ac.uk.xdrone.xDrone.Forward
import ic.ac.uk.xdrone.xDrone.Backward
import ic.ac.uk.xdrone.xDrone.RotateL
import ic.ac.uk.xdrone.xDrone.RotateR
import ic.ac.uk.xdrone.xDrone.Wait
import java.io.PrintWriter
import java.io.IOException
import java.io.File

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class XDroneGenerator extends AbstractGenerator {

	def compile(Main main)'''
		#! /usr/bin/env python
		import sys
		sys.path.append('/opt/ros/indigo/lib/python2.7/dist-packages')
		import rospy
		
		from std_msgs.msg import Empty
		from ardrone_autonomy.msg import Navdata	
		from geometry_msgs.msg import Twist	
		PI = 3.1415926535897
		
		state = -1;
		
		def ReceiveNavdata(data):
			global state
			state = data.state
			
			def rotate(speed, angle, clockwise):
				vel_msg = Twist()
				velocity_publisher = rospy.Publisher('/cmd_vel', Twist, queue_size=1)
			
				angular_speed = speed*PI/360
				relative_angle = angle*PI/360
			
				vel_msg.linear.x=0
				vel_msg.linear.y=0
				vel_msg.linear.z=0
				vel_msg.angular.x = 0
				vel_msg.angular.y = 0
			
				if clockwise:
					vel_msg.angular.z = -abs(angular_speed)
				else:
					vel_msg.angular.z = abs(angular_speed)
			
				t0 = rospy.Time.now().to_sec()
				current_angle = 0
			
				while velocity_publisher.get_num_connections() < 1:
					rospy.sleep(0.1)
			
				while(current_angle < relative_angle):
					velocity_publisher.publish(vel_msg)
					t1 = rospy.Time.now().to_sec()
					current_angle = angular_speed*(t1-t0)
			
				vel_msg.angular.z = 0
				velocity_publisher.publish(vel_msg)
			
			
			#direction (true)- forward, left, up
			def move(speed, distance, direction, axis): 
				vel_msg = Twist()
				velocity_publisher = rospy.Publisher('/cmd_vel', Twist, queue_size=1)
			
				vel_msg.linear.x=0
				vel_msg.linear.y=0
				vel_msg.linear.z=0
				vel_msg.angular.x = 0
				vel_msg.angular.y = 0
				vel_msg.angular.z = 0
			
				if axis == "x":
					if direction:
						vel_msg.linear.x = abs(speed)
					else:
						vel_msg.linear.x = -abs(speed)
				elif axis == "y":
					if direction:
						vel_msg.linear.y = abs(speed)
					else:
						vel_msg.linear.y = -abs(speed)
				elif axis == "z":
					if direction:
						vel_msg.linear.z = abs(speed)
					else:
						vel_msg.linear.z = -abs(speed)
			
			
				while velocity_publisher.get_num_connections() < 1:
					rospy.sleep(0.1)
			
				t0 = rospy.Time.now().to_sec()
				current_distance = 0
			
				while(current_distance < distance):
					velocity_publisher.publish(vel_msg)
					t1 = rospy.Time.now().to_sec()
					current_distance = speed*(t1-t0)
			
				vel_msg.linear.x=0
				vel_msg.linear.y=0
				vel_msg.linear.z=0
				velocity_publisher.publish(vel_msg)
				
		
		rospy.init_node('test_node')
		empty = Empty()
		rospy.Subscriber('/ardrone/navdata', Navdata, ReceiveNavdata)
		
		while state == -1:
			rospy.sleep(0.1)
		
		if state == 0:
			reset = rospy.Publisher('/ardrone/reset', Empty, queue_size=1)
			while reset.get_num_connections() < 1:
				rospy.sleep(0.1)
			reset.publish(empty)
		
		while state == 0:
			rospy.sleep(0.1)
		
		«FOR to : main.takeoff»  
			takeoff = rospy.Publisher('/ardrone/takeoff', Empty, queue_size=1)
			
			while takeoff.get_num_connections() < 1:
				rospy.sleep(0.1)
			
			takeoff.publish(empty)
			rospy.sleep(5)
		«ENDFOR»
		
		«FOR f : main.commands»
			«IF f instanceof Command»
				«f.compile»
			«ENDIF»
		«ENDFOR»
		
		«FOR to : main.land»  
			land = rospy.Publisher('/ardrone/land', Empty, queue_size=1)
						
			while land.get_num_connections() < 1:
				rospy.sleep(0.1)
			
			land.publish(empty)
		«ENDFOR»
	'''
	
	def compile(Command cmd) '''
		«IF cmd instanceof Up »
		move(0.1, «cmd.distance», True, "z")
	  	«ENDIF»
	  	«IF cmd instanceof Down»
	  	move(0.1, «cmd.distance», False, "z")
	  	«ENDIF»
	  	«IF cmd instanceof Left »
	  	move(0.1, «cmd.distance», True, "y")
	  	«ENDIF»
	  	«IF cmd instanceof Right»
	  	move(0.1, «cmd.distance», False, "y")
	  	«ENDIF»
	  	«IF cmd instanceof Forward»	
	  	move(0.1, «cmd.distance», True, "x")
	  	«ENDIF»
	  	«IF cmd instanceof Backward»	
	  	move(0.1, «cmd.distance», False, "x")
	  	«ENDIF»
	  	«IF cmd instanceof RotateL»	
		rotate(30, «cmd.angle», False)
	  	«ENDIF»
	  	«IF cmd instanceof RotateR»	
	  	rotate(30, «cmd.angle», True)
	  	«ENDIF»
	  	«IF cmd instanceof Wait»
	  	rospy.sleep(«cmd.seconds»)
	  	«ENDIF»
	'''


	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var result = "";
		System.out.println("IN GENERATE: " + resource);
		for(main : resource.allContents.toIterable.filter(Main)) {
			
			System.out.println("IN for: " + main);
			result = main.compile.toString; 
			System.out.println("BEFORE2: " + result);
			fsa.generateFile('/xdrone/result.py', result)
		}
		
		try {
			//System.out.println("IN TRY 1: " + result);
			var file = new File("/xdrone/result.py");
			file.getParentFile().mkdirs();
			
			
			var writer = new PrintWriter(file, "UTF-8");
		    //var writer = new PrintWriter("result.py", "UTF-8"); 
		    writer.println(result);
		    writer.close();   
			System.out.println("IN TRY 2");
		} catch (IOException e) {
		   // do something
			System.out.println("IN ERROR: " + e.toString());
		}
		
		fsa.generateFile('result.py', result)
	}
}