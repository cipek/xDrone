/*
 * generated by Xtext 2.17.0
 */
grammar InternalXDrone;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package ic.ac.uk.xdrone.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package ic.ac.uk.xdrone.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ic.ac.uk.xdrone.services.XDroneGrammarAccess;

}

@parser::members {

 	private XDroneGrammarAccess grammarAccess;

    public InternalXDroneParser(TokenStream input, XDroneGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected XDroneGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getProgramAccess().getMainMainParserRuleCall_0());
			}
			lv_main_0_0=ruleMain
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getProgramRule());
				}
				set(
					$current,
					"main",
					lv_main_0_0,
					"ic.ac.uk.xdrone.XDrone.Main");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleMain
entryRuleMain returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMainRule()); }
	iv_ruleMain=ruleMain
	{ $current=$iv_ruleMain.current; }
	EOF;

// Rule Main
ruleMain returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMainAccess().getFlyFlyParserRuleCall_0_0());
				}
				lv_fly_0_0=ruleFly
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMainRule());
					}
					set(
						$current,
						"fly",
						lv_fly_0_0,
						"ic.ac.uk.xdrone.XDrone.Fly");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMainAccess().getEnvironmentEnvironmentParserRuleCall_1_0());
				}
				lv_environment_1_0=ruleEnvironment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMainRule());
					}
					set(
						$current,
						"environment",
						lv_environment_1_0,
						"ic.ac.uk.xdrone.XDrone.Environment");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleFly
entryRuleFly returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFlyRule()); }
	iv_ruleFly=ruleFly
	{ $current=$iv_ruleFly.current; }
	EOF;

// Rule Fly
ruleFly returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='fly(){'
		{
			newLeafNode(otherlv_0, grammarAccess.getFlyAccess().getFlyKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFlyAccess().getTakeoffTakeoffParserRuleCall_1_0_0());
					}
					lv_takeoff_1_0=ruleTakeoff
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFlyRule());
						}
						add(
							$current,
							"takeoff",
							lv_takeoff_1_0,
							"ic.ac.uk.xdrone.XDrone.Takeoff");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFlyAccess().getCommandsSuperCommandParserRuleCall_1_1_0());
					}
					lv_commands_2_0=ruleSuperCommand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFlyRule());
						}
						add(
							$current,
							"commands",
							lv_commands_2_0,
							"ic.ac.uk.xdrone.XDrone.SuperCommand");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			(
				(
					{
						newCompositeNode(grammarAccess.getFlyAccess().getLandLandParserRuleCall_1_2_0());
					}
					lv_land_3_0=ruleLand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFlyRule());
						}
						add(
							$current,
							"land",
							lv_land_3_0,
							"ic.ac.uk.xdrone.XDrone.Land");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getFlyAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleEnvironment
entryRuleEnvironment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnvironmentRule()); }
	iv_ruleEnvironment=ruleEnvironment
	{ $current=$iv_ruleEnvironment.current; }
	EOF;

// Rule Environment
ruleEnvironment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEnvironmentAccess().getEnvironmentAction_0(),
					$current);
			}
		)
		otherlv_1='environment(){'
		{
			newLeafNode(otherlv_1, grammarAccess.getEnvironmentAccess().getEnvironmentKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getEnvironmentAccess().getDroneDroneParserRuleCall_2_0_0());
					}
					lv_drone_2_0=ruleDrone
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEnvironmentRule());
						}
						add(
							$current,
							"drone",
							lv_drone_2_0,
							"ic.ac.uk.xdrone.XDrone.Drone");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getEnvironmentAccess().getWallsWallsParserRuleCall_2_1_0());
					}
					lv_walls_3_0=ruleWalls
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEnvironmentRule());
						}
						add(
							$current,
							"walls",
							lv_walls_3_0,
							"ic.ac.uk.xdrone.XDrone.Walls");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getEnvironmentAccess().getObjectsObjectParserRuleCall_2_2_0());
					}
					lv_objects_4_0=ruleObject
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEnvironmentRule());
						}
						add(
							$current,
							"objects",
							lv_objects_4_0,
							"ic.ac.uk.xdrone.XDrone.Object");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getEnvironmentAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleTakeoff
entryRuleTakeoff returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTakeoffRule()); }
	iv_ruleTakeoff=ruleTakeoff
	{ $current=$iv_ruleTakeoff.current.getText(); }
	EOF;

// Rule Takeoff
ruleTakeoff returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='TAKEOFF()'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getTakeoffAccess().getTAKEOFFKeyword());
	}
;

// Entry rule entryRuleLand
entryRuleLand returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLandRule()); }
	iv_ruleLand=ruleLand
	{ $current=$iv_ruleLand.current.getText(); }
	EOF;

// Rule Land
ruleLand returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='LAND()'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getLandAccess().getLANDKeyword());
	}
;

// Entry rule entryRuleSuperCommand
entryRuleSuperCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSuperCommandRule()); }
	iv_ruleSuperCommand=ruleSuperCommand
	{ $current=$iv_ruleSuperCommand.current; }
	EOF;

// Rule SuperCommand
ruleSuperCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSuperCommandAccess().getCommandParserRuleCall_0());
		}
		this_Command_0=ruleCommand
		{
			$current = $this_Command_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSuperCommandAccess().getFunctionNameParserRuleCall_1());
		}
		this_FunctionName_1=ruleFunctionName
		{
			$current = $this_FunctionName_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	iv_ruleCommand=ruleCommand
	{ $current=$iv_ruleCommand.current; }
	EOF;

// Rule Command
ruleCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCommandAccess().getWaitParserRuleCall_0());
		}
		this_Wait_0=ruleWait
		{
			$current = $this_Wait_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getMoveParserRuleCall_1());
		}
		this_Move_1=ruleMove
		{
			$current = $this_Move_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getRotateParserRuleCall_2());
		}
		this_Rotate_2=ruleRotate
		{
			$current = $this_Rotate_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getFlyToParserRuleCall_3());
		}
		this_FlyTo_3=ruleFlyTo
		{
			$current = $this_FlyTo_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDOUBLE
entryRuleDOUBLE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDOUBLERule()); }
	iv_ruleDOUBLE=ruleDOUBLE
	{ $current=$iv_ruleDOUBLE.current.getText(); }
	EOF;

// Rule DOUBLE
ruleDOUBLE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDOUBLEAccess().getHyphenMinusKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getDOUBLEAccess().getPOSITIVE_DOUBLEParserRuleCall_0_1());
			}
			this_POSITIVE_DOUBLE_1=rulePOSITIVE_DOUBLE
			{
				$current.merge(this_POSITIVE_DOUBLE_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getDOUBLEAccess().getPOSITIVE_DOUBLEParserRuleCall_1());
		}
		this_POSITIVE_DOUBLE_2=rulePOSITIVE_DOUBLE
		{
			$current.merge(this_POSITIVE_DOUBLE_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePOSITIVE_DOUBLE
entryRulePOSITIVE_DOUBLE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPOSITIVE_DOUBLERule()); }
	iv_rulePOSITIVE_DOUBLE=rulePOSITIVE_DOUBLE
	{ $current=$iv_rulePOSITIVE_DOUBLE.current.getText(); }
	EOF;

// Rule POSITIVE_DOUBLE
rulePOSITIVE_DOUBLE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_INT_0=RULE_INT
			{
				$current.merge(this_INT_0);
			}
			{
				newLeafNode(this_INT_0, grammarAccess.getPOSITIVE_DOUBLEAccess().getINTTerminalRuleCall_0_0());
			}
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPOSITIVE_DOUBLEAccess().getFullStopKeyword_0_1());
			}
			this_INT_2=RULE_INT
			{
				$current.merge(this_INT_2);
			}
			{
				newLeafNode(this_INT_2, grammarAccess.getPOSITIVE_DOUBLEAccess().getINTTerminalRuleCall_0_2());
			}
		)
		    |
		this_INT_3=RULE_INT
		{
			$current.merge(this_INT_3);
		}
		{
			newLeafNode(this_INT_3, grammarAccess.getPOSITIVE_DOUBLEAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleFlyTo
entryRuleFlyTo returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFlyToRule()); }
	iv_ruleFlyTo=ruleFlyTo
	{ $current=$iv_ruleFlyTo.current; }
	EOF;

// Rule FlyTo
ruleFlyTo returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='FLYTO'
		{
			newLeafNode(otherlv_0, grammarAccess.getFlyToAccess().getFLYTOKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getFlyToAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_object_name_2_0=RULE_STRING
				{
					newLeafNode(lv_object_name_2_0, grammarAccess.getFlyToAccess().getObject_nameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFlyToRule());
					}
					setWithLastConsumed(
						$current,
						"object_name",
						lv_object_name_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getFlyToAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleMove
entryRuleMove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoveRule()); }
	iv_ruleMove=ruleMove
	{ $current=$iv_ruleMove.current; }
	EOF;

// Rule Move
ruleMove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='MOVE'
		{
			newLeafNode(otherlv_0, grammarAccess.getMoveAccess().getMOVEKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMoveAccess().getVectorVectorParserRuleCall_1_0());
				}
				lv_vector_1_0=ruleVector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMoveRule());
					}
					set(
						$current,
						"vector",
						lv_vector_1_0,
						"ic.ac.uk.xdrone.XDrone.Vector");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRotate
entryRuleRotate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRotateRule()); }
	iv_ruleRotate=ruleRotate
	{ $current=$iv_ruleRotate.current; }
	EOF;

// Rule Rotate
ruleRotate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ROTATE'
		{
			newLeafNode(otherlv_0, grammarAccess.getRotateAccess().getROTATEKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getRotateAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRotateAccess().getAngleDOUBLEParserRuleCall_2_0());
				}
				lv_angle_2_0=ruleDOUBLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRotateRule());
					}
					set(
						$current,
						"angle",
						lv_angle_2_0,
						"ic.ac.uk.xdrone.XDrone.DOUBLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getRotateAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleWait
entryRuleWait returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWaitRule()); }
	iv_ruleWait=ruleWait
	{ $current=$iv_ruleWait.current; }
	EOF;

// Rule Wait
ruleWait returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='WAIT'
		{
			newLeafNode(otherlv_0, grammarAccess.getWaitAccess().getWAITKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getWaitAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWaitAccess().getSecondsPOSITIVE_DOUBLEParserRuleCall_2_0());
				}
				lv_seconds_2_0=rulePOSITIVE_DOUBLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWaitRule());
					}
					set(
						$current,
						"seconds",
						lv_seconds_2_0,
						"ic.ac.uk.xdrone.XDrone.POSITIVE_DOUBLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getWaitAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleFunctionName
entryRuleFunctionName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionNameRule()); }
	iv_ruleFunctionName=ruleFunctionName
	{ $current=$iv_ruleFunctionName.current; }
	EOF;

// Rule FunctionName
ruleFunctionName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_func_name_0_0=RULE_ID
				{
					newLeafNode(lv_func_name_0_0, grammarAccess.getFunctionNameAccess().getFunc_nameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionNameRule());
					}
					setWithLastConsumed(
						$current,
						"func_name",
						lv_func_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='()'
		{
			newLeafNode(otherlv_1, grammarAccess.getFunctionNameAccess().getLeftParenthesisRightParenthesisKeyword_1());
		}
	)
;

// Entry rule entryRuleDrone
entryRuleDrone returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDroneRule()); }
	iv_ruleDrone=ruleDrone
	{ $current=$iv_ruleDrone.current; }
	EOF;

// Rule Drone
ruleDrone returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='DRONE'
		{
			newLeafNode(otherlv_0, grammarAccess.getDroneAccess().getDRONEKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDroneAccess().getVectorVectorParserRuleCall_1_0());
				}
				lv_vector_1_0=ruleVector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDroneRule());
					}
					set(
						$current,
						"vector",
						lv_vector_1_0,
						"ic.ac.uk.xdrone.XDrone.Vector");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleObject
entryRuleObject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectRule()); }
	iv_ruleObject=ruleObject
	{ $current=$iv_ruleObject.current; }
	EOF;

// Rule Object
ruleObject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{ 
			  getUnorderedGroupHelper().enter(grammarAccess.getObjectAccess().getUnorderedGroup());
			}
			(
				(
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getObjectAccess().getUnorderedGroup(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getObjectAccess().getUnorderedGroup(), 0);
				}
							({true}?=>((
								(
									lv_object_name_1_0=RULE_ID
									{
										newLeafNode(lv_object_name_1_0, grammarAccess.getObjectAccess().getObject_nameIDTerminalRuleCall_0_0_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getObjectRule());
										}
										setWithLastConsumed(
											$current,
											"object_name",
											lv_object_name_1_0,
											"org.eclipse.xtext.common.Terminals.ID");
									}
								)
							)
							otherlv_2='{'
							{
								newLeafNode(otherlv_2, grammarAccess.getObjectAccess().getLeftCurlyBracketKeyword_0_1());
							}
							(
								(
									{
										newCompositeNode(grammarAccess.getObjectAccess().getOriginOriginParserRuleCall_0_2_0());
									}
									lv_origin_3_0=ruleOrigin
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getObjectRule());
										}
										set(
											$current,
											"origin",
											lv_origin_3_0,
											"ic.ac.uk.xdrone.XDrone.Origin");
										afterParserOrEnumRuleCall();
									}
								)
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getObjectAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getObjectAccess().getUnorderedGroup(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getObjectAccess().getUnorderedGroup(), 1);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getObjectAccess().getSizeSizeParserRuleCall_1_0());
								}
								lv_size_4_0=ruleSize
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getObjectRule());
									}
									set(
										$current,
										"size",
										lv_size_4_0,
										"ic.ac.uk.xdrone.XDrone.Size");
									afterParserOrEnumRuleCall();
								}
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getObjectAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getObjectAccess().getUnorderedGroup(), 2)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getObjectAccess().getUnorderedGroup(), 2);
				}
							({true}?=>((
								(
									{
										newCompositeNode(grammarAccess.getObjectAccess().getColorColorParserRuleCall_2_0_0());
									}
									lv_color_5_0=ruleColor
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getObjectRule());
										}
										set(
											$current,
											"color",
											lv_color_5_0,
											"ic.ac.uk.xdrone.XDrone.Color");
										afterParserOrEnumRuleCall();
									}
								)
							)?
							otherlv_6='}'
							{
								newLeafNode(otherlv_6, grammarAccess.getObjectAccess().getRightCurlyBracketKeyword_2_1());
							}
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getObjectAccess().getUnorderedGroup());
				}
			)
		)
				)+
				{getUnorderedGroupHelper().canLeave(grammarAccess.getObjectAccess().getUnorderedGroup())}?
			)
		)
			{ 
			  getUnorderedGroupHelper().leave(grammarAccess.getObjectAccess().getUnorderedGroup());
			}
	)
;

// Entry rule entryRuleOrigin
entryRuleOrigin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOriginRule()); }
	iv_ruleOrigin=ruleOrigin
	{ $current=$iv_ruleOrigin.current; }
	EOF;

// Rule Origin
ruleOrigin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='origin'
		{
			newLeafNode(otherlv_0, grammarAccess.getOriginAccess().getOriginKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getOriginAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOriginAccess().getVectorVectorParserRuleCall_2_0());
				}
				lv_vector_2_0=ruleVector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOriginRule());
					}
					set(
						$current,
						"vector",
						lv_vector_2_0,
						"ic.ac.uk.xdrone.XDrone.Vector");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSize
entryRuleSize returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSizeRule()); }
	iv_ruleSize=ruleSize
	{ $current=$iv_ruleSize.current; }
	EOF;

// Rule Size
ruleSize returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='size'
		{
			newLeafNode(otherlv_0, grammarAccess.getSizeAccess().getSizeKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getSizeAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSizeAccess().getVectorVectorParserRuleCall_2_0());
				}
				lv_vector_2_0=ruleVector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSizeRule());
					}
					set(
						$current,
						"vector",
						lv_vector_2_0,
						"ic.ac.uk.xdrone.XDrone.Vector");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVector
entryRuleVector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVectorRule()); }
	iv_ruleVector=ruleVector
	{ $current=$iv_ruleVector.current; }
	EOF;

// Rule Vector
ruleVector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getVectorAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVectorAccess().getXDOUBLEParserRuleCall_1_0());
				}
				lv_x_1_0=ruleDOUBLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVectorRule());
					}
					set(
						$current,
						"x",
						lv_x_1_0,
						"ic.ac.uk.xdrone.XDrone.DOUBLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getVectorAccess().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVectorAccess().getYDOUBLEParserRuleCall_3_0());
				}
				lv_y_3_0=ruleDOUBLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVectorRule());
					}
					set(
						$current,
						"y",
						lv_y_3_0,
						"ic.ac.uk.xdrone.XDrone.DOUBLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getVectorAccess().getCommaKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVectorAccess().getZDOUBLEParserRuleCall_5_0());
				}
				lv_z_5_0=ruleDOUBLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVectorRule());
					}
					set(
						$current,
						"z",
						lv_z_5_0,
						"ic.ac.uk.xdrone.XDrone.DOUBLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getVectorAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleColor
entryRuleColor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColorRule()); }
	iv_ruleColor=ruleColor
	{ $current=$iv_ruleColor.current; }
	EOF;

// Rule Color
ruleColor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='color'
		{
			newLeafNode(otherlv_0, grammarAccess.getColorAccess().getColorKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getColorAccess().getEqualsSignKeyword_1());
		}
		(
			(
				lv_color_value_2_0=RULE_STRING
				{
					newLeafNode(lv_color_value_2_0, grammarAccess.getColorAccess().getColor_valueSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getColorRule());
					}
					setWithLastConsumed(
						$current,
						"color_value",
						lv_color_value_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleWalls
entryRuleWalls returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWallsRule()); }
	iv_ruleWalls=ruleWalls
	{ $current=$iv_ruleWalls.current; }
	EOF;

// Rule Walls
ruleWalls returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{ 
			  getUnorderedGroupHelper().enter(grammarAccess.getWallsAccess().getUnorderedGroup());
			}
			(
				(
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getWallsAccess().getUnorderedGroup(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getWallsAccess().getUnorderedGroup(), 0);
				}
							({true}?=>(otherlv_1='WALLS'
							{
								newLeafNode(otherlv_1, grammarAccess.getWallsAccess().getWALLSKeyword_0_0());
							}
							otherlv_2='{'
							{
								newLeafNode(otherlv_2, grammarAccess.getWallsAccess().getLeftCurlyBracketKeyword_0_1());
							}
							(
								(
									{
										newCompositeNode(grammarAccess.getWallsAccess().getFrontFrontParserRuleCall_0_2_0());
									}
									lv_front_3_0=ruleFront
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getWallsRule());
										}
										set(
											$current,
											"front",
											lv_front_3_0,
											"ic.ac.uk.xdrone.XDrone.Front");
										afterParserOrEnumRuleCall();
									}
								)
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getWallsAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getWallsAccess().getUnorderedGroup(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getWallsAccess().getUnorderedGroup(), 1);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getWallsAccess().getRightRightParserRuleCall_1_0());
								}
								lv_right_4_0=ruleRight
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getWallsRule());
									}
									set(
										$current,
										"right",
										lv_right_4_0,
										"ic.ac.uk.xdrone.XDrone.Right");
									afterParserOrEnumRuleCall();
								}
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getWallsAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getWallsAccess().getUnorderedGroup(), 2)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getWallsAccess().getUnorderedGroup(), 2);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getWallsAccess().getBackBackParserRuleCall_2_0());
								}
								lv_back_5_0=ruleBack
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getWallsRule());
									}
									set(
										$current,
										"back",
										lv_back_5_0,
										"ic.ac.uk.xdrone.XDrone.Back");
									afterParserOrEnumRuleCall();
								}
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getWallsAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getWallsAccess().getUnorderedGroup(), 3)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getWallsAccess().getUnorderedGroup(), 3);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getWallsAccess().getLeftLeftParserRuleCall_3_0());
								}
								lv_left_6_0=ruleLeft
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getWallsRule());
									}
									set(
										$current,
										"left",
										lv_left_6_0,
										"ic.ac.uk.xdrone.XDrone.Left");
									afterParserOrEnumRuleCall();
								}
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getWallsAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getWallsAccess().getUnorderedGroup(), 4)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getWallsAccess().getUnorderedGroup(), 4);
				}
							({true}?=>((
								(
									{
										newCompositeNode(grammarAccess.getWallsAccess().getUpUpParserRuleCall_4_0_0());
									}
									lv_up_7_0=ruleUp
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getWallsRule());
										}
										set(
											$current,
											"up",
											lv_up_7_0,
											"ic.ac.uk.xdrone.XDrone.Up");
										afterParserOrEnumRuleCall();
									}
								)
							)
							otherlv_8='}'
							{
								newLeafNode(otherlv_8, grammarAccess.getWallsAccess().getRightCurlyBracketKeyword_4_1());
							}
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getWallsAccess().getUnorderedGroup());
				}
			)
		)
				)+
				{getUnorderedGroupHelper().canLeave(grammarAccess.getWallsAccess().getUnorderedGroup())}?
			)
		)
			{ 
			  getUnorderedGroupHelper().leave(grammarAccess.getWallsAccess().getUnorderedGroup());
			}
	)
;

// Entry rule entryRuleFront
entryRuleFront returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFrontRule()); }
	iv_ruleFront=ruleFront
	{ $current=$iv_ruleFront.current; }
	EOF;

// Rule Front
ruleFront returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='front'
		{
			newLeafNode(otherlv_0, grammarAccess.getFrontAccess().getFrontKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getFrontAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFrontAccess().getValuePOSITIVE_DOUBLEParserRuleCall_2_0());
				}
				lv_value_2_0=rulePOSITIVE_DOUBLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFrontRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"ic.ac.uk.xdrone.XDrone.POSITIVE_DOUBLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRight
entryRuleRight returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRightRule()); }
	iv_ruleRight=ruleRight
	{ $current=$iv_ruleRight.current; }
	EOF;

// Rule Right
ruleRight returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='right'
		{
			newLeafNode(otherlv_0, grammarAccess.getRightAccess().getRightKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getRightAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRightAccess().getValuePOSITIVE_DOUBLEParserRuleCall_2_0());
				}
				lv_value_2_0=rulePOSITIVE_DOUBLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRightRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"ic.ac.uk.xdrone.XDrone.POSITIVE_DOUBLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLeft
entryRuleLeft returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeftRule()); }
	iv_ruleLeft=ruleLeft
	{ $current=$iv_ruleLeft.current; }
	EOF;

// Rule Left
ruleLeft returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='left'
		{
			newLeafNode(otherlv_0, grammarAccess.getLeftAccess().getLeftKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getLeftAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLeftAccess().getValuePOSITIVE_DOUBLEParserRuleCall_2_0());
				}
				lv_value_2_0=rulePOSITIVE_DOUBLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLeftRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"ic.ac.uk.xdrone.XDrone.POSITIVE_DOUBLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBack
entryRuleBack returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBackRule()); }
	iv_ruleBack=ruleBack
	{ $current=$iv_ruleBack.current; }
	EOF;

// Rule Back
ruleBack returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='back'
		{
			newLeafNode(otherlv_0, grammarAccess.getBackAccess().getBackKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getBackAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBackAccess().getValuePOSITIVE_DOUBLEParserRuleCall_2_0());
				}
				lv_value_2_0=rulePOSITIVE_DOUBLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBackRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"ic.ac.uk.xdrone.XDrone.POSITIVE_DOUBLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleUp
entryRuleUp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUpRule()); }
	iv_ruleUp=ruleUp
	{ $current=$iv_ruleUp.current; }
	EOF;

// Rule Up
ruleUp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='up'
		{
			newLeafNode(otherlv_0, grammarAccess.getUpAccess().getUpKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getUpAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUpAccess().getValuePOSITIVE_DOUBLEParserRuleCall_2_0());
				}
				lv_value_2_0=rulePOSITIVE_DOUBLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUpRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"ic.ac.uk.xdrone.XDrone.POSITIVE_DOUBLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
