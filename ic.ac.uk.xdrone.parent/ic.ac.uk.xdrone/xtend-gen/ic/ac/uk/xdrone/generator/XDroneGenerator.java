/**
 * generated by Xtext 2.17.0
 */
package ic.ac.uk.xdrone.generator;

import com.google.common.collect.Iterables;
import ic.ac.uk.xdrone.xDrone.Command;
import ic.ac.uk.xdrone.xDrone.Main;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class XDroneGenerator extends AbstractGenerator {
  public CharSequence compile(final Main main) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#! /usr/bin/env python");
    _builder.newLine();
    _builder.append("import sys");
    _builder.newLine();
    _builder.append("sys.path.append(\'/opt/ros/indigo/lib/python2.7/dist-packages\')");
    _builder.newLine();
    _builder.append("import rospy");
    _builder.newLine();
    _builder.newLine();
    _builder.append("from std_msgs.msg import Empty");
    _builder.newLine();
    _builder.append("from ardrone_autonomy.msg import Navdata\t");
    _builder.newLine();
    _builder.append("from geometry_msgs.msg import Twist\t");
    _builder.newLine();
    _builder.append("PI = 3.1415926535897");
    _builder.newLine();
    _builder.newLine();
    _builder.append("state = -1;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("def ReceiveNavdata(data):");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("global state");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("state = data.state");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def rotate(speed, angle, clockwise):");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("vel_msg = Twist()");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("velocity_publisher = rospy.Publisher(\'/cmd_vel\', Twist, queue_size=1)");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("angular_speed = speed*PI/360");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("relative_angle = angle*PI/360");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("vel_msg.linear.x=0");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("vel_msg.linear.y=0");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("vel_msg.linear.z=0");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("vel_msg.angular.x = 0");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("vel_msg.angular.y = 0");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if clockwise:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("vel_msg.angular.z = -abs(angular_speed)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("vel_msg.angular.z = abs(angular_speed)");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("t0 = rospy.Time.now().to_sec()");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("current_angle = 0");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while velocity_publisher.get_num_connections() < 1:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("rospy.sleep(0.1)");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while(current_angle < relative_angle):");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("velocity_publisher.publish(vel_msg)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("t1 = rospy.Time.now().to_sec()");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("current_angle = angular_speed*(t1-t0)");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("vel_msg.angular.z = 0");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("velocity_publisher.publish(vel_msg)");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("#direction (true)- forward, left, up");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def move(speed, distance, direction, axis): ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("vel_msg = Twist()");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("velocity_publisher = rospy.Publisher(\'/cmd_vel\', Twist, queue_size=1)");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("vel_msg.linear.x=0");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("vel_msg.linear.y=0");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("vel_msg.linear.z=0");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("vel_msg.angular.x = 0");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("vel_msg.angular.y = 0");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("vel_msg.angular.z = 0");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if axis == \"x\":");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if direction:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("vel_msg.linear.x = abs(speed)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("else:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("vel_msg.linear.x = -abs(speed)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("elif axis == \"y\":");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if direction:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("vel_msg.linear.y = abs(speed)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("else:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("vel_msg.linear.y = -abs(speed)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("elif axis == \"z\":");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if direction:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("vel_msg.linear.z = abs(speed)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("else:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("vel_msg.linear.z = -abs(speed)");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while velocity_publisher.get_num_connections() < 1:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("rospy.sleep(0.1)");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("t0 = rospy.Time.now().to_sec()");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("current_distance = 0");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while(current_distance < distance):");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("velocity_publisher.publish(vel_msg)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("t1 = rospy.Time.now().to_sec()");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("current_distance = speed*(t1-t0)");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("vel_msg.linear.x=0");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("vel_msg.linear.y=0");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("vel_msg.linear.z=0");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("velocity_publisher.publish(vel_msg)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("rospy.init_node(\'test_node\')");
    _builder.newLine();
    _builder.append("empty = Empty()");
    _builder.newLine();
    _builder.append("rospy.Subscriber(\'/ardrone/navdata\', Navdata, ReceiveNavdata)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("while state == -1:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("rospy.sleep(0.1)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("if state == 0:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("reset = rospy.Publisher(\'/ardrone/reset\', Empty, queue_size=1)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("while reset.get_num_connections() < 1:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("rospy.sleep(0.1)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("reset.publish(empty)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("while state == 0:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("rospy.sleep(0.1)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("�FOR to : main.takeoff�  ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("takeoff = rospy.Publisher(\'/ardrone/takeoff\', Empty, queue_size=1)");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("while takeoff.get_num_connections() < 1:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("rospy.sleep(0.1)");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("takeoff.publish(empty)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("rospy.sleep(5)");
    _builder.newLine();
    _builder.append("�ENDFOR�");
    _builder.newLine();
    _builder.newLine();
    _builder.append("�FOR f : main.commands�");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�IF f instanceof Command�");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("�f.compile�");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("�ENDFOR�");
    _builder.newLine();
    _builder.newLine();
    _builder.append("�FOR to : main.land�  ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("land = rospy.Publisher(\'/ardrone/land\', Empty, queue_size=1)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("while land.get_num_connections() < 1:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("rospy.sleep(0.1)");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("land.publish(empty)");
    _builder.newLine();
    _builder.append("�ENDFOR�");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Command cmd) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("�IF cmd instanceof Up �");
    _builder.newLine();
    _builder.append("move(0.1, �cmd.distance�, True, \"z\")");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("�IF cmd instanceof Down�");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("move(0.1, �cmd.distance�, False, \"z\")");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("�IF cmd instanceof Left �");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("move(0.1, �cmd.distance�, True, \"y\")");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("�IF cmd instanceof Right�");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("move(0.1, �cmd.distance�, False, \"y\")");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("�IF cmd instanceof Forward�\t");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("move(0.1, �cmd.distance�, True, \"x\")");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("�IF cmd instanceof Backward�\t");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("move(0.1, �cmd.distance�, False, \"x\")");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("�IF cmd instanceof RotateL�\t");
    _builder.newLine();
    _builder.append("rotate(30, �cmd.angle�, False)");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("�IF cmd instanceof RotateR�\t");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("rotate(30, �cmd.angle�, True)");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("�IF cmd instanceof Wait�");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("rospy.sleep(�cmd.seconds�)");
    _builder.newLine();
    _builder.append("\t  \t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    return _builder;
  }
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    String result = "";
    System.out.println(("IN GENERATE: " + resource));
    Iterable<Main> _filter = Iterables.<Main>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Main.class);
    for (final Main main : _filter) {
      {
        System.out.println(("IN for: " + main));
        result = this.compile(main).toString();
        System.out.println(("BEFORE2: " + result));
        fsa.generateFile("/xdrone/result.py", result);
      }
    }
    try {
      File file = new File("/xdrone/result.py");
      file.getParentFile().mkdirs();
      PrintWriter writer = new PrintWriter(file, "UTF-8");
      writer.println(result);
      writer.close();
      System.out.println("IN TRY 2");
    } catch (final Throwable _t) {
      if (_t instanceof IOException) {
        final IOException e = (IOException)_t;
        String _string = e.toString();
        String _plus = ("IN ERROR: " + _string);
        System.out.println(_plus);
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
    fsa.generateFile("result.py", result);
  }
}
