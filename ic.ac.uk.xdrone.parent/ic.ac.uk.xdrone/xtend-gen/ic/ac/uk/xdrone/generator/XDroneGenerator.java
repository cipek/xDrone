/**
 * generated by Xtext 2.17.0
 */
package ic.ac.uk.xdrone.generator;

import com.google.common.collect.Iterables;
import ic.ac.uk.xdrone.xDrone.Backward;
import ic.ac.uk.xdrone.xDrone.Color;
import ic.ac.uk.xdrone.xDrone.Command;
import ic.ac.uk.xdrone.xDrone.Down;
import ic.ac.uk.xdrone.xDrone.Drone;
import ic.ac.uk.xdrone.xDrone.Environment;
import ic.ac.uk.xdrone.xDrone.Fly;
import ic.ac.uk.xdrone.xDrone.Forward;
import ic.ac.uk.xdrone.xDrone.GoTo;
import ic.ac.uk.xdrone.xDrone.Left;
import ic.ac.uk.xdrone.xDrone.Main;
import ic.ac.uk.xdrone.xDrone.Origin;
import ic.ac.uk.xdrone.xDrone.Position;
import ic.ac.uk.xdrone.xDrone.Right;
import ic.ac.uk.xdrone.xDrone.RotateL;
import ic.ac.uk.xdrone.xDrone.RotateR;
import ic.ac.uk.xdrone.xDrone.Size;
import ic.ac.uk.xdrone.xDrone.SuperCommand;
import ic.ac.uk.xdrone.xDrone.Up;
import ic.ac.uk.xdrone.xDrone.Wait;
import ic.ac.uk.xdrone.xDrone.Walls;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class XDroneGenerator extends AbstractGenerator {
  public CharSequence compile(final Environment environment) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("function environment()");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//resets drone location");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("drone.position.x = 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("drone.position.z = 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("drone.position.y = 0 + modelHeight;");
    _builder.newLine();
    {
      EList<Drone> _drone = environment.getDrone();
      for(final Drone d : _drone) {
        _builder.append("\t");
        _builder.append("drone.position.x = ");
        String _x = d.getPosition().getVector().getX();
        _builder.append(_x, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("drone.position.z = ");
        String _z = d.getPosition().getVector().getZ();
        _builder.append(_z, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("drone.position.y = ");
        String _y = d.getPosition().getVector().getY();
        _builder.append(_y, "\t");
        _builder.append(" + modelHeight");
        _builder.newLineIfNotEmpty();
        {
          String _rotation = d.getRotation();
          boolean _tripleNotEquals = (_rotation != null);
          if (_tripleNotEquals) {
            _builder.append("\t");
            _builder.append("currentDroneAngle += ");
            String _rotation_1 = d.getRotation();
            _builder.append(_rotation_1, "\t");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("drone.rotateY(");
            String _rotation_2 = d.getRotation();
            _builder.append(_rotation_2, "\t");
            _builder.append("  * (Math.PI/180));");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      EList<Walls> _walls = environment.getWalls();
      for(final Walls d_1 : _walls) {
        _builder.append("\t");
        _builder.append("drawWalls(");
        String _value = d_1.getFront().getValue();
        _builder.append(_value, "\t");
        _builder.append(", ");
        String _value_1 = d_1.getRight().getValue();
        _builder.append(_value_1, "\t");
        _builder.append(", ");
        String _value_2 = d_1.getBack().getValue();
        _builder.append(_value_2, "\t");
        _builder.append(", ");
        String _value_3 = d_1.getLeft().getValue();
        _builder.append(_value_3, "\t");
        _builder.append(",  ");
        String _value_4 = d_1.getUp().getValue();
        _builder.append(_value_4, "\t");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<ic.ac.uk.xdrone.xDrone.Object> _objects = environment.getObjects();
      for(final ic.ac.uk.xdrone.xDrone.Object ob : _objects) {
        _builder.append("\t");
        _builder.append("addCube(\"");
        String _object_name = ob.getObject_name();
        _builder.append(_object_name, "\t");
        _builder.append("\",");
        String _x_1 = ob.getSize().getVector().getX();
        _builder.append(_x_1, "\t");
        _builder.append(", ");
        String _y_1 = ob.getSize().getVector().getY();
        _builder.append(_y_1, "\t");
        _builder.append(", ");
        String _z_1 = ob.getSize().getVector().getZ();
        _builder.append(_z_1, "\t");
        _builder.append(", ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        String _x_2 = ob.getOrigin().getVector().getX();
        _builder.append(_x_2, "\t\t");
        _builder.append(", ");
        String _y_2 = ob.getOrigin().getVector().getY();
        _builder.append(_y_2, "\t\t");
        _builder.append(", ");
        String _z_2 = ob.getOrigin().getVector().getZ();
        _builder.append(_z_2, "\t\t");
        _builder.append(",");
        _builder.newLineIfNotEmpty();
        {
          Color _color = ob.getColor();
          boolean _tripleNotEquals_1 = (_color != null);
          if (_tripleNotEquals_1) {
            _builder.append("\t");
            _builder.append("\"");
            String _color_value = ob.getColor().getColor_value();
            _builder.append(_color_value, "\t");
            _builder.append("\"");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append(")");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileJS(final Fly fly) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("var ANGLE_MARIGIN = 0.4;");
    _builder.newLine();
    _builder.append("var MOVE_MARIGIN = 1.25;");
    _builder.newLine();
    _builder.append("var MOVE_MARIGIN_ADD = 0.6;");
    _builder.newLine();
    _builder.append("var MOVE_MARIGIN_NEXT = 0.95;");
    _builder.newLine();
    _builder.append("var MOVE_MARIGIN_NEXT_ADD = 0.1;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("var commands = [];");
    _builder.newLine();
    _builder.append("var currentDroneLocation = {x: drone.position.x, y: drone.position.y, z: drone.position.z};");
    _builder.newLine();
    _builder.append("var goalDroneRotation = drone.rotation.y;");
    _builder.newLine();
    _builder.append("var currentFunction = \"\";");
    _builder.newLine();
    _builder.append("var finishSimulation = false;");
    _builder.newLine();
    _builder.append("var destination = 0;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//Drone\'s path");
    _builder.newLine();
    _builder.append("var lineMaterial = new THREE.LineBasicMaterial({color: 0x1ACF10});");
    _builder.newLine();
    _builder.append("var lineGeometry = new THREE.Geometry();");
    _builder.newLine();
    _builder.append("lineGeometry.vertices.push(");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("new THREE.Vector3( drone.position.x, drone.position.y, drone.position.z)");
    _builder.newLine();
    _builder.append(");");
    _builder.newLine();
    {
      EList<String> _takeoff = fly.getTakeoff();
      for(final String to : _takeoff) {
        _builder.append("commands.push(\"TAKEOFF\");");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EList<SuperCommand> _commands = fly.getCommands();
      for(final SuperCommand f : _commands) {
        {
          if ((f instanceof Command)) {
            CharSequence _compileJS = this.compileJS(((Command)f));
            _builder.append(_compileJS);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    {
      EList<String> _land = fly.getLand();
      for(final String to_1 : _land) {
        _builder.append("commands.push(\"LAND\");");
        _builder.newLine();
      }
    }
    _builder.append("nextCommand();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("if(line)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("scene.remove( line );");
    _builder.newLine();
    _builder.append("line = new THREE.Line( lineGeometry, lineMaterial );");
    _builder.newLine();
    _builder.append("scene.add( line );");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//Function which is called by simultor and execute flying comands one by one");
    _builder.newLine();
    _builder.append("function flySimulation(){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(!finishSimulation){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if((currentFunction == \"MOVE_Y\" && fly(destination, \'y\'))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("|| (currentFunction == \"MOVE_X\" && fly(destination, \'x\'))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("|| (currentFunction == \"MOVE_Z\" && fly(destination, \'z\'))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("|| (currentFunction == \"LAND\" && land())");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("|| (currentFunction == \"ROTATION\" && rotation(goalDroneRotation))){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("nextCommand();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//Returns appropriate commadns based on array entry");
    _builder.newLine();
    _builder.append("function nextCommand(){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(commands && commands[0]){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(commands[0].r !== undefined){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("changeDroneCollisionBox(getDistanceErrorFromAngle(commands[0].r),0,getDistanceErrorFromAngle(commands[0].r))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("goalDroneRotation = commands[0].r * (Math.PI/180);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("currentFunction = \"ROTATION\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else if(commands[0].w !== undefined){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("execute = false;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("setTimeout(function () {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("execute = true;");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("}, (commands[0].w * 1000));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else if(commands[0].y !== undefined){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("destination = commands[0].y;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("currentFunction = \"MOVE_Y\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("lineGeometry.vertices.push(new THREE.Vector3( drone.position.x, drone.position.y, drone.position.z))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else if(commands[0].x !== undefined){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("changeDroneCollisionBox(getDistanceErrorFromDistance(Math.abs(commands[0].x)),0,0)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("destination = commands[0].x;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("currentFunction = \"MOVE_X\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("lineGeometry.vertices.push(new THREE.Vector3( drone.position.x, drone.position.y, drone.position.z))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else if(commands[0].z !== undefined){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("changeDroneCollisionBox(0, 0, getDistanceErrorFromDistance(Math.abs(commands[0].z)))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("destination = commands[0].z;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("currentFunction = \"MOVE_Z\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("lineGeometry.vertices.push(new THREE.Vector3( drone.position.x, drone.position.y, drone.position.z))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else if(commands[0] == \"TAKEOFF\"){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//changeDroneCollisionBox(0.25,0,0.25)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("destination = 0.7;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("currentFunction = \"MOVE_Y\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("lineGeometry.vertices.push(new THREE.Vector3( drone.position.x, drone.position.y, drone.position.z))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else if(commands[0] == \"LAND\"){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//changeDroneCollisionBox(0.25,0,0.25)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("currentFunction = \"LAND\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("lineGeometry.vertices.push(new THREE.Vector3( drone.position.x, drone.position.y, drone.position.z))");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else if(commands[0].flyTo !== undefined){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var vector = getDistanceToObject(commands[0].flyTo);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var angle = getRotationToObject(commands[0].flyTo);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("var commandSet = \"\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(angle > 0)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("commandSet += \"ROTATELEFT(\" + Math.round( Math.abs(angle) * 10) / 10 + \")\\n\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("else if(angle < 0)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("commandSet += \"ROTATERIGHT(\" + Math.round( Math.abs(angle) * 10) / 10 + \")\\n\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(vector.y > 0)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("commandSet += \"UP(\" + Math.round( Math.abs(vector.y) * 10) / 10 + \")\\n\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("else if(vector.y < 0)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("commandSet += \"DOWN(\" + Math.round( Math.abs(vector.y) * 10) / 10 + \")\\n\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(vector.z > 0)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("commandSet += \"FORWARD(\" + Math.round( vector.z * 10) / 10 + \")\\n\";");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("listGoTo.push({object_name: commands[0].flyTo, ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("commands: commandSet});");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("console.log(listGoTo)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("lastFirstNumber = \"-1\"; //Force refresh");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("commands.shift();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("changeDroneCollisionBox(getDistanceErrorFromAngle(angle),0,getDistanceErrorFromAngle(angle))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("goalDroneRotation = angle * (Math.PI/180);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("currentFunction = \"ROTATION\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("commands.unshift({z: vector.z}); ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("commands.unshift({y: vector.y}); ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("commands.unshift({r: angle});");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("commands.shift();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("else{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("finishSimulation = true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//Calcualtes the distance margin error caused by rotating the drone");
    _builder.newLine();
    _builder.append("function getDistanceErrorFromAngle(angle){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return 1.2 * Math.abs(angle) /90");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//Calcualtes the distance margin error caused by movement of the drone");
    _builder.newLine();
    _builder.append("function getDistanceErrorFromDistance(distance){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(distance < MOVE_MARIGIN)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return MOVE_MARIGIN_ADD;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return MOVE_MARIGIN_ADD + (((distance-MOVE_MARIGIN) * MOVE_MARIGIN_NEXT_ADD) / MOVE_MARIGIN_NEXT)");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileJS(final Command cmd) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((cmd instanceof Up)) {
        _builder.append("commands.push({y: ");
        String _distance = ((Up)cmd).getDistance();
        _builder.append(_distance);
        _builder.append("}); ");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((cmd instanceof Down)) {
        _builder.append("commands.push({y: -");
        String _distance_1 = ((Down)cmd).getDistance();
        _builder.append(_distance_1);
        _builder.append("}); ");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((cmd instanceof Left)) {
        _builder.append("commands.push({x: ");
        String _distance_2 = ((Left)cmd).getDistance();
        _builder.append(_distance_2);
        _builder.append("});");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((cmd instanceof Right)) {
        _builder.append("commands.push({x: -");
        String _distance_3 = ((Right)cmd).getDistance();
        _builder.append(_distance_3);
        _builder.append("});");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((cmd instanceof Forward)) {
        _builder.append("commands.push({z: ");
        String _distance_4 = ((Forward)cmd).getDistance();
        _builder.append(_distance_4);
        _builder.append("});");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((cmd instanceof Backward)) {
        _builder.append("commands.push({z: -");
        String _distance_5 = ((Backward)cmd).getDistance();
        _builder.append(_distance_5);
        _builder.append("});");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((cmd instanceof RotateL)) {
        _builder.append("commands.push({r: ");
        String _angle = ((RotateL)cmd).getAngle();
        _builder.append(_angle);
        _builder.append("}); ");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((cmd instanceof RotateR)) {
        _builder.append("commands.push({r: -");
        String _angle_1 = ((RotateR)cmd).getAngle();
        _builder.append(_angle_1);
        _builder.append("}); ");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((cmd instanceof Wait)) {
        _builder.append("commands.push({w: ");
        String _seconds = ((Wait)cmd).getSeconds();
        _builder.append(_seconds);
        _builder.append("});");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((cmd instanceof GoTo)) {
        _builder.append("commands.push({flyTo: \"");
        String _object_name = ((GoTo)cmd).getObject_name();
        _builder.append(_object_name);
        _builder.append("\"});");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compilePython(final Main main) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#! /usr/bin/env python");
    _builder.newLine();
    _builder.append("import sys");
    _builder.newLine();
    _builder.append("sys.path.append(\'/opt/ros/indigo/lib/python2.7/dist-packages\')");
    _builder.newLine();
    _builder.append("import rospy");
    _builder.newLine();
    _builder.append("import math  ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("from std_msgs.msg import Empty");
    _builder.newLine();
    _builder.append("from ardrone_autonomy.msg import Navdata\t");
    _builder.newLine();
    _builder.append("from geometry_msgs.msg import Twist\t");
    _builder.newLine();
    _builder.append("PI = 3.1415926535897");
    _builder.newLine();
    _builder.append("#Constants");
    _builder.newLine();
    _builder.append("ACCEPTED_DISTANCE_ERROR = 20 # 20 cm");
    _builder.newLine();
    _builder.append("ACCEPTED_ALTITUDE_ERROR = 50 # 5 cm");
    _builder.newLine();
    _builder.append("ACCEPTED_ROTATION_ERROR = 10 # 10 degrees");
    _builder.newLine();
    _builder.append("DISTANCE_ONE_AND_HALF_SECOND = 1.25");
    _builder.newLine();
    _builder.append("DISTANCE_TWO_SECONDS = 2.20");
    _builder.newLine();
    _builder.newLine();
    _builder.append("state = -1");
    _builder.newLine();
    _builder.append("dronePosition = {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\'x\': 0,");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\'y\': 0,");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\'z\': 0");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("currentAngle = 0.0 #Navdata");
    _builder.newLine();
    _builder.append("currentDroneAngle = 270.0 #Real Life");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#maps drone\'s position");
    _builder.newLine();
    {
      Environment _environment = main.getEnvironment();
      boolean _tripleNotEquals = (_environment != null);
      if (_tripleNotEquals) {
        {
          EList<Drone> _drone = main.getEnvironment().getDrone();
          for(final Drone d : _drone) {
            {
              Position _position = d.getPosition();
              boolean _tripleNotEquals_1 = (_position != null);
              if (_tripleNotEquals_1) {
                _builder.append("dronePosition.x = ");
                String _z = d.getPosition().getVector().getZ();
                _builder.append(_z);
                _builder.newLineIfNotEmpty();
                _builder.append("dronePosition.z = ");
                String _y = d.getPosition().getVector().getY();
                _builder.append(_y);
                _builder.newLineIfNotEmpty();
                _builder.append("dronePosition.y = ");
                String _x = d.getPosition().getVector().getX();
                _builder.append(_x);
                _builder.newLineIfNotEmpty();
              }
            }
            {
              String _rotation = d.getRotation();
              boolean _tripleNotEquals_2 = (_rotation != null);
              if (_tripleNotEquals_2) {
                _builder.append("currentDroneAngle += ");
                String _rotation_1 = d.getRotation();
                _builder.append(_rotation_1);
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("objects = {}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#maps all objects");
    _builder.newLine();
    {
      Environment _environment_1 = main.getEnvironment();
      boolean _tripleNotEquals_3 = (_environment_1 != null);
      if (_tripleNotEquals_3) {
        {
          EList<ic.ac.uk.xdrone.xDrone.Object> _objects = main.getEnvironment().getObjects();
          for(final ic.ac.uk.xdrone.xDrone.Object ob : _objects) {
            {
              Origin _origin = ob.getOrigin();
              boolean _tripleNotEquals_4 = (_origin != null);
              if (_tripleNotEquals_4) {
                {
                  Size _size = ob.getSize();
                  boolean _tripleNotEquals_5 = (_size != null);
                  if (_tripleNotEquals_5) {
                    _builder.append("objects[\'");
                    String _object_name = ob.getObject_name();
                    _builder.append(_object_name);
                    _builder.append("\'] = {");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\'x\': ");
                    String _z_1 = ob.getOrigin().getVector().getZ();
                    _builder.append(_z_1, "\t");
                    _builder.append(",");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\'y\': ");
                    String _x_1 = ob.getOrigin().getVector().getX();
                    _builder.append(_x_1, "\t");
                    _builder.append(",");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\'z\': ");
                    String _y_1 = ob.getOrigin().getVector().getY();
                    _builder.append(_y_1, "\t");
                    _builder.append(" + ");
                    String _y_2 = ob.getSize().getVector().getY();
                    _builder.append(_y_2, "\t");
                    _builder.append("/2");
                    _builder.newLineIfNotEmpty();
                    _builder.append("}");
                    _builder.newLine();
                  }
                }
              }
            }
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("#RotY:\t\tRotX:");
    _builder.newLine();
    _builder.append("#+ forward \t+ right");
    _builder.newLine();
    _builder.append("#- backwards\t- left");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#Tracks data provide by the drone");
    _builder.newLine();
    _builder.append("def ReceiveNavdata(data):");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("global state");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("global currentAngle");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("global currentAltitude");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("currentAngle = data.rotZ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("state = data.state");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("currentAltitude = data.altd");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#Returns time that drone should fly to reach travel given distance");
    _builder.newLine();
    _builder.append("def getTimeFromDistance(distance):");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("global DISTANCE_ONE_AND_HALF_SECOND");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("global DISTANCE_TWO_SECONDS");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("global DISTANCE_TWO_AND_HALF_SECONDS");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if distance <= DISTANCE_ONE_AND_HALF_SECOND:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return 1.5 * distance /DISTANCE_ONE_AND_HALF_SECOND");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("elif distance <= DISTANCE_TWO_SECONDS:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return 1.5 + ((distance- DISTANCE_ONE_AND_HALF_SECOND) * 0.5 / (DISTANCE_TWO_SECONDS-DISTANCE_ONE_AND_HALF_SECOND))");
    _builder.newLine();
    _builder.newLine();
    _builder.append("def getDistanceToObject(objectName):");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("global objects");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("obPosition = {}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if objects[objectName]:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("obPosition = objects[objectName]");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if \'x\' in obPosition and \'z\' in obPosition:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("x = abs(dronePosition[\'x\'] - obPosition[\'x\'])");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("y = abs(dronePosition[\'y\'] - obPosition[\'y\'])");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\'x\': math.sqrt( x*x + y*y ),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\'z\': getDistance(dronePosition[\'z\'], obPosition[\'z\'])");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("else:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return {\'x\': 0, \'z\': 0}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("def getDistance(dronePos, obPos):");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("if dronePos > obPos:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return - abs(dronePos - obPos);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("else:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return abs(dronePos - obPos);");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("def getRotationToObject(objectName):");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("global objects");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("obPosition = {}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if objects[objectName]:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("obPosition = objects[objectName]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if \'x\' in obPosition and \'z\' in obPosition:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("angleToObject = math.atan2(dronePosition[\'x\'] - obPosition[\'x\'], dronePosition[\'y\'] - obPosition[\'y\']) * 180 / math.pi");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("angleToObject = angleTo360(angleToObject)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("isPositive = True;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if currentDroneAngle > angleToObject:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("isPositive = False");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("angleToObject = abs(currentDroneAngle - angleToObject)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if angleToObject > 180:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("angleToObject = 360 - angleToObject;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("isPositive = not isPositive;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return angleToObject if isPositive else -angleToObject");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("else:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return 0");
    _builder.newLine();
    _builder.newLine();
    _builder.append("def angleTo360(angle):");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("while angle < 0:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("angle = 360 + angle");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("return angle");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("def checkAngle(angle):");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("angle = angle%360");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("while angle < 0:");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("angle = 360 + angle;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("return angle");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("def oppositeSigns(x, y): ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return (x < 0) if (y >= 0) else (y < 0)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#Rotates the drone");
    _builder.newLine();
    _builder.append("def rotate(speed, angle):");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("global currentAngle");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("global ACCEPTED_ROTATION_ERROR");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("lastAngle = currentAngle");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("angleDone = 0.0");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vel_msg = Twist()");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("angular_speed = speed*PI/360");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("clockwise = False");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if angle < 0:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("clockwise = True");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vel_msg.linear.x=0");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vel_msg.linear.y=0");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vel_msg.linear.z=0");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vel_msg.angular.x = 0");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vel_msg.angular.y = 0");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if clockwise:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("vel_msg.angular.z = -angular_speed");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("else:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("vel_msg.angular.z = angular_speed*2 #For some reason rotates slower to left");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("while velocity_publisher.get_num_connections() < 1:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("rospy.sleep(0.1)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("while(angleDone < abs(angle)-ACCEPTED_ROTATION_ERROR):");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if oppositeSigns(lastAngle, currentAngle) and abs(currentAngle > 90):");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("angleDone += abs(abs(currentAngle)-180 + (abs(lastAngle)-180))");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("angleDone += abs(currentAngle - lastAngle)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("lastAngle = currentAngle\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("velocity_publisher.publish(vel_msg)");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vel_msg.angular.z = 0");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("velocity_publisher.publish(vel_msg)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#Moves the drone by given distance. x and y are speeds in eeach direction. ");
    _builder.newLine();
    _builder.append("#Set one of the to zero if wants to move drone just in one direction at a time");
    _builder.newLine();
    _builder.append("def moveBaseOnTime(distance, x ,y):");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("global velocity_publisher");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("while velocity_publisher.get_num_connections() < 1:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("rospy.sleep(0.1)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vel_msg = Twist()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vel_msg.linear.x= x if distance > 0 else -x");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vel_msg.linear.y= y if distance > 0 else -y  #y+ is left");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vel_msg.linear.z=0");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vel_msg.angular.x = 0");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vel_msg.angular.y = 0");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vel_msg.angular.z = 0");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("tStart = rospy.Time.now().to_sec()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("tEnd = tStart;");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("timeRequired = getTimeFromDistance(abs(distance))");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("while(tEnd-tStart) < timeRequired:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("velocity_publisher.publish(vel_msg)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("tEnd = rospy.Time.now().to_sec()\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vel_msg.linear.x=0");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vel_msg.linear.y=0");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("velocity_publisher.publish(vel_msg)");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("#Vertical movement");
    _builder.newLine();
    _builder.append("def moveUpAndDown(distance):");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("global zLocation");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("global velocity_publisher");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vel_msg = Twist()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vel_msg.linear.x=0");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vel_msg.linear.y=0");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vel_msg.angular.x = 0");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vel_msg.angular.y = 0");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vel_msg.angular.z = 0");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("goalDistance = currentAltitude + (distance*1000)");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("while abs(abs(currentAltitude) - abs(goalDistance)) > ACCEPTED_ALTITUDE_ERROR:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(goalDistance > currentAltitude):");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("vel_msg.linear.z=0.15");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("vel_msg.linear.z=-0.15");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("print(currentAltitude, goalDistance)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("velocity_publisher.publish(vel_msg)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vel_msg.linear.z=0");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("velocity_publisher.publish(vel_msg)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#Hover mode- no movement");
    _builder.newLine();
    _builder.append("def noMove(timeRequired):");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("global velocity_publisher");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("while velocity_publisher.get_num_connections() < 1:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("rospy.sleep(0.1)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vel_msg = Twist()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vel_msg.linear.x=0");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vel_msg.linear.y=0");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vel_msg.linear.z=0");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vel_msg.angular.x = 0");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vel_msg.angular.y = 0");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("vel_msg.angular.z = 0");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("tStart = rospy.Time.now().to_sec()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("tEnd = tStart;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("while(tEnd-tStart) < timeRequired:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("velocity_publisher.publish(vel_msg)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("tEnd = rospy.Time.now().to_sec()");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("#Main");
    _builder.newLine();
    _builder.append("rospy.init_node(\'test_node\')");
    _builder.newLine();
    _builder.append("empty = Empty()");
    _builder.newLine();
    _builder.append("rospy.Subscriber(\'/ardrone/navdata\', Navdata, ReceiveNavdata)");
    _builder.newLine();
    _builder.append("velocity_publisher = rospy.Publisher(\'/cmd_vel\', Twist, queue_size=1)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("while state == -1:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("rospy.sleep(0.1)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("if state == 0:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("reset = rospy.Publisher(\'/ardrone/reset\', Empty, queue_size=1)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("while reset.get_num_connections() < 1:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("rospy.sleep(0.1)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("reset.publish(empty)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("while state == 0:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("rospy.sleep(0.1)");
    _builder.newLine();
    _builder.newLine();
    {
      EList<String> _takeoff = main.getFly().getTakeoff();
      for(final String to : _takeoff) {
        _builder.append("takeoff = rospy.Publisher(\'/ardrone/takeoff\', Empty, queue_size=1)");
        _builder.newLine();
        _builder.newLine();
        _builder.append("while takeoff.get_num_connections() < 1:");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("rospy.sleep(0.1)");
        _builder.newLine();
        _builder.newLine();
        _builder.append("dronePosition[\'z\'] += 0.7");
        _builder.newLine();
        _builder.append("takeoff.publish(empty)");
        _builder.newLine();
        _builder.append("noMove(5)");
        _builder.newLine();
      }
    }
    _builder.newLine();
    {
      EList<SuperCommand> _commands = main.getFly().getCommands();
      for(final SuperCommand f : _commands) {
        {
          if ((f instanceof Command)) {
            CharSequence _compile = this.compile(((Command)f));
            _builder.append(_compile);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    {
      EList<String> _land = main.getFly().getLand();
      for(final String to_1 : _land) {
        _builder.append("land = rospy.Publisher(\'/ardrone/land\', Empty, queue_size=1)");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.newLine();
        _builder.append("while land.get_num_connections() < 1:");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("rospy.sleep(0.1)");
        _builder.newLine();
        _builder.newLine();
        _builder.append("land.publish(empty)");
        _builder.newLine();
        _builder.append("rospy.sleep(3)");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Command cmd) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((cmd instanceof Up)) {
        _builder.append("dronePosition[\'z\'] += ");
        String _distance = ((Up)cmd).getDistance();
        _builder.append(_distance);
        _builder.newLineIfNotEmpty();
        _builder.append("moveUpAndDown(");
        String _distance_1 = ((Up)cmd).getDistance();
        _builder.append(_distance_1);
        _builder.append(")");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((cmd instanceof Down)) {
        _builder.append("dronePosition[\'z\'] += -");
        String _distance_2 = ((Down)cmd).getDistance();
        _builder.append(_distance_2);
        _builder.newLineIfNotEmpty();
        _builder.append("moveUpAndDown(-");
        String _distance_3 = ((Down)cmd).getDistance();
        _builder.append(_distance_3);
        _builder.append(")");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((cmd instanceof Left)) {
        _builder.append("dronePosition[\'y\']  += ");
        String _distance_4 = ((Left)cmd).getDistance();
        _builder.append(_distance_4);
        _builder.newLineIfNotEmpty();
        _builder.append("moveBaseOnTime(");
        String _distance_5 = ((Left)cmd).getDistance();
        _builder.append(_distance_5);
        _builder.append(", 0, 0.25)");
        _builder.newLineIfNotEmpty();
        _builder.append("noMove(1.5)");
        _builder.newLine();
      }
    }
    {
      if ((cmd instanceof Right)) {
        _builder.append("dronePosition[\'y\']  += -");
        String _distance_6 = ((Right)cmd).getDistance();
        _builder.append(_distance_6);
        _builder.newLineIfNotEmpty();
        _builder.append("moveBaseOnTime(-");
        String _distance_7 = ((Right)cmd).getDistance();
        _builder.append(_distance_7);
        _builder.append(", 0, 0.25)");
        _builder.newLineIfNotEmpty();
        _builder.append("noMove(1.5)");
        _builder.newLine();
      }
    }
    {
      if ((cmd instanceof Forward)) {
        _builder.append("dronePosition[\'x\'] += ");
        String _distance_8 = ((Forward)cmd).getDistance();
        _builder.append(_distance_8);
        _builder.newLineIfNotEmpty();
        _builder.append("moveBaseOnTime(");
        String _distance_9 = ((Forward)cmd).getDistance();
        _builder.append(_distance_9);
        _builder.append(", 0.25, 0)");
        _builder.newLineIfNotEmpty();
        _builder.append("noMove(1.5)");
        _builder.newLine();
      }
    }
    {
      if ((cmd instanceof Backward)) {
        _builder.append("dronePosition[\'x\'] += -");
        String _distance_10 = ((Backward)cmd).getDistance();
        _builder.append(_distance_10);
        _builder.newLineIfNotEmpty();
        _builder.append("moveBaseOnTime(-");
        String _distance_11 = ((Backward)cmd).getDistance();
        _builder.append(_distance_11);
        _builder.append(", 0.25, 0)");
        _builder.newLineIfNotEmpty();
        _builder.append("noMove(1.5)");
        _builder.newLine();
      }
    }
    {
      if ((cmd instanceof Wait)) {
        _builder.append("\t  \t");
        _builder.append("moveBaseOnTime(");
        String _seconds = ((Wait)cmd).getSeconds();
        _builder.append(_seconds, "\t  \t");
        _builder.append(", 0, 0)");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((cmd instanceof RotateL)) {
        _builder.append("currentDroneAngle += -");
        String _angle = ((RotateL)cmd).getAngle();
        _builder.append(_angle);
        _builder.newLineIfNotEmpty();
        _builder.append("rotate(90, -");
        String _angle_1 = ((RotateL)cmd).getAngle();
        _builder.append(_angle_1);
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((cmd instanceof RotateR)) {
        _builder.append("currentDroneAngle += ");
        String _angle_2 = ((RotateR)cmd).getAngle();
        _builder.append(_angle_2);
        _builder.newLineIfNotEmpty();
        _builder.append("rotate(90, ");
        String _angle_3 = ((RotateR)cmd).getAngle();
        _builder.append(_angle_3);
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((cmd instanceof GoTo)) {
        _builder.append("vector = getDistanceToObject(\"");
        String _object_name = ((GoTo)cmd).getObject_name();
        _builder.append(_object_name);
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("angle = getRotationToObject(\"");
        String _object_name_1 = ((GoTo)cmd).getObject_name();
        _builder.append(_object_name_1);
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("currentDroneAngle += angle");
        _builder.newLine();
        _builder.append("rotate(30, angle);");
        _builder.newLine();
        _builder.append("dronePosition[\'z\'] += vector[\'z\']");
        _builder.newLine();
        _builder.append("moveUpAndDown(vector[\'z\'])");
        _builder.newLine();
        _builder.append("dronePosition[\'x\'] += vector[\'x\']");
        _builder.newLine();
        _builder.append("moveBaseOnTime(vector[\'x\'], 0.15, 0)");
        _builder.newLine();
        _builder.append("noMove(1.5)");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    String result = "";
    long time = System.currentTimeMillis();
    String locally = "Webroot";
    String warFile = "/opt/tomcat/8_0/webapps/ROOT";
    Iterable<Main> _filter = Iterables.<Main>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Main.class);
    for (final Main main : _filter) {
      {
        result = this.compilePython(main).toString();
        fsa.generateFile("/xdrone/result.py", result);
      }
    }
    try {
      File file = new File("/xdrone/result.py");
      file.getParentFile().mkdirs();
      PrintWriter writer = new PrintWriter(file, "UTF-8");
      writer.println(result);
      writer.close();
    } catch (final Throwable _t) {
      if (_t instanceof IOException) {
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
    result = "";
    Iterable<Fly> _filter_1 = Iterables.<Fly>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Fly.class);
    for (final Fly fly : _filter_1) {
      {
        result = this.compileJS(fly).toString();
        fsa.generateFile((((warFile + "/simulator") + Long.valueOf(time)) + ".js"), result);
      }
    }
    try {
      File file = new File((((warFile + "/simulator") + Long.valueOf(time)) + ".js"));
      file.getParentFile().mkdirs();
      PrintWriter writer = new PrintWriter(file, "UTF-8");
      writer.println(result);
      writer.close();
    } catch (final Throwable _t) {
      if (_t instanceof IOException) {
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
    result = "";
    Iterable<Environment> _filter_2 = Iterables.<Environment>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Environment.class);
    for (final Environment environment : _filter_2) {
      {
        result = this.compile(environment).toString();
        fsa.generateFile((((warFile + "/environment") + Long.valueOf(time)) + ".js"), result);
      }
    }
    try {
      File file = new File((((warFile + "/environment") + Long.valueOf(time)) + ".js"));
      file.getParentFile().mkdirs();
      PrintWriter writer = new PrintWriter(file, "UTF-8");
      writer.println(result);
      writer.close();
    } catch (final Throwable _t) {
      if (_t instanceof IOException) {
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
  }
}
