/**
 * generated by Xtext 2.17.0
 */
package ic.ac.uk.xdrone.xDrone.impl;

import ic.ac.uk.xdrone.xDrone.Main;
import ic.ac.uk.xdrone.xDrone.SuperCommand;
import ic.ac.uk.xdrone.xDrone.XDronePackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Main</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ic.ac.uk.xdrone.xDrone.impl.MainImpl#getCommands <em>Commands</em>}</li>
 *   <li>{@link ic.ac.uk.xdrone.xDrone.impl.MainImpl#getTakeoff <em>Takeoff</em>}</li>
 *   <li>{@link ic.ac.uk.xdrone.xDrone.impl.MainImpl#getLand <em>Land</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MainImpl extends MinimalEObjectImpl.Container implements Main
{
  /**
   * The cached value of the '{@link #getCommands() <em>Commands</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommands()
   * @generated
   * @ordered
   */
  protected EList<SuperCommand> commands;

  /**
   * The cached value of the '{@link #getTakeoff() <em>Takeoff</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTakeoff()
   * @generated
   * @ordered
   */
  protected EList<String> takeoff;

  /**
   * The cached value of the '{@link #getLand() <em>Land</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLand()
   * @generated
   * @ordered
   */
  protected EList<String> land;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MainImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XDronePackage.Literals.MAIN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<SuperCommand> getCommands()
  {
    if (commands == null)
    {
      commands = new EObjectContainmentEList<SuperCommand>(SuperCommand.class, this, XDronePackage.MAIN__COMMANDS);
    }
    return commands;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getTakeoff()
  {
    if (takeoff == null)
    {
      takeoff = new EDataTypeEList<String>(String.class, this, XDronePackage.MAIN__TAKEOFF);
    }
    return takeoff;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getLand()
  {
    if (land == null)
    {
      land = new EDataTypeEList<String>(String.class, this, XDronePackage.MAIN__LAND);
    }
    return land;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case XDronePackage.MAIN__COMMANDS:
        return ((InternalEList<?>)getCommands()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XDronePackage.MAIN__COMMANDS:
        return getCommands();
      case XDronePackage.MAIN__TAKEOFF:
        return getTakeoff();
      case XDronePackage.MAIN__LAND:
        return getLand();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XDronePackage.MAIN__COMMANDS:
        getCommands().clear();
        getCommands().addAll((Collection<? extends SuperCommand>)newValue);
        return;
      case XDronePackage.MAIN__TAKEOFF:
        getTakeoff().clear();
        getTakeoff().addAll((Collection<? extends String>)newValue);
        return;
      case XDronePackage.MAIN__LAND:
        getLand().clear();
        getLand().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XDronePackage.MAIN__COMMANDS:
        getCommands().clear();
        return;
      case XDronePackage.MAIN__TAKEOFF:
        getTakeoff().clear();
        return;
      case XDronePackage.MAIN__LAND:
        getLand().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XDronePackage.MAIN__COMMANDS:
        return commands != null && !commands.isEmpty();
      case XDronePackage.MAIN__TAKEOFF:
        return takeoff != null && !takeoff.isEmpty();
      case XDronePackage.MAIN__LAND:
        return land != null && !land.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (takeoff: ");
    result.append(takeoff);
    result.append(", land: ");
    result.append(land);
    result.append(')');
    return result.toString();
  }

} //MainImpl
