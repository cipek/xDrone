/*
 * generated by Xtext 2.17.0
 */
package ic.ac.uk.xdrone.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class XDroneGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Program");
		private final Assignment cMainAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMainMainParserRuleCall_0 = (RuleCall)cMainAssignment.eContents().get(0);
		
		//Program:
		//	main=Main;
		@Override public ParserRule getRule() { return rule; }
		
		//main=Main
		public Assignment getMainAssignment() { return cMainAssignment; }
		
		//Main
		public RuleCall getMainMainParserRuleCall_0() { return cMainMainParserRuleCall_0; }
	}
	public class MainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Main");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFlyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFlyFlyParserRuleCall_0_0 = (RuleCall)cFlyAssignment_0.eContents().get(0);
		private final Assignment cEnvironmentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnvironmentEnvironmentParserRuleCall_1_0 = (RuleCall)cEnvironmentAssignment_1.eContents().get(0);
		
		//Main:
		//	fly=Fly
		//	environment=Environment?;
		@Override public ParserRule getRule() { return rule; }
		
		//fly=Fly environment=Environment?
		public Group getGroup() { return cGroup; }
		
		//fly=Fly
		public Assignment getFlyAssignment_0() { return cFlyAssignment_0; }
		
		//Fly
		public RuleCall getFlyFlyParserRuleCall_0_0() { return cFlyFlyParserRuleCall_0_0; }
		
		//environment=Environment?
		public Assignment getEnvironmentAssignment_1() { return cEnvironmentAssignment_1; }
		
		//Environment
		public RuleCall getEnvironmentEnvironmentParserRuleCall_1_0() { return cEnvironmentEnvironmentParserRuleCall_1_0; }
	}
	public class FlyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Fly");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cTakeoffAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cTakeoffTakeoffParserRuleCall_4_0_0 = (RuleCall)cTakeoffAssignment_4_0.eContents().get(0);
		private final Assignment cCommandsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCommandsSuperCommandParserRuleCall_4_1_0 = (RuleCall)cCommandsAssignment_4_1.eContents().get(0);
		private final Assignment cLandAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cLandLandParserRuleCall_4_2_0 = (RuleCall)cLandAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Fly:
		//	'fly' '(' ')' '{' (takeoff+=Takeoff commands+=SuperCommand*
		//	land+=Land)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'fly' '(' ')' '{' (takeoff+=Takeoff commands+=SuperCommand* land+=Land) '}'
		public Group getGroup() { return cGroup; }
		
		//'fly'
		public Keyword getFlyKeyword_0() { return cFlyKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//takeoff+=Takeoff commands+=SuperCommand* land+=Land
		public Group getGroup_4() { return cGroup_4; }
		
		//takeoff+=Takeoff
		public Assignment getTakeoffAssignment_4_0() { return cTakeoffAssignment_4_0; }
		
		//Takeoff
		public RuleCall getTakeoffTakeoffParserRuleCall_4_0_0() { return cTakeoffTakeoffParserRuleCall_4_0_0; }
		
		//commands+=SuperCommand*
		public Assignment getCommandsAssignment_4_1() { return cCommandsAssignment_4_1; }
		
		//SuperCommand
		public RuleCall getCommandsSuperCommandParserRuleCall_4_1_0() { return cCommandsSuperCommandParserRuleCall_4_1_0; }
		
		//land+=Land
		public Assignment getLandAssignment_4_2() { return cLandAssignment_4_2; }
		
		//Land
		public RuleCall getLandLandParserRuleCall_4_2_0() { return cLandLandParserRuleCall_4_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EnvironmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Environment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnvironmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEnvironmentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cDroneAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cDroneDroneParserRuleCall_5_0_0 = (RuleCall)cDroneAssignment_5_0.eContents().get(0);
		private final Assignment cWallsAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cWallsWallsParserRuleCall_5_1_0 = (RuleCall)cWallsAssignment_5_1.eContents().get(0);
		private final Assignment cObjectsAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cObjectsObjectParserRuleCall_5_2_0 = (RuleCall)cObjectsAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Environment:
		//	{Environment} 'environment' '(' ')' '{' (drone+=Drone | walls+=Walls | objects+=Object)*
		//	// 	(drone+=Drone)?
		//	//  	((objects+=Object))*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Environment} 'environment' '(' ')' '{' (drone+=Drone | walls+=Walls | objects+=Object)* // 	(drone+=Drone)?
		////  	((objects+=Object))*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Environment}
		public Action getEnvironmentAction_0() { return cEnvironmentAction_0; }
		
		//'environment'
		public Keyword getEnvironmentKeyword_1() { return cEnvironmentKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(drone+=Drone | walls+=Walls | objects+=Object)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//drone+=Drone
		public Assignment getDroneAssignment_5_0() { return cDroneAssignment_5_0; }
		
		//Drone
		public RuleCall getDroneDroneParserRuleCall_5_0_0() { return cDroneDroneParserRuleCall_5_0_0; }
		
		//walls+=Walls
		public Assignment getWallsAssignment_5_1() { return cWallsAssignment_5_1; }
		
		//Walls
		public RuleCall getWallsWallsParserRuleCall_5_1_0() { return cWallsWallsParserRuleCall_5_1_0; }
		
		//objects+=Object
		public Assignment getObjectsAssignment_5_2() { return cObjectsAssignment_5_2; }
		
		//Object
		public RuleCall getObjectsObjectParserRuleCall_5_2_0() { return cObjectsObjectParserRuleCall_5_2_0; }
		
		//// 	(drone+=Drone)?
		////  	((objects+=Object))*
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class TakeoffElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Takeoff");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTAKEOFFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		////UserFunction:
		////	(name = ID) '()'
		////	'{'
		////	(func+=Command)*
		////	'}'
		////;
		//Takeoff:
		//	'TAKEOFF' '(' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'TAKEOFF' '(' ')'
		public Group getGroup() { return cGroup; }
		
		//'TAKEOFF'
		public Keyword getTAKEOFFKeyword_0() { return cTAKEOFFKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class LandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Land");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLANDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Land:
		//	'LAND' '(' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'LAND' '(' ')'
		public Group getGroup() { return cGroup; }
		
		//'LAND'
		public Keyword getLANDKeyword_0() { return cLANDKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class SuperCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.SuperCommand");
		private final RuleCall cCommandParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SuperCommand:
		//	Command
		//	//	| FunctionName
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Command
		public RuleCall getCommandParserRuleCall() { return cCommandParserRuleCall; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDownParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLeftParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRightParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cForwardParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBackwardParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRotateLParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cRotateRParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cWaitParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cGoToParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//Command:
		//	Up
		//	| Down
		//	| Left
		//	| Right
		//	| Forward
		//	| Backward
		//	| RotateL
		//	| RotateR
		//	| Wait
		//	//	| Move
		//	//	| Rotate
		//	| GoTo;
		@Override public ParserRule getRule() { return rule; }
		
		//Up | Down | Left | Right | Forward | Backward | RotateL | RotateR | Wait //	| Move
		////	| Rotate
		//| GoTo
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Up
		public RuleCall getUpParserRuleCall_0() { return cUpParserRuleCall_0; }
		
		//Down
		public RuleCall getDownParserRuleCall_1() { return cDownParserRuleCall_1; }
		
		//Left
		public RuleCall getLeftParserRuleCall_2() { return cLeftParserRuleCall_2; }
		
		//Right
		public RuleCall getRightParserRuleCall_3() { return cRightParserRuleCall_3; }
		
		//Forward
		public RuleCall getForwardParserRuleCall_4() { return cForwardParserRuleCall_4; }
		
		//Backward
		public RuleCall getBackwardParserRuleCall_5() { return cBackwardParserRuleCall_5; }
		
		//RotateL
		public RuleCall getRotateLParserRuleCall_6() { return cRotateLParserRuleCall_6; }
		
		//RotateR
		public RuleCall getRotateRParserRuleCall_7() { return cRotateRParserRuleCall_7; }
		
		//Wait
		public RuleCall getWaitParserRuleCall_8() { return cWaitParserRuleCall_8; }
		
		//GoTo
		public RuleCall getGoToParserRuleCall_9() { return cGoToParserRuleCall_9; }
	}
	public class DOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.DOUBLE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cPOSITIVE_DOUBLEParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cPOSITIVE_DOUBLEParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DOUBLE:
		//	'-' POSITIVE_DOUBLE
		//	| POSITIVE_DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//'-' POSITIVE_DOUBLE | POSITIVE_DOUBLE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'-' POSITIVE_DOUBLE
		public Group getGroup_0() { return cGroup_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_0() { return cHyphenMinusKeyword_0_0; }
		
		//POSITIVE_DOUBLE
		public RuleCall getPOSITIVE_DOUBLEParserRuleCall_0_1() { return cPOSITIVE_DOUBLEParserRuleCall_0_1; }
		
		//POSITIVE_DOUBLE
		public RuleCall getPOSITIVE_DOUBLEParserRuleCall_1() { return cPOSITIVE_DOUBLEParserRuleCall_1; }
	}
	public class POSITIVE_DOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.POSITIVE_DOUBLE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//POSITIVE_DOUBLE:
		//	INT '.' INT
		//	| INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT | INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT '.' INT
		public Group getGroup_0() { return cGroup_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_0() { return cINTTerminalRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_2() { return cINTTerminalRuleCall_0_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class GoToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.GoTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGOTOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cObject_nameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObject_nameSTRINGTerminalRuleCall_2_0 = (RuleCall)cObject_nameAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//GoTo:
		//	'GOTO' '(' object_name=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'GOTO' '(' object_name=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'GOTO'
		public Keyword getGOTOKeyword_0() { return cGOTOKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//object_name=STRING
		public Assignment getObject_nameAssignment_2() { return cObject_nameAssignment_2; }
		
		//STRING
		public RuleCall getObject_nameSTRINGTerminalRuleCall_2_0() { return cObject_nameSTRINGTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class UpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Up");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDistanceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDistanceDOUBLEParserRuleCall_2_0 = (RuleCall)cDistanceAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////Move:
		////	'MOVE' vector=Vector
		////;
		////Rotate: 
		////	'ROTATE' '('angle = DOUBLE')'
		////;
		//Up:
		//	'UP' '(' distance=DOUBLE ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'UP' '(' distance=DOUBLE ')'
		public Group getGroup() { return cGroup; }
		
		//'UP'
		public Keyword getUPKeyword_0() { return cUPKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//distance=DOUBLE
		public Assignment getDistanceAssignment_2() { return cDistanceAssignment_2; }
		
		//DOUBLE
		public RuleCall getDistanceDOUBLEParserRuleCall_2_0() { return cDistanceDOUBLEParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class DownElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Down");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDOWNKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDistanceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDistanceDOUBLEParserRuleCall_2_0 = (RuleCall)cDistanceAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Down:
		//	'DOWN' '(' distance=DOUBLE ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'DOWN' '(' distance=DOUBLE ')'
		public Group getGroup() { return cGroup; }
		
		//'DOWN'
		public Keyword getDOWNKeyword_0() { return cDOWNKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//distance=DOUBLE
		public Assignment getDistanceAssignment_2() { return cDistanceAssignment_2; }
		
		//DOUBLE
		public RuleCall getDistanceDOUBLEParserRuleCall_2_0() { return cDistanceDOUBLEParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class LeftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Left");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLEFTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDistanceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDistanceDOUBLEParserRuleCall_2_0 = (RuleCall)cDistanceAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Left:
		//	'LEFT' '(' distance=DOUBLE ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'LEFT' '(' distance=DOUBLE ')'
		public Group getGroup() { return cGroup; }
		
		//'LEFT'
		public Keyword getLEFTKeyword_0() { return cLEFTKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//distance=DOUBLE
		public Assignment getDistanceAssignment_2() { return cDistanceAssignment_2; }
		
		//DOUBLE
		public RuleCall getDistanceDOUBLEParserRuleCall_2_0() { return cDistanceDOUBLEParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class RightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Right");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRIGHTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDistanceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDistanceDOUBLEParserRuleCall_2_0 = (RuleCall)cDistanceAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Right:
		//	'RIGHT' '(' distance=DOUBLE ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'RIGHT' '(' distance=DOUBLE ')'
		public Group getGroup() { return cGroup; }
		
		//'RIGHT'
		public Keyword getRIGHTKeyword_0() { return cRIGHTKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//distance=DOUBLE
		public Assignment getDistanceAssignment_2() { return cDistanceAssignment_2; }
		
		//DOUBLE
		public RuleCall getDistanceDOUBLEParserRuleCall_2_0() { return cDistanceDOUBLEParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ForwardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Forward");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFORWARDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDistanceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDistanceDOUBLEParserRuleCall_2_0 = (RuleCall)cDistanceAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Forward:
		//	'FORWARD' '(' distance=DOUBLE ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'FORWARD' '(' distance=DOUBLE ')'
		public Group getGroup() { return cGroup; }
		
		//'FORWARD'
		public Keyword getFORWARDKeyword_0() { return cFORWARDKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//distance=DOUBLE
		public Assignment getDistanceAssignment_2() { return cDistanceAssignment_2; }
		
		//DOUBLE
		public RuleCall getDistanceDOUBLEParserRuleCall_2_0() { return cDistanceDOUBLEParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class BackwardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Backward");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBACKWARDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDistanceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDistanceDOUBLEParserRuleCall_2_0 = (RuleCall)cDistanceAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Backward:
		//	'BACKWARD' '(' distance=DOUBLE ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'BACKWARD' '(' distance=DOUBLE ')'
		public Group getGroup() { return cGroup; }
		
		//'BACKWARD'
		public Keyword getBACKWARDKeyword_0() { return cBACKWARDKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//distance=DOUBLE
		public Assignment getDistanceAssignment_2() { return cDistanceAssignment_2; }
		
		//DOUBLE
		public RuleCall getDistanceDOUBLEParserRuleCall_2_0() { return cDistanceDOUBLEParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class RotateLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.RotateL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cROTATELEFTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAngleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAngleINTTerminalRuleCall_2_0 = (RuleCall)cAngleAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RotateL:
		//	'ROTATELEFT' '(' angle=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ROTATELEFT' '(' angle=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'ROTATELEFT'
		public Keyword getROTATELEFTKeyword_0() { return cROTATELEFTKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//angle=INT
		public Assignment getAngleAssignment_2() { return cAngleAssignment_2; }
		
		//INT
		public RuleCall getAngleINTTerminalRuleCall_2_0() { return cAngleINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class RotateRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.RotateR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cROTATERIGHTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAngleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAngleINTTerminalRuleCall_2_0 = (RuleCall)cAngleAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RotateR:
		//	'ROTATERIGHT' '(' angle=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ROTATERIGHT' '(' angle=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'ROTATERIGHT'
		public Keyword getROTATERIGHTKeyword_0() { return cROTATERIGHTKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//angle=INT
		public Assignment getAngleAssignment_2() { return cAngleAssignment_2; }
		
		//INT
		public RuleCall getAngleINTTerminalRuleCall_2_0() { return cAngleINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class WaitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Wait");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWAITKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSecondsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSecondsPOSITIVE_DOUBLEParserRuleCall_2_0 = (RuleCall)cSecondsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Wait:
		//	'WAIT' '(' seconds=POSITIVE_DOUBLE ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'WAIT' '(' seconds=POSITIVE_DOUBLE ')'
		public Group getGroup() { return cGroup; }
		
		//'WAIT'
		public Keyword getWAITKeyword_0() { return cWAITKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//seconds=POSITIVE_DOUBLE
		public Assignment getSecondsAssignment_2() { return cSecondsAssignment_2; }
		
		//POSITIVE_DOUBLE
		public RuleCall getSecondsPOSITIVE_DOUBLEParserRuleCall_2_0() { return cSecondsPOSITIVE_DOUBLEParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class DroneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Drone");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDRONEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cPositionAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cPositionPositionParserRuleCall_2_0_0 = (RuleCall)cPositionAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cRotationKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cRotationAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cRotationDOUBLEParserRuleCall_2_1_2_0 = (RuleCall)cRotationAssignment_2_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////FunctionName:
		////	func_name = ID '()'
		////;
		//Drone: //	'DRONE' vector=Vector
		//	'DRONE' '{' (position=Position | 'rotation' '=' rotation=DOUBLE)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		////	'DRONE' vector=Vector
		//'DRONE' '{' (position=Position | 'rotation' '=' rotation=DOUBLE)* '}'
		public Group getGroup() { return cGroup; }
		
		////	'DRONE' vector=Vector
		//'DRONE'
		public Keyword getDRONEKeyword_0() { return cDRONEKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(position=Position | 'rotation' '=' rotation=DOUBLE)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//position=Position
		public Assignment getPositionAssignment_2_0() { return cPositionAssignment_2_0; }
		
		//Position
		public RuleCall getPositionPositionParserRuleCall_2_0_0() { return cPositionPositionParserRuleCall_2_0_0; }
		
		//'rotation' '=' rotation=DOUBLE
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'rotation'
		public Keyword getRotationKeyword_2_1_0() { return cRotationKeyword_2_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_1_1() { return cEqualsSignKeyword_2_1_1; }
		
		//rotation=DOUBLE
		public Assignment getRotationAssignment_2_1_2() { return cRotationAssignment_2_1_2; }
		
		//DOUBLE
		public RuleCall getRotationDOUBLEParserRuleCall_2_1_2_0() { return cRotationDOUBLEParserRuleCall_2_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Object");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cObject_nameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cObject_nameIDTerminalRuleCall_0_0 = (RuleCall)cObject_nameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cOriginAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cOriginOriginParserRuleCall_3_0_0 = (RuleCall)cOriginAssignment_3_0.eContents().get(0);
		private final Assignment cSizeAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cSizeSizeParserRuleCall_3_1_0 = (RuleCall)cSizeAssignment_3_1.eContents().get(0);
		private final Assignment cColorAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cColorColorParserRuleCall_3_2_0 = (RuleCall)cColorAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Object:
		//	object_name=ID '=' '{' (origin=Origin | size=Size | color=Color)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		////	object_name = ID '(' sx = DOUBLE ',' sz = DOUBLE ',' sy = DOUBLE ',' lx = DOUBLE ',' lz = DOUBLE ',' ly = DOUBLE')' 
		//object_name=ID '=' '{' (origin=Origin | size=Size | color=Color)* '}'
		public Group getGroup() { return cGroup; }
		
		////	object_name = ID '(' sx = DOUBLE ',' sz = DOUBLE ',' sy = DOUBLE ',' lx = DOUBLE ',' lz = DOUBLE ',' ly = DOUBLE')' 
		//object_name=ID
		public Assignment getObject_nameAssignment_0() { return cObject_nameAssignment_0; }
		
		//ID
		public RuleCall getObject_nameIDTerminalRuleCall_0_0() { return cObject_nameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(origin=Origin | size=Size | color=Color)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//origin=Origin
		public Assignment getOriginAssignment_3_0() { return cOriginAssignment_3_0; }
		
		//Origin
		public RuleCall getOriginOriginParserRuleCall_3_0_0() { return cOriginOriginParserRuleCall_3_0_0; }
		
		//size=Size
		public Assignment getSizeAssignment_3_1() { return cSizeAssignment_3_1; }
		
		//Size
		public RuleCall getSizeSizeParserRuleCall_3_1_0() { return cSizeSizeParserRuleCall_3_1_0; }
		
		//color=Color
		public Assignment getColorAssignment_3_2() { return cColorAssignment_3_2; }
		
		//Color
		public RuleCall getColorColorParserRuleCall_3_2_0() { return cColorColorParserRuleCall_3_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class OriginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Origin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOriginKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVectorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVectorVectorParserRuleCall_2_0 = (RuleCall)cVectorAssignment_2.eContents().get(0);
		
		//Origin:
		//	'origin' '=' vector=Vector;
		@Override public ParserRule getRule() { return rule; }
		
		//'origin' '=' vector=Vector
		public Group getGroup() { return cGroup; }
		
		//'origin'
		public Keyword getOriginKeyword_0() { return cOriginKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//vector=Vector
		public Assignment getVectorAssignment_2() { return cVectorAssignment_2; }
		
		//Vector
		public RuleCall getVectorVectorParserRuleCall_2_0() { return cVectorVectorParserRuleCall_2_0; }
	}
	public class SizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Size");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSizeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVectorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVectorVectorParserRuleCall_2_0 = (RuleCall)cVectorAssignment_2.eContents().get(0);
		
		//Size:
		//	'size' '=' vector=Vector;
		@Override public ParserRule getRule() { return rule; }
		
		//'size' '=' vector=Vector
		public Group getGroup() { return cGroup; }
		
		//'size'
		public Keyword getSizeKeyword_0() { return cSizeKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//vector=Vector
		public Assignment getVectorAssignment_2() { return cVectorAssignment_2; }
		
		//Vector
		public RuleCall getVectorVectorParserRuleCall_2_0() { return cVectorVectorParserRuleCall_2_0; }
	}
	public class PositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Position");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPositionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVectorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVectorVectorParserRuleCall_2_0 = (RuleCall)cVectorAssignment_2.eContents().get(0);
		
		//Position:
		//	'position' '=' vector=Vector;
		@Override public ParserRule getRule() { return rule; }
		
		//'position' '=' vector=Vector
		public Group getGroup() { return cGroup; }
		
		//'position'
		public Keyword getPositionKeyword_0() { return cPositionKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//vector=Vector
		public Assignment getVectorAssignment_2() { return cVectorAssignment_2; }
		
		//Vector
		public RuleCall getVectorVectorParserRuleCall_2_0() { return cVectorVectorParserRuleCall_2_0; }
	}
	public class VectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Vector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cXAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cXDOUBLEParserRuleCall_1_0 = (RuleCall)cXAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cYAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cYDOUBLEParserRuleCall_3_0 = (RuleCall)cYAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cZAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cZDOUBLEParserRuleCall_5_0 = (RuleCall)cZAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Vector:
		//	'(' x=DOUBLE ',' y=DOUBLE ',' z=DOUBLE ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' x=DOUBLE ',' y=DOUBLE ',' z=DOUBLE ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//x=DOUBLE
		public Assignment getXAssignment_1() { return cXAssignment_1; }
		
		//DOUBLE
		public RuleCall getXDOUBLEParserRuleCall_1_0() { return cXDOUBLEParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//y=DOUBLE
		public Assignment getYAssignment_3() { return cYAssignment_3; }
		
		//DOUBLE
		public RuleCall getYDOUBLEParserRuleCall_3_0() { return cYDOUBLEParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//z=DOUBLE
		public Assignment getZAssignment_5() { return cZAssignment_5; }
		
		//DOUBLE
		public RuleCall getZDOUBLEParserRuleCall_5_0() { return cZDOUBLEParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class ColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Color");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColor_valueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColor_valueSTRINGTerminalRuleCall_2_0 = (RuleCall)cColor_valueAssignment_2.eContents().get(0);
		
		//Color:
		//	'color' '=' color_value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'color' '=' color_value=STRING
		public Group getGroup() { return cGroup; }
		
		//'color'
		public Keyword getColorKeyword_0() { return cColorKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//color_value=STRING
		public Assignment getColor_valueAssignment_2() { return cColor_valueAssignment_2; }
		
		//STRING
		public RuleCall getColor_valueSTRINGTerminalRuleCall_2_0() { return cColor_valueSTRINGTerminalRuleCall_2_0; }
	}
	public class WallsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Walls");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWALLSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cFrontAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cFrontFrontWallParserRuleCall_2_0_0 = (RuleCall)cFrontAssignment_2_0.eContents().get(0);
		private final Assignment cRightAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cRightRightWallParserRuleCall_2_1_0 = (RuleCall)cRightAssignment_2_1.eContents().get(0);
		private final Assignment cBackAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cBackBackWallParserRuleCall_2_2_0 = (RuleCall)cBackAssignment_2_2.eContents().get(0);
		private final Assignment cLeftAssignment_2_3 = (Assignment)cAlternatives_2.eContents().get(3);
		private final RuleCall cLeftLeftWallParserRuleCall_2_3_0 = (RuleCall)cLeftAssignment_2_3.eContents().get(0);
		private final Assignment cUpAssignment_2_4 = (Assignment)cAlternatives_2.eContents().get(4);
		private final RuleCall cUpUpWallParserRuleCall_2_4_0 = (RuleCall)cUpAssignment_2_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Walls: //	'WALLS' '(' front = POSITIVE_DOUBLE ',' right = POSITIVE_DOUBLE ','  back = POSITIVE_DOUBLE ',' left = POSITIVE_DOUBLE ')'
		//	'WALLS' '{' (front=FrontWall | right=RightWall | back=BackWall | left=LeftWall | up=UpWall)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		////	'WALLS' '(' front = POSITIVE_DOUBLE ',' right = POSITIVE_DOUBLE ','  back = POSITIVE_DOUBLE ',' left = POSITIVE_DOUBLE ')'
		//'WALLS' '{' (front=FrontWall | right=RightWall | back=BackWall | left=LeftWall | up=UpWall)* '}'
		public Group getGroup() { return cGroup; }
		
		////	'WALLS' '(' front = POSITIVE_DOUBLE ',' right = POSITIVE_DOUBLE ','  back = POSITIVE_DOUBLE ',' left = POSITIVE_DOUBLE ')'
		//'WALLS'
		public Keyword getWALLSKeyword_0() { return cWALLSKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(front=FrontWall | right=RightWall | back=BackWall | left=LeftWall | up=UpWall)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//front=FrontWall
		public Assignment getFrontAssignment_2_0() { return cFrontAssignment_2_0; }
		
		//FrontWall
		public RuleCall getFrontFrontWallParserRuleCall_2_0_0() { return cFrontFrontWallParserRuleCall_2_0_0; }
		
		//right=RightWall
		public Assignment getRightAssignment_2_1() { return cRightAssignment_2_1; }
		
		//RightWall
		public RuleCall getRightRightWallParserRuleCall_2_1_0() { return cRightRightWallParserRuleCall_2_1_0; }
		
		//back=BackWall
		public Assignment getBackAssignment_2_2() { return cBackAssignment_2_2; }
		
		//BackWall
		public RuleCall getBackBackWallParserRuleCall_2_2_0() { return cBackBackWallParserRuleCall_2_2_0; }
		
		//left=LeftWall
		public Assignment getLeftAssignment_2_3() { return cLeftAssignment_2_3; }
		
		//LeftWall
		public RuleCall getLeftLeftWallParserRuleCall_2_3_0() { return cLeftLeftWallParserRuleCall_2_3_0; }
		
		//up=UpWall
		public Assignment getUpAssignment_2_4() { return cUpAssignment_2_4; }
		
		//UpWall
		public RuleCall getUpUpWallParserRuleCall_2_4_0() { return cUpUpWallParserRuleCall_2_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class FrontWallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.FrontWall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFrontKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuePOSITIVE_DOUBLEParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//FrontWall:
		//	'front' '=' value=POSITIVE_DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//'front' '=' value=POSITIVE_DOUBLE
		public Group getGroup() { return cGroup; }
		
		//'front'
		public Keyword getFrontKeyword_0() { return cFrontKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=POSITIVE_DOUBLE
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//POSITIVE_DOUBLE
		public RuleCall getValuePOSITIVE_DOUBLEParserRuleCall_2_0() { return cValuePOSITIVE_DOUBLEParserRuleCall_2_0; }
	}
	public class RightWallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.RightWall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuePOSITIVE_DOUBLEParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//RightWall:
		//	'right' '=' value=POSITIVE_DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//'right' '=' value=POSITIVE_DOUBLE
		public Group getGroup() { return cGroup; }
		
		//'right'
		public Keyword getRightKeyword_0() { return cRightKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=POSITIVE_DOUBLE
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//POSITIVE_DOUBLE
		public RuleCall getValuePOSITIVE_DOUBLEParserRuleCall_2_0() { return cValuePOSITIVE_DOUBLEParserRuleCall_2_0; }
	}
	public class LeftWallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.LeftWall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuePOSITIVE_DOUBLEParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//LeftWall:
		//	'left' '=' value=POSITIVE_DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//'left' '=' value=POSITIVE_DOUBLE
		public Group getGroup() { return cGroup; }
		
		//'left'
		public Keyword getLeftKeyword_0() { return cLeftKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=POSITIVE_DOUBLE
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//POSITIVE_DOUBLE
		public RuleCall getValuePOSITIVE_DOUBLEParserRuleCall_2_0() { return cValuePOSITIVE_DOUBLEParserRuleCall_2_0; }
	}
	public class BackWallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.BackWall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBackKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuePOSITIVE_DOUBLEParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//BackWall:
		//	'back' '=' value=POSITIVE_DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//'back' '=' value=POSITIVE_DOUBLE
		public Group getGroup() { return cGroup; }
		
		//'back'
		public Keyword getBackKeyword_0() { return cBackKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=POSITIVE_DOUBLE
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//POSITIVE_DOUBLE
		public RuleCall getValuePOSITIVE_DOUBLEParserRuleCall_2_0() { return cValuePOSITIVE_DOUBLEParserRuleCall_2_0; }
	}
	public class UpWallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.UpWall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuePOSITIVE_DOUBLEParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//UpWall:
		//	'up' '=' value=POSITIVE_DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//'up' '=' value=POSITIVE_DOUBLE
		public Group getGroup() { return cGroup; }
		
		//'up'
		public Keyword getUpKeyword_0() { return cUpKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=POSITIVE_DOUBLE
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//POSITIVE_DOUBLE
		public RuleCall getValuePOSITIVE_DOUBLEParserRuleCall_2_0() { return cValuePOSITIVE_DOUBLEParserRuleCall_2_0; }
	}
	
	
	private final ProgramElements pProgram;
	private final MainElements pMain;
	private final FlyElements pFly;
	private final EnvironmentElements pEnvironment;
	private final TakeoffElements pTakeoff;
	private final LandElements pLand;
	private final SuperCommandElements pSuperCommand;
	private final CommandElements pCommand;
	private final DOUBLEElements pDOUBLE;
	private final POSITIVE_DOUBLEElements pPOSITIVE_DOUBLE;
	private final GoToElements pGoTo;
	private final UpElements pUp;
	private final DownElements pDown;
	private final LeftElements pLeft;
	private final RightElements pRight;
	private final ForwardElements pForward;
	private final BackwardElements pBackward;
	private final RotateLElements pRotateL;
	private final RotateRElements pRotateR;
	private final WaitElements pWait;
	private final DroneElements pDrone;
	private final ObjectElements pObject;
	private final OriginElements pOrigin;
	private final SizeElements pSize;
	private final PositionElements pPosition;
	private final VectorElements pVector;
	private final ColorElements pColor;
	private final WallsElements pWalls;
	private final FrontWallElements pFrontWall;
	private final RightWallElements pRightWall;
	private final LeftWallElements pLeftWall;
	private final BackWallElements pBackWall;
	private final UpWallElements pUpWall;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public XDroneGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pMain = new MainElements();
		this.pFly = new FlyElements();
		this.pEnvironment = new EnvironmentElements();
		this.pTakeoff = new TakeoffElements();
		this.pLand = new LandElements();
		this.pSuperCommand = new SuperCommandElements();
		this.pCommand = new CommandElements();
		this.pDOUBLE = new DOUBLEElements();
		this.pPOSITIVE_DOUBLE = new POSITIVE_DOUBLEElements();
		this.pGoTo = new GoToElements();
		this.pUp = new UpElements();
		this.pDown = new DownElements();
		this.pLeft = new LeftElements();
		this.pRight = new RightElements();
		this.pForward = new ForwardElements();
		this.pBackward = new BackwardElements();
		this.pRotateL = new RotateLElements();
		this.pRotateR = new RotateRElements();
		this.pWait = new WaitElements();
		this.pDrone = new DroneElements();
		this.pObject = new ObjectElements();
		this.pOrigin = new OriginElements();
		this.pSize = new SizeElements();
		this.pPosition = new PositionElements();
		this.pVector = new VectorElements();
		this.pColor = new ColorElements();
		this.pWalls = new WallsElements();
		this.pFrontWall = new FrontWallElements();
		this.pRightWall = new RightWallElements();
		this.pLeftWall = new LeftWallElements();
		this.pBackWall = new BackWallElements();
		this.pUpWall = new UpWallElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ic.ac.uk.xdrone.XDrone".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	main=Main;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Main:
	//	fly=Fly
	//	environment=Environment?;
	public MainElements getMainAccess() {
		return pMain;
	}
	
	public ParserRule getMainRule() {
		return getMainAccess().getRule();
	}
	
	//Fly:
	//	'fly' '(' ')' '{' (takeoff+=Takeoff commands+=SuperCommand*
	//	land+=Land)
	//	'}';
	public FlyElements getFlyAccess() {
		return pFly;
	}
	
	public ParserRule getFlyRule() {
		return getFlyAccess().getRule();
	}
	
	//Environment:
	//	{Environment} 'environment' '(' ')' '{' (drone+=Drone | walls+=Walls | objects+=Object)*
	//	// 	(drone+=Drone)?
	//	//  	((objects+=Object))*
	//	'}';
	public EnvironmentElements getEnvironmentAccess() {
		return pEnvironment;
	}
	
	public ParserRule getEnvironmentRule() {
		return getEnvironmentAccess().getRule();
	}
	
	////UserFunction:
	////	(name = ID) '()'
	////	'{'
	////	(func+=Command)*
	////	'}'
	////;
	//Takeoff:
	//	'TAKEOFF' '(' ')';
	public TakeoffElements getTakeoffAccess() {
		return pTakeoff;
	}
	
	public ParserRule getTakeoffRule() {
		return getTakeoffAccess().getRule();
	}
	
	//Land:
	//	'LAND' '(' ')';
	public LandElements getLandAccess() {
		return pLand;
	}
	
	public ParserRule getLandRule() {
		return getLandAccess().getRule();
	}
	
	//SuperCommand:
	//	Command
	//	//	| FunctionName
	//;
	public SuperCommandElements getSuperCommandAccess() {
		return pSuperCommand;
	}
	
	public ParserRule getSuperCommandRule() {
		return getSuperCommandAccess().getRule();
	}
	
	//Command:
	//	Up
	//	| Down
	//	| Left
	//	| Right
	//	| Forward
	//	| Backward
	//	| RotateL
	//	| RotateR
	//	| Wait
	//	//	| Move
	//	//	| Rotate
	//	| GoTo;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//DOUBLE:
	//	'-' POSITIVE_DOUBLE
	//	| POSITIVE_DOUBLE;
	public DOUBLEElements getDOUBLEAccess() {
		return pDOUBLE;
	}
	
	public ParserRule getDOUBLERule() {
		return getDOUBLEAccess().getRule();
	}
	
	//POSITIVE_DOUBLE:
	//	INT '.' INT
	//	| INT;
	public POSITIVE_DOUBLEElements getPOSITIVE_DOUBLEAccess() {
		return pPOSITIVE_DOUBLE;
	}
	
	public ParserRule getPOSITIVE_DOUBLERule() {
		return getPOSITIVE_DOUBLEAccess().getRule();
	}
	
	//GoTo:
	//	'GOTO' '(' object_name=STRING ')';
	public GoToElements getGoToAccess() {
		return pGoTo;
	}
	
	public ParserRule getGoToRule() {
		return getGoToAccess().getRule();
	}
	
	////Move:
	////	'MOVE' vector=Vector
	////;
	////Rotate: 
	////	'ROTATE' '('angle = DOUBLE')'
	////;
	//Up:
	//	'UP' '(' distance=DOUBLE ')';
	public UpElements getUpAccess() {
		return pUp;
	}
	
	public ParserRule getUpRule() {
		return getUpAccess().getRule();
	}
	
	//Down:
	//	'DOWN' '(' distance=DOUBLE ')';
	public DownElements getDownAccess() {
		return pDown;
	}
	
	public ParserRule getDownRule() {
		return getDownAccess().getRule();
	}
	
	//Left:
	//	'LEFT' '(' distance=DOUBLE ')';
	public LeftElements getLeftAccess() {
		return pLeft;
	}
	
	public ParserRule getLeftRule() {
		return getLeftAccess().getRule();
	}
	
	//Right:
	//	'RIGHT' '(' distance=DOUBLE ')';
	public RightElements getRightAccess() {
		return pRight;
	}
	
	public ParserRule getRightRule() {
		return getRightAccess().getRule();
	}
	
	//Forward:
	//	'FORWARD' '(' distance=DOUBLE ')';
	public ForwardElements getForwardAccess() {
		return pForward;
	}
	
	public ParserRule getForwardRule() {
		return getForwardAccess().getRule();
	}
	
	//Backward:
	//	'BACKWARD' '(' distance=DOUBLE ')';
	public BackwardElements getBackwardAccess() {
		return pBackward;
	}
	
	public ParserRule getBackwardRule() {
		return getBackwardAccess().getRule();
	}
	
	//RotateL:
	//	'ROTATELEFT' '(' angle=INT ')';
	public RotateLElements getRotateLAccess() {
		return pRotateL;
	}
	
	public ParserRule getRotateLRule() {
		return getRotateLAccess().getRule();
	}
	
	//RotateR:
	//	'ROTATERIGHT' '(' angle=INT ')';
	public RotateRElements getRotateRAccess() {
		return pRotateR;
	}
	
	public ParserRule getRotateRRule() {
		return getRotateRAccess().getRule();
	}
	
	//Wait:
	//	'WAIT' '(' seconds=POSITIVE_DOUBLE ')';
	public WaitElements getWaitAccess() {
		return pWait;
	}
	
	public ParserRule getWaitRule() {
		return getWaitAccess().getRule();
	}
	
	////FunctionName:
	////	func_name = ID '()'
	////;
	//Drone: //	'DRONE' vector=Vector
	//	'DRONE' '{' (position=Position | 'rotation' '=' rotation=DOUBLE)* '}';
	public DroneElements getDroneAccess() {
		return pDrone;
	}
	
	public ParserRule getDroneRule() {
		return getDroneAccess().getRule();
	}
	
	//Object:
	//	object_name=ID '=' '{' (origin=Origin | size=Size | color=Color)*
	//	'}';
	public ObjectElements getObjectAccess() {
		return pObject;
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}
	
	//Origin:
	//	'origin' '=' vector=Vector;
	public OriginElements getOriginAccess() {
		return pOrigin;
	}
	
	public ParserRule getOriginRule() {
		return getOriginAccess().getRule();
	}
	
	//Size:
	//	'size' '=' vector=Vector;
	public SizeElements getSizeAccess() {
		return pSize;
	}
	
	public ParserRule getSizeRule() {
		return getSizeAccess().getRule();
	}
	
	//Position:
	//	'position' '=' vector=Vector;
	public PositionElements getPositionAccess() {
		return pPosition;
	}
	
	public ParserRule getPositionRule() {
		return getPositionAccess().getRule();
	}
	
	//Vector:
	//	'(' x=DOUBLE ',' y=DOUBLE ',' z=DOUBLE ')';
	public VectorElements getVectorAccess() {
		return pVector;
	}
	
	public ParserRule getVectorRule() {
		return getVectorAccess().getRule();
	}
	
	//Color:
	//	'color' '=' color_value=STRING;
	public ColorElements getColorAccess() {
		return pColor;
	}
	
	public ParserRule getColorRule() {
		return getColorAccess().getRule();
	}
	
	//Walls: //	'WALLS' '(' front = POSITIVE_DOUBLE ',' right = POSITIVE_DOUBLE ','  back = POSITIVE_DOUBLE ',' left = POSITIVE_DOUBLE ')'
	//	'WALLS' '{' (front=FrontWall | right=RightWall | back=BackWall | left=LeftWall | up=UpWall)* '}';
	public WallsElements getWallsAccess() {
		return pWalls;
	}
	
	public ParserRule getWallsRule() {
		return getWallsAccess().getRule();
	}
	
	//FrontWall:
	//	'front' '=' value=POSITIVE_DOUBLE;
	public FrontWallElements getFrontWallAccess() {
		return pFrontWall;
	}
	
	public ParserRule getFrontWallRule() {
		return getFrontWallAccess().getRule();
	}
	
	//RightWall:
	//	'right' '=' value=POSITIVE_DOUBLE;
	public RightWallElements getRightWallAccess() {
		return pRightWall;
	}
	
	public ParserRule getRightWallRule() {
		return getRightWallAccess().getRule();
	}
	
	//LeftWall:
	//	'left' '=' value=POSITIVE_DOUBLE;
	public LeftWallElements getLeftWallAccess() {
		return pLeftWall;
	}
	
	public ParserRule getLeftWallRule() {
		return getLeftWallAccess().getRule();
	}
	
	//BackWall:
	//	'back' '=' value=POSITIVE_DOUBLE;
	public BackWallElements getBackWallAccess() {
		return pBackWall;
	}
	
	public ParserRule getBackWallRule() {
		return getBackWallAccess().getRule();
	}
	
	//UpWall:
	//	'up' '=' value=POSITIVE_DOUBLE;
	public UpWallElements getUpWallAccess() {
		return pUpWall;
	}
	
	public ParserRule getUpWallRule() {
		return getUpWallAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
