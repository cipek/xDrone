/*
 * generated by Xtext 2.17.0
 */
package ic.ac.uk.xdrone.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class XDroneGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFlyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFlyFlyParserRuleCall_0_0 = (RuleCall)cFlyAssignment_0.eContents().get(0);
		private final Assignment cEnvironmentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnvironmentEnvironmentParserRuleCall_1_0 = (RuleCall)cEnvironmentAssignment_1.eContents().get(0);
		
		//Program:
		//	fly=Fly
		//	environment=Environment;
		@Override public ParserRule getRule() { return rule; }
		
		//fly=Fly environment=Environment
		public Group getGroup() { return cGroup; }
		
		//fly=Fly
		public Assignment getFlyAssignment_0() { return cFlyAssignment_0; }
		
		//Fly
		public RuleCall getFlyFlyParserRuleCall_0_0() { return cFlyFlyParserRuleCall_0_0; }
		
		//environment=Environment
		public Assignment getEnvironmentAssignment_1() { return cEnvironmentAssignment_1; }
		
		//Environment
		public RuleCall getEnvironmentEnvironmentParserRuleCall_1_0() { return cEnvironmentEnvironmentParserRuleCall_1_0; }
	}
	public class FlyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Fly");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cTakeoffAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTakeoffTakeoffParserRuleCall_1_0_0 = (RuleCall)cTakeoffAssignment_1_0.eContents().get(0);
		private final Assignment cCommandsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCommandsSuperCommandParserRuleCall_1_1_0 = (RuleCall)cCommandsAssignment_1_1.eContents().get(0);
		private final Assignment cLandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLandLandParserRuleCall_1_2_0 = (RuleCall)cLandAssignment_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Fly:
		//	'fly(){' (takeoff+=Takeoff commands+=SuperCommand*
		//	land+=Land)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'fly(){' (takeoff+=Takeoff commands+=SuperCommand* land+=Land) '}'
		public Group getGroup() { return cGroup; }
		
		//'fly(){'
		public Keyword getFlyKeyword_0() { return cFlyKeyword_0; }
		
		//takeoff+=Takeoff commands+=SuperCommand* land+=Land
		public Group getGroup_1() { return cGroup_1; }
		
		//takeoff+=Takeoff
		public Assignment getTakeoffAssignment_1_0() { return cTakeoffAssignment_1_0; }
		
		//Takeoff
		public RuleCall getTakeoffTakeoffParserRuleCall_1_0_0() { return cTakeoffTakeoffParserRuleCall_1_0_0; }
		
		//commands+=SuperCommand*
		public Assignment getCommandsAssignment_1_1() { return cCommandsAssignment_1_1; }
		
		//SuperCommand
		public RuleCall getCommandsSuperCommandParserRuleCall_1_1_0() { return cCommandsSuperCommandParserRuleCall_1_1_0; }
		
		//land+=Land
		public Assignment getLandAssignment_1_2() { return cLandAssignment_1_2; }
		
		//Land
		public RuleCall getLandLandParserRuleCall_1_2_0() { return cLandLandParserRuleCall_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class EnvironmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Environment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnvironmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEnvironmentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDroneAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDroneDroneParserRuleCall_2_0 = (RuleCall)cDroneAssignment_2.eContents().get(0);
		private final Assignment cObjectsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectsObjectParserRuleCall_3_0 = (RuleCall)cObjectsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Environment:
		//	{Environment} 'environment(){'
		//	drone+=Drone?
		//	objects+=Object*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Environment} 'environment(){' drone+=Drone? objects+=Object* '}'
		public Group getGroup() { return cGroup; }
		
		//{Environment}
		public Action getEnvironmentAction_0() { return cEnvironmentAction_0; }
		
		//'environment(){'
		public Keyword getEnvironmentKeyword_1() { return cEnvironmentKeyword_1; }
		
		//drone+=Drone?
		public Assignment getDroneAssignment_2() { return cDroneAssignment_2; }
		
		//Drone
		public RuleCall getDroneDroneParserRuleCall_2_0() { return cDroneDroneParserRuleCall_2_0; }
		
		//objects+=Object*
		public Assignment getObjectsAssignment_3() { return cObjectsAssignment_3; }
		
		//Object
		public RuleCall getObjectsObjectParserRuleCall_3_0() { return cObjectsObjectParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class UserFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.UserFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFuncAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFuncCommandParserRuleCall_3_0 = (RuleCall)cFuncAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//UserFunction:
		//	name=ID '()'
		//	'{'
		//	func+=Command*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '()' '{' func+=Command* '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_1() { return cLeftParenthesisRightParenthesisKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//func+=Command*
		public Assignment getFuncAssignment_3() { return cFuncAssignment_3; }
		
		//Command
		public RuleCall getFuncCommandParserRuleCall_3_0() { return cFuncCommandParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TakeoffElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Takeoff");
		private final Keyword cTAKEOFFKeyword = (Keyword)rule.eContents().get(1);
		
		//Takeoff:
		//	'TAKEOFF()';
		@Override public ParserRule getRule() { return rule; }
		
		//'TAKEOFF()'
		public Keyword getTAKEOFFKeyword() { return cTAKEOFFKeyword; }
	}
	public class LandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Land");
		private final Keyword cLANDKeyword = (Keyword)rule.eContents().get(1);
		
		//Land:
		//	'LAND()';
		@Override public ParserRule getRule() { return rule; }
		
		//'LAND()'
		public Keyword getLANDKeyword() { return cLANDKeyword; }
	}
	public class SuperCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.SuperCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCommandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SuperCommand:
		//	Command
		//	| FunctionName;
		@Override public ParserRule getRule() { return rule; }
		
		//Command | FunctionName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Command
		public RuleCall getCommandParserRuleCall_0() { return cCommandParserRuleCall_0; }
		
		//FunctionName
		public RuleCall getFunctionNameParserRuleCall_1() { return cFunctionNameParserRuleCall_1; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDownParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLeftParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRightParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cForwardParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBackwardParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRotateLParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cRotateRParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cWaitParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Command:
		//	Up
		//	| Down
		//	| Left
		//	| Right
		//	| Forward
		//	| Backward
		//	| RotateL
		//	| RotateR
		//	| Wait;
		@Override public ParserRule getRule() { return rule; }
		
		//Up | Down | Left | Right | Forward | Backward | RotateL | RotateR | Wait
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Up
		public RuleCall getUpParserRuleCall_0() { return cUpParserRuleCall_0; }
		
		//Down
		public RuleCall getDownParserRuleCall_1() { return cDownParserRuleCall_1; }
		
		//Left
		public RuleCall getLeftParserRuleCall_2() { return cLeftParserRuleCall_2; }
		
		//Right
		public RuleCall getRightParserRuleCall_3() { return cRightParserRuleCall_3; }
		
		//Forward
		public RuleCall getForwardParserRuleCall_4() { return cForwardParserRuleCall_4; }
		
		//Backward
		public RuleCall getBackwardParserRuleCall_5() { return cBackwardParserRuleCall_5; }
		
		//RotateL
		public RuleCall getRotateLParserRuleCall_6() { return cRotateLParserRuleCall_6; }
		
		//RotateR
		public RuleCall getRotateRParserRuleCall_7() { return cRotateRParserRuleCall_7; }
		
		//Wait
		public RuleCall getWaitParserRuleCall_8() { return cWaitParserRuleCall_8; }
	}
	public class DOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.DOUBLE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cHyphenMinusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		//DOUBLE:
		//	INT '.' INT
		//	| '-' INT '.' INT
		//	| INT
		//	| '-' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT | '-' INT '.' INT | INT | '-' INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT '.' INT
		public Group getGroup_0() { return cGroup_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_0() { return cINTTerminalRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_2() { return cINTTerminalRuleCall_0_2; }
		
		//'-' INT '.' INT
		public Group getGroup_1() { return cGroup_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0() { return cHyphenMinusKeyword_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_2() { return cFullStopKeyword_1_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_3() { return cINTTerminalRuleCall_1_3; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//'-' INT
		public Group getGroup_3() { return cGroup_3; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_3_0() { return cHyphenMinusKeyword_3_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3_1() { return cINTTerminalRuleCall_3_1; }
	}
	public class UpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Up");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDistanceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDistanceDOUBLEParserRuleCall_2_0 = (RuleCall)cDistanceAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Up:
		//	'UP' '(' distance=DOUBLE ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'UP' '(' distance=DOUBLE ')'
		public Group getGroup() { return cGroup; }
		
		//'UP'
		public Keyword getUPKeyword_0() { return cUPKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//distance=DOUBLE
		public Assignment getDistanceAssignment_2() { return cDistanceAssignment_2; }
		
		//DOUBLE
		public RuleCall getDistanceDOUBLEParserRuleCall_2_0() { return cDistanceDOUBLEParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class DownElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Down");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDOWNKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDistanceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDistanceDOUBLEParserRuleCall_2_0 = (RuleCall)cDistanceAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Down:
		//	'DOWN' '(' distance=DOUBLE ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'DOWN' '(' distance=DOUBLE ')'
		public Group getGroup() { return cGroup; }
		
		//'DOWN'
		public Keyword getDOWNKeyword_0() { return cDOWNKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//distance=DOUBLE
		public Assignment getDistanceAssignment_2() { return cDistanceAssignment_2; }
		
		//DOUBLE
		public RuleCall getDistanceDOUBLEParserRuleCall_2_0() { return cDistanceDOUBLEParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class LeftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Left");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLEFTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDistanceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDistanceDOUBLEParserRuleCall_2_0 = (RuleCall)cDistanceAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Left:
		//	'LEFT' '(' distance=DOUBLE ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'LEFT' '(' distance=DOUBLE ')'
		public Group getGroup() { return cGroup; }
		
		//'LEFT'
		public Keyword getLEFTKeyword_0() { return cLEFTKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//distance=DOUBLE
		public Assignment getDistanceAssignment_2() { return cDistanceAssignment_2; }
		
		//DOUBLE
		public RuleCall getDistanceDOUBLEParserRuleCall_2_0() { return cDistanceDOUBLEParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class RightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Right");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRIGHTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDistanceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDistanceDOUBLEParserRuleCall_2_0 = (RuleCall)cDistanceAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Right:
		//	'RIGHT' '(' distance=DOUBLE ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'RIGHT' '(' distance=DOUBLE ')'
		public Group getGroup() { return cGroup; }
		
		//'RIGHT'
		public Keyword getRIGHTKeyword_0() { return cRIGHTKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//distance=DOUBLE
		public Assignment getDistanceAssignment_2() { return cDistanceAssignment_2; }
		
		//DOUBLE
		public RuleCall getDistanceDOUBLEParserRuleCall_2_0() { return cDistanceDOUBLEParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ForwardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Forward");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFORWARDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDistanceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDistanceDOUBLEParserRuleCall_2_0 = (RuleCall)cDistanceAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Forward:
		//	'FORWARD' '(' distance=DOUBLE ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'FORWARD' '(' distance=DOUBLE ')'
		public Group getGroup() { return cGroup; }
		
		//'FORWARD'
		public Keyword getFORWARDKeyword_0() { return cFORWARDKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//distance=DOUBLE
		public Assignment getDistanceAssignment_2() { return cDistanceAssignment_2; }
		
		//DOUBLE
		public RuleCall getDistanceDOUBLEParserRuleCall_2_0() { return cDistanceDOUBLEParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class BackwardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Backward");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBACKWARDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDistanceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDistanceDOUBLEParserRuleCall_2_0 = (RuleCall)cDistanceAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Backward:
		//	'BACKWARD' '(' distance=DOUBLE ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'BACKWARD' '(' distance=DOUBLE ')'
		public Group getGroup() { return cGroup; }
		
		//'BACKWARD'
		public Keyword getBACKWARDKeyword_0() { return cBACKWARDKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//distance=DOUBLE
		public Assignment getDistanceAssignment_2() { return cDistanceAssignment_2; }
		
		//DOUBLE
		public RuleCall getDistanceDOUBLEParserRuleCall_2_0() { return cDistanceDOUBLEParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class RotateLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.RotateL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cROTATELEFTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAngleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAngleINTTerminalRuleCall_2_0 = (RuleCall)cAngleAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RotateL:
		//	'ROTATELEFT' '(' angle=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ROTATELEFT' '(' angle=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'ROTATELEFT'
		public Keyword getROTATELEFTKeyword_0() { return cROTATELEFTKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//angle=INT
		public Assignment getAngleAssignment_2() { return cAngleAssignment_2; }
		
		//INT
		public RuleCall getAngleINTTerminalRuleCall_2_0() { return cAngleINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class RotateRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.RotateR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cROTATERIGHTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAngleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAngleINTTerminalRuleCall_2_0 = (RuleCall)cAngleAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RotateR:
		//	'ROTATERIGHT' '(' angle=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ROTATERIGHT' '(' angle=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'ROTATERIGHT'
		public Keyword getROTATERIGHTKeyword_0() { return cROTATERIGHTKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//angle=INT
		public Assignment getAngleAssignment_2() { return cAngleAssignment_2; }
		
		//INT
		public RuleCall getAngleINTTerminalRuleCall_2_0() { return cAngleINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class WaitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Wait");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWAITKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSecondsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSecondsDOUBLEParserRuleCall_2_0 = (RuleCall)cSecondsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Wait:
		//	'WAIT' '(' seconds=DOUBLE ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'WAIT' '(' seconds=DOUBLE ')'
		public Group getGroup() { return cGroup; }
		
		//'WAIT'
		public Keyword getWAITKeyword_0() { return cWAITKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//seconds=DOUBLE
		public Assignment getSecondsAssignment_2() { return cSecondsAssignment_2; }
		
		//DOUBLE
		public RuleCall getSecondsDOUBLEParserRuleCall_2_0() { return cSecondsDOUBLEParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Move");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMOVEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cXAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXDOUBLEParserRuleCall_2_0 = (RuleCall)cXAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cYAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cYDOUBLEParserRuleCall_4_0 = (RuleCall)cYAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cZAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cZDOUBLEParserRuleCall_6_0 = (RuleCall)cZAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Move:
		//	'MOVE' '(' x=DOUBLE ',' y=DOUBLE ',' z=DOUBLE ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'MOVE' '(' x=DOUBLE ',' y=DOUBLE ',' z=DOUBLE ')'
		public Group getGroup() { return cGroup; }
		
		//'MOVE'
		public Keyword getMOVEKeyword_0() { return cMOVEKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//x=DOUBLE
		public Assignment getXAssignment_2() { return cXAssignment_2; }
		
		//DOUBLE
		public RuleCall getXDOUBLEParserRuleCall_2_0() { return cXDOUBLEParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//y=DOUBLE
		public Assignment getYAssignment_4() { return cYAssignment_4; }
		
		//DOUBLE
		public RuleCall getYDOUBLEParserRuleCall_4_0() { return cYDOUBLEParserRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//z=DOUBLE
		public Assignment getZAssignment_6() { return cZAssignment_6; }
		
		//DOUBLE
		public RuleCall getZDOUBLEParserRuleCall_6_0() { return cZDOUBLEParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class FunctionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.FunctionName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunc_nameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunc_nameIDTerminalRuleCall_0_0 = (RuleCall)cFunc_nameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FunctionName:
		//	func_name=ID '()';
		@Override public ParserRule getRule() { return rule; }
		
		//func_name=ID '()'
		public Group getGroup() { return cGroup; }
		
		//func_name=ID
		public Assignment getFunc_nameAssignment_0() { return cFunc_nameAssignment_0; }
		
		//ID
		public RuleCall getFunc_nameIDTerminalRuleCall_0_0() { return cFunc_nameIDTerminalRuleCall_0_0; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_1() { return cLeftParenthesisRightParenthesisKeyword_1; }
	}
	public class DroneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Drone");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDRONEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cXAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXDOUBLEParserRuleCall_2_0 = (RuleCall)cXAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cYAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cYDOUBLEParserRuleCall_4_0 = (RuleCall)cYAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cZAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cZDOUBLEParserRuleCall_6_0 = (RuleCall)cZAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Drone:
		//	'DRONE' '(' x=DOUBLE ',' y=DOUBLE ',' z=DOUBLE ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'DRONE' '(' x=DOUBLE ',' y=DOUBLE ',' z=DOUBLE ')'
		public Group getGroup() { return cGroup; }
		
		//'DRONE'
		public Keyword getDRONEKeyword_0() { return cDRONEKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//x=DOUBLE
		public Assignment getXAssignment_2() { return cXAssignment_2; }
		
		//DOUBLE
		public RuleCall getXDOUBLEParserRuleCall_2_0() { return cXDOUBLEParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//y=DOUBLE
		public Assignment getYAssignment_4() { return cYAssignment_4; }
		
		//DOUBLE
		public RuleCall getYDOUBLEParserRuleCall_4_0() { return cYDOUBLEParserRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//z=DOUBLE
		public Assignment getZAssignment_6() { return cZAssignment_6; }
		
		//DOUBLE
		public RuleCall getZDOUBLEParserRuleCall_6_0() { return cZDOUBLEParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Object");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cObject_nameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cObject_nameIDTerminalRuleCall_0_0 = (RuleCall)cObject_nameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSxAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSxDOUBLEParserRuleCall_2_0 = (RuleCall)cSxAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSyDOUBLEParserRuleCall_4_0 = (RuleCall)cSyAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSzAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSzDOUBLEParserRuleCall_6_0 = (RuleCall)cSzAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cLxAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cLxDOUBLEParserRuleCall_8_0 = (RuleCall)cLxAssignment_8.eContents().get(0);
		private final Keyword cCommaKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cLyAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cLyDOUBLEParserRuleCall_10_0 = (RuleCall)cLyAssignment_10.eContents().get(0);
		private final Keyword cCommaKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cLzAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cLzDOUBLEParserRuleCall_12_0 = (RuleCall)cLzAssignment_12.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//Object:
		//	object_name=ID '(' sx=DOUBLE ',' sy=DOUBLE ',' sz=DOUBLE ',' lx=DOUBLE ',' ly=DOUBLE ',' lz=DOUBLE ')';
		@Override public ParserRule getRule() { return rule; }
		
		//object_name=ID '(' sx=DOUBLE ',' sy=DOUBLE ',' sz=DOUBLE ',' lx=DOUBLE ',' ly=DOUBLE ',' lz=DOUBLE ')'
		public Group getGroup() { return cGroup; }
		
		//object_name=ID
		public Assignment getObject_nameAssignment_0() { return cObject_nameAssignment_0; }
		
		//ID
		public RuleCall getObject_nameIDTerminalRuleCall_0_0() { return cObject_nameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//sx=DOUBLE
		public Assignment getSxAssignment_2() { return cSxAssignment_2; }
		
		//DOUBLE
		public RuleCall getSxDOUBLEParserRuleCall_2_0() { return cSxDOUBLEParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//sy=DOUBLE
		public Assignment getSyAssignment_4() { return cSyAssignment_4; }
		
		//DOUBLE
		public RuleCall getSyDOUBLEParserRuleCall_4_0() { return cSyDOUBLEParserRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//sz=DOUBLE
		public Assignment getSzAssignment_6() { return cSzAssignment_6; }
		
		//DOUBLE
		public RuleCall getSzDOUBLEParserRuleCall_6_0() { return cSzDOUBLEParserRuleCall_6_0; }
		
		//','
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//lx=DOUBLE
		public Assignment getLxAssignment_8() { return cLxAssignment_8; }
		
		//DOUBLE
		public RuleCall getLxDOUBLEParserRuleCall_8_0() { return cLxDOUBLEParserRuleCall_8_0; }
		
		//','
		public Keyword getCommaKeyword_9() { return cCommaKeyword_9; }
		
		//ly=DOUBLE
		public Assignment getLyAssignment_10() { return cLyAssignment_10; }
		
		//DOUBLE
		public RuleCall getLyDOUBLEParserRuleCall_10_0() { return cLyDOUBLEParserRuleCall_10_0; }
		
		//','
		public Keyword getCommaKeyword_11() { return cCommaKeyword_11; }
		
		//lz=DOUBLE
		public Assignment getLzAssignment_12() { return cLzAssignment_12; }
		
		//DOUBLE
		public RuleCall getLzDOUBLEParserRuleCall_12_0() { return cLzDOUBLEParserRuleCall_12_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_13() { return cRightParenthesisKeyword_13; }
	}
	
	
	private final ProgramElements pProgram;
	private final FlyElements pFly;
	private final EnvironmentElements pEnvironment;
	private final UserFunctionElements pUserFunction;
	private final TakeoffElements pTakeoff;
	private final LandElements pLand;
	private final SuperCommandElements pSuperCommand;
	private final CommandElements pCommand;
	private final DOUBLEElements pDOUBLE;
	private final UpElements pUp;
	private final DownElements pDown;
	private final LeftElements pLeft;
	private final RightElements pRight;
	private final ForwardElements pForward;
	private final BackwardElements pBackward;
	private final RotateLElements pRotateL;
	private final RotateRElements pRotateR;
	private final WaitElements pWait;
	private final MoveElements pMove;
	private final FunctionNameElements pFunctionName;
	private final DroneElements pDrone;
	private final ObjectElements pObject;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public XDroneGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pFly = new FlyElements();
		this.pEnvironment = new EnvironmentElements();
		this.pUserFunction = new UserFunctionElements();
		this.pTakeoff = new TakeoffElements();
		this.pLand = new LandElements();
		this.pSuperCommand = new SuperCommandElements();
		this.pCommand = new CommandElements();
		this.pDOUBLE = new DOUBLEElements();
		this.pUp = new UpElements();
		this.pDown = new DownElements();
		this.pLeft = new LeftElements();
		this.pRight = new RightElements();
		this.pForward = new ForwardElements();
		this.pBackward = new BackwardElements();
		this.pRotateL = new RotateLElements();
		this.pRotateR = new RotateRElements();
		this.pWait = new WaitElements();
		this.pMove = new MoveElements();
		this.pFunctionName = new FunctionNameElements();
		this.pDrone = new DroneElements();
		this.pObject = new ObjectElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ic.ac.uk.xdrone.XDrone".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	fly=Fly
	//	environment=Environment;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Fly:
	//	'fly(){' (takeoff+=Takeoff commands+=SuperCommand*
	//	land+=Land)
	//	'}';
	public FlyElements getFlyAccess() {
		return pFly;
	}
	
	public ParserRule getFlyRule() {
		return getFlyAccess().getRule();
	}
	
	//Environment:
	//	{Environment} 'environment(){'
	//	drone+=Drone?
	//	objects+=Object*
	//	'}';
	public EnvironmentElements getEnvironmentAccess() {
		return pEnvironment;
	}
	
	public ParserRule getEnvironmentRule() {
		return getEnvironmentAccess().getRule();
	}
	
	//UserFunction:
	//	name=ID '()'
	//	'{'
	//	func+=Command*
	//	'}';
	public UserFunctionElements getUserFunctionAccess() {
		return pUserFunction;
	}
	
	public ParserRule getUserFunctionRule() {
		return getUserFunctionAccess().getRule();
	}
	
	//Takeoff:
	//	'TAKEOFF()';
	public TakeoffElements getTakeoffAccess() {
		return pTakeoff;
	}
	
	public ParserRule getTakeoffRule() {
		return getTakeoffAccess().getRule();
	}
	
	//Land:
	//	'LAND()';
	public LandElements getLandAccess() {
		return pLand;
	}
	
	public ParserRule getLandRule() {
		return getLandAccess().getRule();
	}
	
	//SuperCommand:
	//	Command
	//	| FunctionName;
	public SuperCommandElements getSuperCommandAccess() {
		return pSuperCommand;
	}
	
	public ParserRule getSuperCommandRule() {
		return getSuperCommandAccess().getRule();
	}
	
	//Command:
	//	Up
	//	| Down
	//	| Left
	//	| Right
	//	| Forward
	//	| Backward
	//	| RotateL
	//	| RotateR
	//	| Wait;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//DOUBLE:
	//	INT '.' INT
	//	| '-' INT '.' INT
	//	| INT
	//	| '-' INT;
	public DOUBLEElements getDOUBLEAccess() {
		return pDOUBLE;
	}
	
	public ParserRule getDOUBLERule() {
		return getDOUBLEAccess().getRule();
	}
	
	//Up:
	//	'UP' '(' distance=DOUBLE ')';
	public UpElements getUpAccess() {
		return pUp;
	}
	
	public ParserRule getUpRule() {
		return getUpAccess().getRule();
	}
	
	//Down:
	//	'DOWN' '(' distance=DOUBLE ')';
	public DownElements getDownAccess() {
		return pDown;
	}
	
	public ParserRule getDownRule() {
		return getDownAccess().getRule();
	}
	
	//Left:
	//	'LEFT' '(' distance=DOUBLE ')';
	public LeftElements getLeftAccess() {
		return pLeft;
	}
	
	public ParserRule getLeftRule() {
		return getLeftAccess().getRule();
	}
	
	//Right:
	//	'RIGHT' '(' distance=DOUBLE ')';
	public RightElements getRightAccess() {
		return pRight;
	}
	
	public ParserRule getRightRule() {
		return getRightAccess().getRule();
	}
	
	//Forward:
	//	'FORWARD' '(' distance=DOUBLE ')';
	public ForwardElements getForwardAccess() {
		return pForward;
	}
	
	public ParserRule getForwardRule() {
		return getForwardAccess().getRule();
	}
	
	//Backward:
	//	'BACKWARD' '(' distance=DOUBLE ')';
	public BackwardElements getBackwardAccess() {
		return pBackward;
	}
	
	public ParserRule getBackwardRule() {
		return getBackwardAccess().getRule();
	}
	
	//RotateL:
	//	'ROTATELEFT' '(' angle=INT ')';
	public RotateLElements getRotateLAccess() {
		return pRotateL;
	}
	
	public ParserRule getRotateLRule() {
		return getRotateLAccess().getRule();
	}
	
	//RotateR:
	//	'ROTATERIGHT' '(' angle=INT ')';
	public RotateRElements getRotateRAccess() {
		return pRotateR;
	}
	
	public ParserRule getRotateRRule() {
		return getRotateRAccess().getRule();
	}
	
	//Wait:
	//	'WAIT' '(' seconds=DOUBLE ')';
	public WaitElements getWaitAccess() {
		return pWait;
	}
	
	public ParserRule getWaitRule() {
		return getWaitAccess().getRule();
	}
	
	//Move:
	//	'MOVE' '(' x=DOUBLE ',' y=DOUBLE ',' z=DOUBLE ')';
	public MoveElements getMoveAccess() {
		return pMove;
	}
	
	public ParserRule getMoveRule() {
		return getMoveAccess().getRule();
	}
	
	//FunctionName:
	//	func_name=ID '()';
	public FunctionNameElements getFunctionNameAccess() {
		return pFunctionName;
	}
	
	public ParserRule getFunctionNameRule() {
		return getFunctionNameAccess().getRule();
	}
	
	//Drone:
	//	'DRONE' '(' x=DOUBLE ',' y=DOUBLE ',' z=DOUBLE ')';
	public DroneElements getDroneAccess() {
		return pDrone;
	}
	
	public ParserRule getDroneRule() {
		return getDroneAccess().getRule();
	}
	
	//Object:
	//	object_name=ID '(' sx=DOUBLE ',' sy=DOUBLE ',' sz=DOUBLE ',' lx=DOUBLE ',' ly=DOUBLE ',' lz=DOUBLE ')';
	public ObjectElements getObjectAccess() {
		return pObject;
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
