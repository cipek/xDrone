/*
 * generated by Xtext 2.17.0
 */
package ic.ac.uk.xdrone.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class XDroneGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Program");
		private final Assignment cMainAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMainMainParserRuleCall_0 = (RuleCall)cMainAssignment.eContents().get(0);
		
		//Program:
		//	main=Main;
		@Override public ParserRule getRule() { return rule; }
		
		//main=Main
		public Assignment getMainAssignment() { return cMainAssignment; }
		
		//Main
		public RuleCall getMainMainParserRuleCall_0() { return cMainMainParserRuleCall_0; }
	}
	public class MainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Main");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFlyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFlyFlyParserRuleCall_0_0 = (RuleCall)cFlyAssignment_0.eContents().get(0);
		private final Assignment cEnvironmentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnvironmentEnvironmentParserRuleCall_1_0 = (RuleCall)cEnvironmentAssignment_1.eContents().get(0);
		
		//Main:
		//	fly=Fly
		//	environment=Environment?;
		@Override public ParserRule getRule() { return rule; }
		
		//fly=Fly environment=Environment?
		public Group getGroup() { return cGroup; }
		
		//fly=Fly
		public Assignment getFlyAssignment_0() { return cFlyAssignment_0; }
		
		//Fly
		public RuleCall getFlyFlyParserRuleCall_0_0() { return cFlyFlyParserRuleCall_0_0; }
		
		//environment=Environment?
		public Assignment getEnvironmentAssignment_1() { return cEnvironmentAssignment_1; }
		
		//Environment
		public RuleCall getEnvironmentEnvironmentParserRuleCall_1_0() { return cEnvironmentEnvironmentParserRuleCall_1_0; }
	}
	public class FlyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Fly");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cTakeoffAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTakeoffTakeoffParserRuleCall_1_0_0 = (RuleCall)cTakeoffAssignment_1_0.eContents().get(0);
		private final Assignment cCommandsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCommandsSuperCommandParserRuleCall_1_1_0 = (RuleCall)cCommandsAssignment_1_1.eContents().get(0);
		private final Assignment cLandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLandLandParserRuleCall_1_2_0 = (RuleCall)cLandAssignment_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Fly:
		//	'fly(){' (takeoff+=Takeoff commands+=SuperCommand*
		//	land+=Land)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'fly(){' (takeoff+=Takeoff commands+=SuperCommand* land+=Land) '}'
		public Group getGroup() { return cGroup; }
		
		//'fly(){'
		public Keyword getFlyKeyword_0() { return cFlyKeyword_0; }
		
		//takeoff+=Takeoff commands+=SuperCommand* land+=Land
		public Group getGroup_1() { return cGroup_1; }
		
		//takeoff+=Takeoff
		public Assignment getTakeoffAssignment_1_0() { return cTakeoffAssignment_1_0; }
		
		//Takeoff
		public RuleCall getTakeoffTakeoffParserRuleCall_1_0_0() { return cTakeoffTakeoffParserRuleCall_1_0_0; }
		
		//commands+=SuperCommand*
		public Assignment getCommandsAssignment_1_1() { return cCommandsAssignment_1_1; }
		
		//SuperCommand
		public RuleCall getCommandsSuperCommandParserRuleCall_1_1_0() { return cCommandsSuperCommandParserRuleCall_1_1_0; }
		
		//land+=Land
		public Assignment getLandAssignment_1_2() { return cLandAssignment_1_2; }
		
		//Land
		public RuleCall getLandLandParserRuleCall_1_2_0() { return cLandLandParserRuleCall_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class EnvironmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Environment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnvironmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEnvironmentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cDroneAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cDroneDroneParserRuleCall_2_0_0 = (RuleCall)cDroneAssignment_2_0.eContents().get(0);
		private final Assignment cWallsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cWallsWallsParserRuleCall_2_1_0 = (RuleCall)cWallsAssignment_2_1.eContents().get(0);
		private final Assignment cObjectsAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cObjectsObjectParserRuleCall_2_2_0 = (RuleCall)cObjectsAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Environment:
		//	{Environment} 'environment(){' (drone+=Drone | walls+=Walls | objects+=Object)*
		//	// 	(drone+=Drone)?
		//	//  	((objects+=Object))*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Environment} 'environment(){' (drone+=Drone | walls+=Walls | objects+=Object)* // 	(drone+=Drone)?
		////  	((objects+=Object))*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Environment}
		public Action getEnvironmentAction_0() { return cEnvironmentAction_0; }
		
		//'environment(){'
		public Keyword getEnvironmentKeyword_1() { return cEnvironmentKeyword_1; }
		
		//(drone+=Drone | walls+=Walls | objects+=Object)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//drone+=Drone
		public Assignment getDroneAssignment_2_0() { return cDroneAssignment_2_0; }
		
		//Drone
		public RuleCall getDroneDroneParserRuleCall_2_0_0() { return cDroneDroneParserRuleCall_2_0_0; }
		
		//walls+=Walls
		public Assignment getWallsAssignment_2_1() { return cWallsAssignment_2_1; }
		
		//Walls
		public RuleCall getWallsWallsParserRuleCall_2_1_0() { return cWallsWallsParserRuleCall_2_1_0; }
		
		//objects+=Object
		public Assignment getObjectsAssignment_2_2() { return cObjectsAssignment_2_2; }
		
		//Object
		public RuleCall getObjectsObjectParserRuleCall_2_2_0() { return cObjectsObjectParserRuleCall_2_2_0; }
		
		//// 	(drone+=Drone)?
		////  	((objects+=Object))*
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class UserFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.UserFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFuncAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFuncCommandParserRuleCall_3_0 = (RuleCall)cFuncAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//UserFunction:
		//	name=ID '()'
		//	'{'
		//	func+=Command*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '()' '{' func+=Command* '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_1() { return cLeftParenthesisRightParenthesisKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//func+=Command*
		public Assignment getFuncAssignment_3() { return cFuncAssignment_3; }
		
		//Command
		public RuleCall getFuncCommandParserRuleCall_3_0() { return cFuncCommandParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TakeoffElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Takeoff");
		private final Keyword cTAKEOFFKeyword = (Keyword)rule.eContents().get(1);
		
		//Takeoff:
		//	'TAKEOFF()';
		@Override public ParserRule getRule() { return rule; }
		
		//'TAKEOFF()'
		public Keyword getTAKEOFFKeyword() { return cTAKEOFFKeyword; }
	}
	public class LandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Land");
		private final Keyword cLANDKeyword = (Keyword)rule.eContents().get(1);
		
		//Land:
		//	'LAND()';
		@Override public ParserRule getRule() { return rule; }
		
		//'LAND()'
		public Keyword getLANDKeyword() { return cLANDKeyword; }
	}
	public class SuperCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.SuperCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCommandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SuperCommand:
		//	Command
		//	| FunctionName;
		@Override public ParserRule getRule() { return rule; }
		
		//Command | FunctionName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Command
		public RuleCall getCommandParserRuleCall_0() { return cCommandParserRuleCall_0; }
		
		//FunctionName
		public RuleCall getFunctionNameParserRuleCall_1() { return cFunctionNameParserRuleCall_1; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWaitParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMoveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRotateParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFlyToParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Command:
		//	Wait
		//	| Move
		//	| Rotate
		//	| FlyTo;
		@Override public ParserRule getRule() { return rule; }
		
		////	Up 
		////	| Down 
		////	| Left 
		////	| Right 
		////	| Forward 
		////	| Backward
		////	| RotateL
		////	| RotateR
		//Wait | Move | Rotate | FlyTo
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////	Up 
		////	| Down 
		////	| Left 
		////	| Right 
		////	| Forward 
		////	| Backward
		////	| RotateL
		////	| RotateR
		//Wait
		public RuleCall getWaitParserRuleCall_0() { return cWaitParserRuleCall_0; }
		
		//Move
		public RuleCall getMoveParserRuleCall_1() { return cMoveParserRuleCall_1; }
		
		//Rotate
		public RuleCall getRotateParserRuleCall_2() { return cRotateParserRuleCall_2; }
		
		//FlyTo
		public RuleCall getFlyToParserRuleCall_3() { return cFlyToParserRuleCall_3; }
	}
	public class DOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.DOUBLE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cPOSITIVE_DOUBLEParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cPOSITIVE_DOUBLEParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DOUBLE:
		//	'-' POSITIVE_DOUBLE
		//	| POSITIVE_DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//'-' POSITIVE_DOUBLE | POSITIVE_DOUBLE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'-' POSITIVE_DOUBLE
		public Group getGroup_0() { return cGroup_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_0() { return cHyphenMinusKeyword_0_0; }
		
		//POSITIVE_DOUBLE
		public RuleCall getPOSITIVE_DOUBLEParserRuleCall_0_1() { return cPOSITIVE_DOUBLEParserRuleCall_0_1; }
		
		//POSITIVE_DOUBLE
		public RuleCall getPOSITIVE_DOUBLEParserRuleCall_1() { return cPOSITIVE_DOUBLEParserRuleCall_1; }
	}
	public class POSITIVE_DOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.POSITIVE_DOUBLE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//POSITIVE_DOUBLE:
		//	INT '.' INT
		//	| INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT | INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT '.' INT
		public Group getGroup_0() { return cGroup_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_0() { return cINTTerminalRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_2() { return cINTTerminalRuleCall_0_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class FlyToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.FlyTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFLYTOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cObject_nameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObject_nameSTRINGTerminalRuleCall_2_0 = (RuleCall)cObject_nameAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FlyTo:
		//	'FLYTO' '(' object_name=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'FLYTO' '(' object_name=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'FLYTO'
		public Keyword getFLYTOKeyword_0() { return cFLYTOKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//object_name=STRING
		public Assignment getObject_nameAssignment_2() { return cObject_nameAssignment_2; }
		
		//STRING
		public RuleCall getObject_nameSTRINGTerminalRuleCall_2_0() { return cObject_nameSTRINGTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Move");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMOVEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVectorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVectorVectorParserRuleCall_1_0 = (RuleCall)cVectorAssignment_1.eContents().get(0);
		
		//Move:
		//	'MOVE' vector=Vector;
		@Override public ParserRule getRule() { return rule; }
		
		//'MOVE' vector=Vector
		public Group getGroup() { return cGroup; }
		
		//'MOVE'
		public Keyword getMOVEKeyword_0() { return cMOVEKeyword_0; }
		
		//vector=Vector
		public Assignment getVectorAssignment_1() { return cVectorAssignment_1; }
		
		//Vector
		public RuleCall getVectorVectorParserRuleCall_1_0() { return cVectorVectorParserRuleCall_1_0; }
	}
	public class RotateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Rotate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cROTATEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAngleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAngleDOUBLEParserRuleCall_2_0 = (RuleCall)cAngleAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Rotate:
		//	'ROTATE' '(' angle=DOUBLE ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ROTATE' '(' angle=DOUBLE ')'
		public Group getGroup() { return cGroup; }
		
		//'ROTATE'
		public Keyword getROTATEKeyword_0() { return cROTATEKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//angle=DOUBLE
		public Assignment getAngleAssignment_2() { return cAngleAssignment_2; }
		
		//DOUBLE
		public RuleCall getAngleDOUBLEParserRuleCall_2_0() { return cAngleDOUBLEParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class WaitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Wait");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWAITKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSecondsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSecondsPOSITIVE_DOUBLEParserRuleCall_2_0 = (RuleCall)cSecondsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////Up: 
		////	'UP' '('distance = DOUBLE')'
		////;
		////	
		////Down: 
		////	'DOWN' '('distance = DOUBLE')'
		////;
		////Left: 
		////	'LEFT' '('distance = DOUBLE')'
		////;
		////Right: 
		////	'RIGHT' '('distance = DOUBLE')'
		////;
		////Forward: 
		////	'FORWARD' '('distance = DOUBLE')'
		////;
		////Backward: 
		////	'BACKWARD' '('distance = DOUBLE')'
		////;
		////RotateL: 
		////	'ROTATELEFT' '('angle = INT')'
		////;
		////RotateR: 
		////	'ROTATERIGHT' '('angle = INT')'
		////;
		//Wait:
		//	'WAIT' '(' seconds=POSITIVE_DOUBLE ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'WAIT' '(' seconds=POSITIVE_DOUBLE ')'
		public Group getGroup() { return cGroup; }
		
		//'WAIT'
		public Keyword getWAITKeyword_0() { return cWAITKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//seconds=POSITIVE_DOUBLE
		public Assignment getSecondsAssignment_2() { return cSecondsAssignment_2; }
		
		//POSITIVE_DOUBLE
		public RuleCall getSecondsPOSITIVE_DOUBLEParserRuleCall_2_0() { return cSecondsPOSITIVE_DOUBLEParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FunctionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.FunctionName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunc_nameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunc_nameIDTerminalRuleCall_0_0 = (RuleCall)cFunc_nameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FunctionName:
		//	func_name=ID '()';
		@Override public ParserRule getRule() { return rule; }
		
		//func_name=ID '()'
		public Group getGroup() { return cGroup; }
		
		//func_name=ID
		public Assignment getFunc_nameAssignment_0() { return cFunc_nameAssignment_0; }
		
		//ID
		public RuleCall getFunc_nameIDTerminalRuleCall_0_0() { return cFunc_nameIDTerminalRuleCall_0_0; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_1() { return cLeftParenthesisRightParenthesisKeyword_1; }
	}
	public class DroneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Drone");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDRONEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVectorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVectorVectorParserRuleCall_1_0 = (RuleCall)cVectorAssignment_1.eContents().get(0);
		
		//Drone:
		//	'DRONE' vector=Vector;
		@Override public ParserRule getRule() { return rule; }
		
		//'DRONE' vector=Vector
		public Group getGroup() { return cGroup; }
		
		//'DRONE'
		public Keyword getDRONEKeyword_0() { return cDRONEKeyword_0; }
		
		//vector=Vector
		public Assignment getVectorAssignment_1() { return cVectorAssignment_1; }
		
		//Vector
		public RuleCall getVectorVectorParserRuleCall_1_0() { return cVectorVectorParserRuleCall_1_0; }
	}
	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Object");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Assignment cObject_nameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cObject_nameIDTerminalRuleCall_0_0_0 = (RuleCall)cObject_nameAssignment_0_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cOriginAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOriginOriginParserRuleCall_0_2_0 = (RuleCall)cOriginAssignment_0_2.eContents().get(0);
		private final Assignment cSizeAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cSizeSizeParserRuleCall_1_0 = (RuleCall)cSizeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Assignment cColorAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cColorColorParserRuleCall_2_0_0 = (RuleCall)cColorAssignment_2_0.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//Object:
		//	object_name=ID '{'
		//	origin=Origin & size=Size & color=Color?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		////	object_name = ID '(' sx = DOUBLE ',' sz = DOUBLE ',' sy = DOUBLE ',' lx = DOUBLE ',' lz = DOUBLE ',' ly = DOUBLE')' 
		//object_name=ID '{' origin=Origin & size=Size & color=Color? '}'
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		////	object_name = ID '(' sx = DOUBLE ',' sz = DOUBLE ',' sy = DOUBLE ',' lx = DOUBLE ',' lz = DOUBLE ',' ly = DOUBLE')' 
		//object_name=ID '{' origin=Origin
		public Group getGroup_0() { return cGroup_0; }
		
		////	object_name = ID '(' sx = DOUBLE ',' sz = DOUBLE ',' sy = DOUBLE ',' lx = DOUBLE ',' lz = DOUBLE ',' ly = DOUBLE')' 
		//object_name=ID
		public Assignment getObject_nameAssignment_0_0() { return cObject_nameAssignment_0_0; }
		
		//ID
		public RuleCall getObject_nameIDTerminalRuleCall_0_0_0() { return cObject_nameIDTerminalRuleCall_0_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }
		
		//origin=Origin
		public Assignment getOriginAssignment_0_2() { return cOriginAssignment_0_2; }
		
		//Origin
		public RuleCall getOriginOriginParserRuleCall_0_2_0() { return cOriginOriginParserRuleCall_0_2_0; }
		
		//size=Size
		public Assignment getSizeAssignment_1() { return cSizeAssignment_1; }
		
		//Size
		public RuleCall getSizeSizeParserRuleCall_1_0() { return cSizeSizeParserRuleCall_1_0; }
		
		//color=Color? '}'
		public Group getGroup_2() { return cGroup_2; }
		
		//color=Color?
		public Assignment getColorAssignment_2_0() { return cColorAssignment_2_0; }
		
		//Color
		public RuleCall getColorColorParserRuleCall_2_0_0() { return cColorColorParserRuleCall_2_0_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1() { return cRightCurlyBracketKeyword_2_1; }
	}
	public class OriginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Origin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOriginKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVectorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVectorVectorParserRuleCall_2_0 = (RuleCall)cVectorAssignment_2.eContents().get(0);
		
		//Origin:
		//	'origin' '=' vector=Vector;
		@Override public ParserRule getRule() { return rule; }
		
		//'origin' '=' vector=Vector
		public Group getGroup() { return cGroup; }
		
		//'origin'
		public Keyword getOriginKeyword_0() { return cOriginKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//vector=Vector
		public Assignment getVectorAssignment_2() { return cVectorAssignment_2; }
		
		//Vector
		public RuleCall getVectorVectorParserRuleCall_2_0() { return cVectorVectorParserRuleCall_2_0; }
	}
	public class SizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Size");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSizeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVectorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVectorVectorParserRuleCall_2_0 = (RuleCall)cVectorAssignment_2.eContents().get(0);
		
		//Size:
		//	'size' '=' vector=Vector;
		@Override public ParserRule getRule() { return rule; }
		
		//'size' '=' vector=Vector
		public Group getGroup() { return cGroup; }
		
		//'size'
		public Keyword getSizeKeyword_0() { return cSizeKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//vector=Vector
		public Assignment getVectorAssignment_2() { return cVectorAssignment_2; }
		
		//Vector
		public RuleCall getVectorVectorParserRuleCall_2_0() { return cVectorVectorParserRuleCall_2_0; }
	}
	public class VectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Vector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cXAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cXDOUBLEParserRuleCall_1_0 = (RuleCall)cXAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cYAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cYDOUBLEParserRuleCall_3_0 = (RuleCall)cYAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cZAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cZDOUBLEParserRuleCall_5_0 = (RuleCall)cZAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Vector:
		//	'(' x=DOUBLE ',' y=DOUBLE ',' z=DOUBLE ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' x=DOUBLE ',' y=DOUBLE ',' z=DOUBLE ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//x=DOUBLE
		public Assignment getXAssignment_1() { return cXAssignment_1; }
		
		//DOUBLE
		public RuleCall getXDOUBLEParserRuleCall_1_0() { return cXDOUBLEParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//y=DOUBLE
		public Assignment getYAssignment_3() { return cYAssignment_3; }
		
		//DOUBLE
		public RuleCall getYDOUBLEParserRuleCall_3_0() { return cYDOUBLEParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//z=DOUBLE
		public Assignment getZAssignment_5() { return cZAssignment_5; }
		
		//DOUBLE
		public RuleCall getZDOUBLEParserRuleCall_5_0() { return cZDOUBLEParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class ColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Color");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColor_valueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColor_valueSTRINGTerminalRuleCall_2_0 = (RuleCall)cColor_valueAssignment_2.eContents().get(0);
		
		//Color:
		//	'color' '=' color_value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'color' '=' color_value=STRING
		public Group getGroup() { return cGroup; }
		
		//'color'
		public Keyword getColorKeyword_0() { return cColorKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//color_value=STRING
		public Assignment getColor_valueAssignment_2() { return cColor_valueAssignment_2; }
		
		//STRING
		public RuleCall getColor_valueSTRINGTerminalRuleCall_2_0() { return cColor_valueSTRINGTerminalRuleCall_2_0; }
	}
	public class WallsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Walls");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cWALLSKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cFrontAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cFrontFrontParserRuleCall_0_2_0 = (RuleCall)cFrontAssignment_0_2.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cRightRightParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		private final Assignment cBackAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cBackBackParserRuleCall_2_0 = (RuleCall)cBackAssignment_2.eContents().get(0);
		private final Assignment cLeftAssignment_3 = (Assignment)cUnorderedGroup.eContents().get(3);
		private final RuleCall cLeftLeftParserRuleCall_3_0 = (RuleCall)cLeftAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cUnorderedGroup.eContents().get(4);
		private final Assignment cUpAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cUpUpParserRuleCall_4_0_0 = (RuleCall)cUpAssignment_4_0.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//Walls: //	'WALLS' '(' front = POSITIVE_DOUBLE ',' right = POSITIVE_DOUBLE ','  back = POSITIVE_DOUBLE ',' left = POSITIVE_DOUBLE ')'
		//	'WALLS' '{' front=Front & right=Right & back=Back & left=Left & up=Up '}';
		@Override public ParserRule getRule() { return rule; }
		
		////	'WALLS' '(' front = POSITIVE_DOUBLE ',' right = POSITIVE_DOUBLE ','  back = POSITIVE_DOUBLE ',' left = POSITIVE_DOUBLE ')'
		//'WALLS' '{' front=Front & right=Right & back=Back & left=Left & up=Up '}'
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		////	'WALLS' '(' front = POSITIVE_DOUBLE ',' right = POSITIVE_DOUBLE ','  back = POSITIVE_DOUBLE ',' left = POSITIVE_DOUBLE ')'
		//'WALLS' '{' front=Front
		public Group getGroup_0() { return cGroup_0; }
		
		////	'WALLS' '(' front = POSITIVE_DOUBLE ',' right = POSITIVE_DOUBLE ','  back = POSITIVE_DOUBLE ',' left = POSITIVE_DOUBLE ')'
		//'WALLS'
		public Keyword getWALLSKeyword_0_0() { return cWALLSKeyword_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }
		
		//front=Front
		public Assignment getFrontAssignment_0_2() { return cFrontAssignment_0_2; }
		
		//Front
		public RuleCall getFrontFrontParserRuleCall_0_2_0() { return cFrontFrontParserRuleCall_0_2_0; }
		
		//right=Right
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }
		
		//Right
		public RuleCall getRightRightParserRuleCall_1_0() { return cRightRightParserRuleCall_1_0; }
		
		//back=Back
		public Assignment getBackAssignment_2() { return cBackAssignment_2; }
		
		//Back
		public RuleCall getBackBackParserRuleCall_2_0() { return cBackBackParserRuleCall_2_0; }
		
		//left=Left
		public Assignment getLeftAssignment_3() { return cLeftAssignment_3; }
		
		//Left
		public RuleCall getLeftLeftParserRuleCall_3_0() { return cLeftLeftParserRuleCall_3_0; }
		
		//up=Up '}'
		public Group getGroup_4() { return cGroup_4; }
		
		//up=Up
		public Assignment getUpAssignment_4_0() { return cUpAssignment_4_0; }
		
		//Up
		public RuleCall getUpUpParserRuleCall_4_0_0() { return cUpUpParserRuleCall_4_0_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_1() { return cRightCurlyBracketKeyword_4_1; }
	}
	public class FrontElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Front");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFrontKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuePOSITIVE_DOUBLEParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Front:
		//	'front' '=' value=POSITIVE_DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//'front' '=' value=POSITIVE_DOUBLE
		public Group getGroup() { return cGroup; }
		
		//'front'
		public Keyword getFrontKeyword_0() { return cFrontKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=POSITIVE_DOUBLE
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//POSITIVE_DOUBLE
		public RuleCall getValuePOSITIVE_DOUBLEParserRuleCall_2_0() { return cValuePOSITIVE_DOUBLEParserRuleCall_2_0; }
	}
	public class RightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Right");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuePOSITIVE_DOUBLEParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Right:
		//	'right' '=' value=POSITIVE_DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//'right' '=' value=POSITIVE_DOUBLE
		public Group getGroup() { return cGroup; }
		
		//'right'
		public Keyword getRightKeyword_0() { return cRightKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=POSITIVE_DOUBLE
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//POSITIVE_DOUBLE
		public RuleCall getValuePOSITIVE_DOUBLEParserRuleCall_2_0() { return cValuePOSITIVE_DOUBLEParserRuleCall_2_0; }
	}
	public class LeftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Left");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuePOSITIVE_DOUBLEParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Left:
		//	'left' '=' value=POSITIVE_DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//'left' '=' value=POSITIVE_DOUBLE
		public Group getGroup() { return cGroup; }
		
		//'left'
		public Keyword getLeftKeyword_0() { return cLeftKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=POSITIVE_DOUBLE
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//POSITIVE_DOUBLE
		public RuleCall getValuePOSITIVE_DOUBLEParserRuleCall_2_0() { return cValuePOSITIVE_DOUBLEParserRuleCall_2_0; }
	}
	public class BackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Back");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBackKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuePOSITIVE_DOUBLEParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Back:
		//	'back' '=' value=POSITIVE_DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//'back' '=' value=POSITIVE_DOUBLE
		public Group getGroup() { return cGroup; }
		
		//'back'
		public Keyword getBackKeyword_0() { return cBackKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=POSITIVE_DOUBLE
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//POSITIVE_DOUBLE
		public RuleCall getValuePOSITIVE_DOUBLEParserRuleCall_2_0() { return cValuePOSITIVE_DOUBLEParserRuleCall_2_0; }
	}
	public class UpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.xdrone.XDrone.Up");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuePOSITIVE_DOUBLEParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Up:
		//	'up' '=' value=POSITIVE_DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//'up' '=' value=POSITIVE_DOUBLE
		public Group getGroup() { return cGroup; }
		
		//'up'
		public Keyword getUpKeyword_0() { return cUpKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=POSITIVE_DOUBLE
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//POSITIVE_DOUBLE
		public RuleCall getValuePOSITIVE_DOUBLEParserRuleCall_2_0() { return cValuePOSITIVE_DOUBLEParserRuleCall_2_0; }
	}
	
	
	private final ProgramElements pProgram;
	private final MainElements pMain;
	private final FlyElements pFly;
	private final EnvironmentElements pEnvironment;
	private final UserFunctionElements pUserFunction;
	private final TakeoffElements pTakeoff;
	private final LandElements pLand;
	private final SuperCommandElements pSuperCommand;
	private final CommandElements pCommand;
	private final DOUBLEElements pDOUBLE;
	private final POSITIVE_DOUBLEElements pPOSITIVE_DOUBLE;
	private final FlyToElements pFlyTo;
	private final MoveElements pMove;
	private final RotateElements pRotate;
	private final WaitElements pWait;
	private final FunctionNameElements pFunctionName;
	private final DroneElements pDrone;
	private final ObjectElements pObject;
	private final OriginElements pOrigin;
	private final SizeElements pSize;
	private final VectorElements pVector;
	private final ColorElements pColor;
	private final WallsElements pWalls;
	private final FrontElements pFront;
	private final RightElements pRight;
	private final LeftElements pLeft;
	private final BackElements pBack;
	private final UpElements pUp;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public XDroneGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pMain = new MainElements();
		this.pFly = new FlyElements();
		this.pEnvironment = new EnvironmentElements();
		this.pUserFunction = new UserFunctionElements();
		this.pTakeoff = new TakeoffElements();
		this.pLand = new LandElements();
		this.pSuperCommand = new SuperCommandElements();
		this.pCommand = new CommandElements();
		this.pDOUBLE = new DOUBLEElements();
		this.pPOSITIVE_DOUBLE = new POSITIVE_DOUBLEElements();
		this.pFlyTo = new FlyToElements();
		this.pMove = new MoveElements();
		this.pRotate = new RotateElements();
		this.pWait = new WaitElements();
		this.pFunctionName = new FunctionNameElements();
		this.pDrone = new DroneElements();
		this.pObject = new ObjectElements();
		this.pOrigin = new OriginElements();
		this.pSize = new SizeElements();
		this.pVector = new VectorElements();
		this.pColor = new ColorElements();
		this.pWalls = new WallsElements();
		this.pFront = new FrontElements();
		this.pRight = new RightElements();
		this.pLeft = new LeftElements();
		this.pBack = new BackElements();
		this.pUp = new UpElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ic.ac.uk.xdrone.XDrone".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	main=Main;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Main:
	//	fly=Fly
	//	environment=Environment?;
	public MainElements getMainAccess() {
		return pMain;
	}
	
	public ParserRule getMainRule() {
		return getMainAccess().getRule();
	}
	
	//Fly:
	//	'fly(){' (takeoff+=Takeoff commands+=SuperCommand*
	//	land+=Land)
	//	'}';
	public FlyElements getFlyAccess() {
		return pFly;
	}
	
	public ParserRule getFlyRule() {
		return getFlyAccess().getRule();
	}
	
	//Environment:
	//	{Environment} 'environment(){' (drone+=Drone | walls+=Walls | objects+=Object)*
	//	// 	(drone+=Drone)?
	//	//  	((objects+=Object))*
	//	'}';
	public EnvironmentElements getEnvironmentAccess() {
		return pEnvironment;
	}
	
	public ParserRule getEnvironmentRule() {
		return getEnvironmentAccess().getRule();
	}
	
	//UserFunction:
	//	name=ID '()'
	//	'{'
	//	func+=Command*
	//	'}';
	public UserFunctionElements getUserFunctionAccess() {
		return pUserFunction;
	}
	
	public ParserRule getUserFunctionRule() {
		return getUserFunctionAccess().getRule();
	}
	
	//Takeoff:
	//	'TAKEOFF()';
	public TakeoffElements getTakeoffAccess() {
		return pTakeoff;
	}
	
	public ParserRule getTakeoffRule() {
		return getTakeoffAccess().getRule();
	}
	
	//Land:
	//	'LAND()';
	public LandElements getLandAccess() {
		return pLand;
	}
	
	public ParserRule getLandRule() {
		return getLandAccess().getRule();
	}
	
	//SuperCommand:
	//	Command
	//	| FunctionName;
	public SuperCommandElements getSuperCommandAccess() {
		return pSuperCommand;
	}
	
	public ParserRule getSuperCommandRule() {
		return getSuperCommandAccess().getRule();
	}
	
	//Command:
	//	Wait
	//	| Move
	//	| Rotate
	//	| FlyTo;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//DOUBLE:
	//	'-' POSITIVE_DOUBLE
	//	| POSITIVE_DOUBLE;
	public DOUBLEElements getDOUBLEAccess() {
		return pDOUBLE;
	}
	
	public ParserRule getDOUBLERule() {
		return getDOUBLEAccess().getRule();
	}
	
	//POSITIVE_DOUBLE:
	//	INT '.' INT
	//	| INT;
	public POSITIVE_DOUBLEElements getPOSITIVE_DOUBLEAccess() {
		return pPOSITIVE_DOUBLE;
	}
	
	public ParserRule getPOSITIVE_DOUBLERule() {
		return getPOSITIVE_DOUBLEAccess().getRule();
	}
	
	//FlyTo:
	//	'FLYTO' '(' object_name=STRING ')';
	public FlyToElements getFlyToAccess() {
		return pFlyTo;
	}
	
	public ParserRule getFlyToRule() {
		return getFlyToAccess().getRule();
	}
	
	//Move:
	//	'MOVE' vector=Vector;
	public MoveElements getMoveAccess() {
		return pMove;
	}
	
	public ParserRule getMoveRule() {
		return getMoveAccess().getRule();
	}
	
	//Rotate:
	//	'ROTATE' '(' angle=DOUBLE ')';
	public RotateElements getRotateAccess() {
		return pRotate;
	}
	
	public ParserRule getRotateRule() {
		return getRotateAccess().getRule();
	}
	
	////Up: 
	////	'UP' '('distance = DOUBLE')'
	////;
	////	
	////Down: 
	////	'DOWN' '('distance = DOUBLE')'
	////;
	////Left: 
	////	'LEFT' '('distance = DOUBLE')'
	////;
	////Right: 
	////	'RIGHT' '('distance = DOUBLE')'
	////;
	////Forward: 
	////	'FORWARD' '('distance = DOUBLE')'
	////;
	////Backward: 
	////	'BACKWARD' '('distance = DOUBLE')'
	////;
	////RotateL: 
	////	'ROTATELEFT' '('angle = INT')'
	////;
	////RotateR: 
	////	'ROTATERIGHT' '('angle = INT')'
	////;
	//Wait:
	//	'WAIT' '(' seconds=POSITIVE_DOUBLE ')';
	public WaitElements getWaitAccess() {
		return pWait;
	}
	
	public ParserRule getWaitRule() {
		return getWaitAccess().getRule();
	}
	
	//FunctionName:
	//	func_name=ID '()';
	public FunctionNameElements getFunctionNameAccess() {
		return pFunctionName;
	}
	
	public ParserRule getFunctionNameRule() {
		return getFunctionNameAccess().getRule();
	}
	
	//Drone:
	//	'DRONE' vector=Vector;
	public DroneElements getDroneAccess() {
		return pDrone;
	}
	
	public ParserRule getDroneRule() {
		return getDroneAccess().getRule();
	}
	
	//Object:
	//	object_name=ID '{'
	//	origin=Origin & size=Size & color=Color?
	//	'}';
	public ObjectElements getObjectAccess() {
		return pObject;
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}
	
	//Origin:
	//	'origin' '=' vector=Vector;
	public OriginElements getOriginAccess() {
		return pOrigin;
	}
	
	public ParserRule getOriginRule() {
		return getOriginAccess().getRule();
	}
	
	//Size:
	//	'size' '=' vector=Vector;
	public SizeElements getSizeAccess() {
		return pSize;
	}
	
	public ParserRule getSizeRule() {
		return getSizeAccess().getRule();
	}
	
	//Vector:
	//	'(' x=DOUBLE ',' y=DOUBLE ',' z=DOUBLE ')';
	public VectorElements getVectorAccess() {
		return pVector;
	}
	
	public ParserRule getVectorRule() {
		return getVectorAccess().getRule();
	}
	
	//Color:
	//	'color' '=' color_value=STRING;
	public ColorElements getColorAccess() {
		return pColor;
	}
	
	public ParserRule getColorRule() {
		return getColorAccess().getRule();
	}
	
	//Walls: //	'WALLS' '(' front = POSITIVE_DOUBLE ',' right = POSITIVE_DOUBLE ','  back = POSITIVE_DOUBLE ',' left = POSITIVE_DOUBLE ')'
	//	'WALLS' '{' front=Front & right=Right & back=Back & left=Left & up=Up '}';
	public WallsElements getWallsAccess() {
		return pWalls;
	}
	
	public ParserRule getWallsRule() {
		return getWallsAccess().getRule();
	}
	
	//Front:
	//	'front' '=' value=POSITIVE_DOUBLE;
	public FrontElements getFrontAccess() {
		return pFront;
	}
	
	public ParserRule getFrontRule() {
		return getFrontAccess().getRule();
	}
	
	//Right:
	//	'right' '=' value=POSITIVE_DOUBLE;
	public RightElements getRightAccess() {
		return pRight;
	}
	
	public ParserRule getRightRule() {
		return getRightAccess().getRule();
	}
	
	//Left:
	//	'left' '=' value=POSITIVE_DOUBLE;
	public LeftElements getLeftAccess() {
		return pLeft;
	}
	
	public ParserRule getLeftRule() {
		return getLeftAccess().getRule();
	}
	
	//Back:
	//	'back' '=' value=POSITIVE_DOUBLE;
	public BackElements getBackAccess() {
		return pBack;
	}
	
	public ParserRule getBackRule() {
		return getBackAccess().getRule();
	}
	
	//Up:
	//	'up' '=' value=POSITIVE_DOUBLE;
	public UpElements getUpAccess() {
		return pUp;
	}
	
	public ParserRule getUpRule() {
		return getUpAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
